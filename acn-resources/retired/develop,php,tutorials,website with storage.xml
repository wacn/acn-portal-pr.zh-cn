<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19100" parentID="19098" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="2" createDate="2013-07-11T11:30:38" updateDate="2014-08-18T11:20:44" nodeName="Website with Storage" urlName="website-with-storage" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17389,19098,19100" isDoc=""><bodyText><![CDATA[<div><!--?UMBRACO_MACRO chunkpath="devcenter/php" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>使用 Windows Azure 存储创建 PHP 网站</h1>
<p>本教程演示如何创建 PHP 网站并在后端使用 Windows Azure 表存储服务。本教程假定您已在计算机上安装 <a href="http://www.php.net/manual/en/install.php">PHP</a> 和 Web 服务器。本教程中的说明适用于任何操作系统，包括 Windows、Mac 和 Linux。完成本指南后，您将拥有一个在 Windows Azure 中运行的并访问表存储服务的 PHP 网站。</p>
<p>您将了解到以下内容：</p>
<ul>
<li>如何安装 Windows Azure 客户端库并将其包含在您的应用程序中。</li>
<li>如何使用用于创建表以及用于创建、查询和删除表实体的客户端库。</li>
<li>如何创建 Windows Azure 存储帐户并设置应用程序以使用该帐户。</li>
<li>如何创建 Windows Azure 网站并使用 Git 部署到该网站</li>
</ul>
<p>您将在 PHP 中构建一个简单的 Tasklist Web 应用程序。以下是已完成应用程序的屏幕快照：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/php/ws-storage-app.png" alt="Windows Azure PHP 网站"/></p>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="create-account-and-websites-note" macroAlias="AzureChunkDisplayer" ?-->
<h2>安装 Windows Azure 客户端库</h2>
<p>若要通过 Composer 安装 Windows Azure 的 PHP 客户端库，请执行下列步骤：</p>
<ol>
<li>
<p><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">安装 Git</a>。</p>
<div class="dev-callout">注意
<p>在 Windows 上，您还需要向您的 PATH 环境变量中添加 Git 可执行文件。</p>
</div>
</li>
<li>
<p>在您的项目的根目录中创建名为 <strong>composer.json</strong> 的文件并向其中添加以下代码：</p>
<pre class="prettyprint">{
    "require": {
        "microsoft/windowsazure": "*"
    },          
    "repositories": [
        {
            "type": "pear",
            "url": "http://pear.php.net"
        }
    ],
    "minimum-stability": "dev"
}</pre>
</li>
<li>
<p>将 <strong><a href="http://getcomposer.org/composer.phar">composer.phar</a></strong> 下载到项目根目录中。</p>
</li>
<li>
<p>打开命令提示符并在项目根目录中执行该文件</p>
<pre class="prettyprint">php composer.phar install</pre>
</li>
</ol>
<h2>开始使用客户端库</h2>
<p>在使用库时，必须先执行四个基本步骤，然后才能调用 Windows Azure API。您将创建一个执行这些步骤的初始化脚本。</p>
<ul>
<li>
<p>创建一个名为 <strong>init.php</strong> 的文件。</p>
</li>
<li>
<p>首先，包含 autoloader 脚本：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';</pre>
</li>
<li>
<p>包含您将使用的命名空间。</p>
<p>若要创建任何 Windows Azure 服务客户端，您将需要使用 <strong>ServicesBuilder</strong> 类：</p>
<pre class="prettyprint">use WindowsAzure\Common\ServicesBuilder;</pre>
<p>若要捕获由任何 API 调用生成的异常，您需要 <strong>ServiceException</strong> 类：</p>
<pre class="prettyprint">use WindowsAzure\Common\ServiceException;</pre>
</li>
<li>
<p>若要实例化服务客户端，您还需要有效的连接字符串。表服务连接字符串的格式为：</p>
<p>对于访问实时服务：</p>
<pre class="prettyprint">DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]</pre>
<p>对于访问仿真程序存储：</p>
<pre class="prettyprint">UseDevelopmentStorage=true</pre>
</li>
<li>
<p>使用 <code>ServicesBuilder::createTableService</code> 工厂方法可实例化表服务调用周围的包装。</p>
<pre class="prettyprint">$tableRestProxy = ServicesBuilder::getInstance()-&gt;createTableService($connectionString);</pre>
<p><code>$tableRestProxy</code> 包含可对 Azure 表进行的每个 REST 调用的方法。</p>
</li>
</ul>
<h2>创建表</h2>
<p>您必须先为数据创建一个容器（即表），然后才能存储数据。</p>
<ul>
<li>
<p>创建一个名为 <strong>createtable.php</strong> 的文件。</p>
</li>
<li>
<p>首先，包含您刚刚创建的初始化脚本。您将在访问 Azure 的每个文件中包含此脚本：</p>
<pre class="prettyprint">&lt;?php
require_once "init.php";</pre>
</li>
<li>
<p>然后，调用传入表名称中的 <em>createTable</em>。与其他 NoSQL 表存储相似，Azure 表不需要架构。</p>
<pre class="prettyprint">try {
    $tableRestProxy-&gt;createTable('tasks');
}
catch(ServiceException $e){
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}
?&gt;</pre>
<p>可在此处找到错误代码和消息：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/dd179438.aspx">http://msdn.microsoft.com/zh-cn/library/windowsazure/dd179438.aspx</a></p>
</li>
</ul>
<h2>查询表</h2>
<p>Tasklist 应用程序的主页应列出所有现有任务并允许插入新任务。</p>
<ul>
<li>
<p>创建一个名为 <strong>index.php</strong> 的文件并插入将构成页标题的以下 HTML 和 PHP 代码：</p>
<pre class="prettyprint">&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Index&lt;/title&gt;
    &lt;style type="text/css"&gt;
        body { background-color: #fff; border-top: solid 10px #000;
            color: #333; font-size: .85em; margin: 20; padding: 20;
            font-family: "Segoe UI", Verdana, Helvetica, Sans-Serif;
        }
        h1, h2, h3,{ color: #000; margin-bottom: 0; padding-bottom: 0; }
        h1 { font-size: 2em; }
        h2 { font-size: 1.75em; }
        h3 { font-size: 1.2em; }
        table { margin-top: 0.75em; }
        th { font-size: 1.2em; text-align: left; border: none; padding-left: 0; }
        td { padding: 0.25em 2em 0.25em 0em; border: 0 none; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;My ToDo List &lt;font color="grey" size="5"&gt;(powered by PHP and Azure Tables) &lt;/font&gt;&lt;/h1&gt;
&lt;?php       
require_once "init.php";</pre>
</li>
<li>
<p>若要在 Azure 表中查询存储在<em>任务</em> 表中的<strong>所有实例</strong>，可以调用仅传递表名称的 <em>queryEntities</em> 方法。在下面的“更新实体”一节中，您还将了解如何传递查询特定实体的筛选器。</p>
<pre class="prettyprint">try {
    $result = $tableRestProxy-&gt;queryEntities('tasks');
}
catch(ServiceException $e){
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
</li>
<li>
<p>对结果集中的实体进行迭代：</p>
<pre class="prettyprint">$entities = $result-&gt;getEntities();


for ($i = 0; $i &lt; count($entities); $i++) {</pre>
</li>
<li>
<p>在获取 <code>Entity</code> 后，用于读取数据的模型为 <code>Entity-&gt;getPropertyValue('[name]')</code>：</p>
<pre class="prettyprint">if ($i == 0) {
        echo "&lt;table border='1'&gt;
        &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;Category&lt;/td&gt;
            &lt;td&gt;Date&lt;/td&gt;
            &lt;td&gt;Mark Complete?&lt;/td&gt;
            &lt;td&gt;Delete?&lt;/td&gt;
        &lt;/tr&gt;";
    }
    echo "
        &lt;tr&gt;
            &lt;td&gt;".$entities[$i]-&gt;getPropertyValue('name')."&lt;/td&gt;
            &lt;td&gt;".$entities[$i]-&gt;getPropertyValue('category')."&lt;/td&gt;
            &lt;td&gt;".$entities[$i]-&gt;getPropertyValue('date')."&lt;/td&gt;";
            if ($entities[$i]-&gt;getPropertyValue('complete') == false)
                echo "&lt;td&gt;&lt;a href='markitem.php?complete=true&amp;pk=".$entities[$i]-&gt;getPartitionKey()."&amp;rk=".$entities[$i]-&gt;getRowKey()."'&gt;Mark Complete&lt;/a&gt;&lt;/td&gt;";
            else
                echo "&lt;td&gt;&lt;a href='markitem.php?complete=false&amp;pk=".$entities[$i]-&gt;getPartitionKey()."&amp;rk=".$entities[$i]-&gt;getRowKey()."'&gt;Unmark Complete&lt;/a&gt;&lt;/td&gt;";
            echo "
            &lt;td&gt;&lt;a href='deleteitem.php?pk=".$entities[$i]-&gt;getPartitionKey()."&amp;rk=".$entities[$i]-&gt;getRowKey()."'&gt;Delete&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;";
}


if ($i &gt; 0)
    echo "&lt;/table&gt;";
else
    echo "&lt;h3&gt;No items on list.&lt;/h3&gt;";
?&gt;</pre>
</li>
<li>
<p>最后，您必须插入将数据注入任务插入脚本中的表单并完成 HTML：</p>
<pre class="prettyprint">&lt;hr/&gt;
    &lt;form action="additem.php" method="post"&gt;
        &lt;table border="1"&gt;
            &lt;tr&gt;
                &lt;td&gt;Item Name: &lt;/td&gt;
                &lt;td&gt;&lt;input name="itemname" type="textbox"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Category: &lt;/td&gt;
                &lt;td&gt;&lt;input name="category" type="textbox"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Date: &lt;/td&gt;
                &lt;td&gt;&lt;input name="date" type="textbox"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;input type="submit" value="Add item"/&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</li>
</ul>
<h2>将实体插入表中</h2>
<p>您的应用程序现在可以读取表中存储的所有项目。由于最初没有任何项目，因此我们将添加一个将数据写入数据库的函数。</p>
<ul>
<li>
<p>创建一个名为 <strong>additem.php</strong> 的文件。</p>
</li>
<li>
<p>将以下内容添加到该文件：</p>
<pre class="prettyprint">&lt;?php       
require_once "init.php";        
use WindowsAzure\Table\Models\Entity;
use WindowsAzure\Table\Models\EdmType;</pre>
</li>
<li>
<p>插入实体的第一步是实例化 <code>Entity</code> 对象并设置该对象的属性：</p>
<pre class="prettyprint">$entity = new Entity();
$entity-&gt;setPartitionKey('p1');
$entity-&gt;setRowKey((string) microtime(true));
$entity-&gt;addProperty('name', EdmType::STRING, $_POST['itemname']);
$entity-&gt;addProperty('category', EdmType::STRING, $_POST['category']);
$entity-&gt;addProperty('date', EdmType::STRING, $_POST['date']);
$entity-&gt;addProperty('complete', EdmType::BOOLEAN, false);</pre>
</li>
<li>
<p>然后，可以将刚创建的 <code>$entity</code> 传递到 <code>insertEntity</code> 方法：</p>
<pre class="prettyprint">try{
    $tableRestProxy-&gt;insertEntity('tasks', $entity);
}
catch(ServiceException $e){
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
</li>
<li>
<p>最后，使页面在插入实体后返回主页：</p>
<pre class="prettyprint">header('Location: index.php');      
?&gt;</pre>
</li>
</ul>
<h2>更新实体</h2>
<p>任务列表应用程序能够将项目标记为完成，也能够取消标记项目。主页将传入实体的 <em>RowKey</em> 和 <em>PartitionKey</em> 以及目标状态（marked==1，unmarked==0）。</p>
<ul>
<li>
<p>创建一个名为 <strong>markitem.php</strong> 的文件并添加初始化部分：</p>
<pre class="prettyprint">&lt;?php       
require_once "init.php";</pre>
</li>
<li>
<p>更新实体的第一步是从表中获取实体：</p>
<pre class="prettyprint">$result = $tableRestProxy-&gt;queryEntities('tasks', 'PartitionKey eq \''.$_GET['pk'].'\' and RowKey eq \''.$_GET['rk'].'\'');     
$entities = $result-&gt;getEntities();     
$entity = $entities[0];</pre>
<p>如您所见，传入查询筛选器的格式为 <code>Key eq 'Value'</code>。有关查询语法的完整说明，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/dd894031.aspx">此处</a>。</p>
</li>
<li>
<p>然后，您可以更改任何属性：</p>
<pre class="prettyprint">$entity-&gt;setPropertyValue('complete', ($_GET['complete'] == 'true') ? true : false);</pre>
</li>
<li>
<p><code>updateEntity</code> 方法将执行更新：</p>
<pre class="prettyprint">try{
    $result = $tableRestProxy-&gt;updateEntity('tasks', $entity);
}
catch(ServiceException $e){
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
</li>
<li>
<p>使页面在插入实体后返回主页：</p>
<pre class="prettyprint">header('Location: index.php');      
?&gt;</pre>
</li>
</ul>
<h2>删除实体</h2>
<p>可通过调用一次 <code>deleteItem</code> 来删除项目。传入值为 <strong>PartitionKey</strong> 和 <strong>RowKey</strong>，二者共同构成了实体的主密钥。创建一个名为 <strong>deleteitem.php</strong> 的文件并插入以下代码：</p>
<pre class="prettyprint">&lt;?php

    require_once "init.php";        
    $tableRestProxy-&gt;deleteEntity('tasks', $_GET['pk'], $_GET['rk']);       
    header('Location: index.php');

    ?&gt;</pre>
<h2>创建 Windows Azure 存储帐户</h2>
<p>若要让应用程序将数据存储在云中，您需要先在 Windows Azure 中创建一个存储帐户，然后将正确的身份验证信息传递到 <em>Configuration</em> 类。</p>
<ol>
<li>
<p>登录到<a href="https://manage.windowsazure.cn">管理门户</a>。</p>
</li>
<li>
<p>单击该门户左下角的“+ 新建”图标。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/new_website.jpg" alt="创建新的 Windows Azure 网站"/></p>
</li>
<li>
<p>单击“存储”，然后单击“快速创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/storage-quick-create.png" alt="自定义创建新的网站"/></p>
<p>输入“URL”的值，并在“区域”下拉菜单中为您的网站选择数据中心。单击对话框底部的“创建存储帐户”按钮。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/storage-quick-create-details.png" alt="填写网站详细信息"/></p>
<p>创建存储帐户后，将显示文本“已成功完成存储帐户‘[NAME]’的创建”。</p>
</li>
<li>
<p>确保已选定“存储”选项卡，然后从列表中选择刚创建的存储帐户。</p>
</li>
<li>
<p>单击底部应用程序栏上的“管理密钥”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/storage-manage-keys.png" alt="选择“管理密钥”"/></p>
</li>
<li>
<p>记下所创建的存储帐户的名称和主密钥。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/storage-access-keys.png" alt="选择“管理密钥”"/></p>
</li>
<li>
<p>打开 <strong>init.php</strong> 并将 <code>[YOUR_STORAGE_ACCOUNT_NAME]</code> 和 <code>[YOUR_STORAGE_ACCOUNT_KEY]</code> 替换为您在上一步中记下的帐户名和密钥。保存文件。</p>
</li>
</ol>
<h2>创建 Windows Azure 网站并设置 Git 发布</h2>
<p>按照以下步骤创建 Windows Azure 网站：</p>
<ol>
<li>登录到<a href="https://manage.windowsazure.cn">管理门户</a>。</li>
<li>
<p>单击该门户左下角的“+ 新建”图标。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/new_website.jpg" alt="创建新的 Windows Azure 网站"/></p>
</li>
<li>
<p>单击“网站”，然后单击“快速创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/website-quick-create.png" alt="自定义创建新的网站"/></p>
<p>输入“URL”的值，并在“区域”下拉菜单中为您的网站选择数据中心。单击对话框底部的“创建新网站”按钮。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/website-quick-create-details.png" alt="填写网站详细信息"/></p>
<p>创建网站后，将显示文本“已成功完成网站‘[SITENAME]’的创建”。现在，您可以启用 Git 发布。</p>
</li>
<li>
<p>单击网站列表中显示的网站的名称以打开该网站的“快速启动”仪表板。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/go_to_dashboard.png" alt="打开网站仪表板"/></p>
</li>
<li>
<p>在“快速启动”页的底部，单击“设置 Git 发布”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/setup_git_publishing.png" alt="设置 Git 发布"/></p>
</li>
<li>
<p>若要启用 Git 发布，您必须提供用户名和密码。记下您创建的用户名和密码。（如果您之前已设置 Git 存储库，则将跳过此步骤。）</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/git-deployment-credentials.png" alt="创建发布凭据"/></p>
<p>设置存储库需要花费几秒钟的时间。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/php/creating_repo.jpg" alt="创建 Git 存储库"/></p>
</li>
<li>
<p>在您的存储库已就绪后，单击“将我的本地文件推送到 Windows Azure”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/php/push_files.jpg" alt="获取有关发布文件的 Git 说明"/></p>
<p>记下生成页上的说明 - 稍后您将使用它们。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/git-instructions.png" alt="Git 说明"/></p>
</li>
</ol>
<h2>发布应用程序</h2>
<p>若要使用 Git 发布应用程序，请执行下列步骤。</p>
<ol>
<li>
<p>打开应用程序的根的下方的 <strong>vendor/microsoft/windowsazure</strong> 文件夹并删除以下文件和文件夹：</p>
<ul>
<li>.git</li>
<li>.gitattributes</li>
<li>.gitignore</li>
</ul>
<p>当 Composer 包管理器下载 Windows Azure 客户端库及其依赖项时，该管理器将通过克隆其所在的 GitHub 存储库来执行此操作。在下一步中，将通过在应用程序的根文件夹的外部创建存储库来通过 Git 部署应用程序。Git 将忽略客户端库所在的子存储库，除非已删除存储库特定的文件。</p>
</li>
<li>
<p>打开 GitBash（或终端，如果 Git 位于 <code>PATH</code> 中），将目录更改为应用程序的根目录，并运行以下命令（<strong>注意：</strong>这些步骤与在“创建 Windows Azure 网站并设置 Git 发布”一节的结尾标明的步骤相同）：</p>
<pre class="prettyprint">git init
git add .
git commit -m "initial commit"
git remote add azure [URL for remote repository]
git push azure master</pre>
<p>系统将提示您输入之前创建的密码。</p>
</li>
<li>
<p>浏览到 <strong>http://[您的网站域]/createtable.php</strong> 以创建应用程序的表。</p>
</li>
<li>浏览到 <strong>http://[您的网站域]/index.php</strong> 以开始使用应用程序。</li>
</ol>
<p>发布应用程序之后，您可以开始对其进行更改并使用 Git 发布所做的更改。</p>
<h2>发布对应用程序所做的更改</h2>
<p>若要发布对应用程序所做的更改，请执行下列步骤：</p>
<ol>
<li>本地对应用程序进行更改。</li>
<li>
<p>打开 GitBash（或终端，如果 Git 在您的 <code>PATH</code> 中），将目录更改为应用程序的根目录，并运行以下命令：</p>
<pre class="prettyprint">git add .
git commit -m "comment describing changes"
git push azure master</pre>
<p>系统将提示您输入之前创建的密码。</p>
</li>
<li>
<p>浏览到 <strong>http://[您的网站域]/index.php</strong> 以查看您的更改。</p>
</li>
</ol></div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>website with storage</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>website with storage</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>website with storage</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>