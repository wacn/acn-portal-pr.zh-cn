<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19024" parentID="19011" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="13" createDate="2013-07-11T11:17:23" updateDate="2014-08-18T11:17:39" nodeName="Web site with SQL Database" urlName="web-site-with-sql-database" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,19011,19024" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO modalpopup="0" chunkurl="" chunkname="article-left-menu" hide="0" chunkpath="devcenter/node" modaltrigger="" macroAlias="AzureChunkDisplayer" />
<h1>使用 Windows Azure SQL Database 创建 Node.js Web 应用程序</h1>
<p>本教程演示如何使用 Windows Azure 数据管理提供的 SQL Database 从托管在 Windows Azure 上的 <a href="http://nodejs.org">Node</a> 应用程序存储和访问数据。本教程假定您之前使用过 Node 和 <a href="http://git-scm.com">Git</a>。</p>
<p>您将了解到以下内容：</p>
<ul>
<li>
<p>如何使用 Windows Azure 门户创建 Windows Azure 网站和 SQL Database</p>
</li>
<li>
<p>如何使用 npm（Node 包管理器）安装 Node 模块</p>
</li>
<li>
<p>如何结合使用 SQL Database 与 node-sqlserver 模块</p>
</li>
<li>
<p>如何使用应用程序设置指定应用程序的运行时值</p>
</li>
</ul>
<p>通过按照本教程中的说明操作，您将构建一个简单的基于 Web 的任务管理应用程序，该应用程序可用于创建、检索和完成任务。这些任务存储在 SQL Database 中。</p>
<p>本教程中的项目文件将存储在名为 <strong>tasklist</strong> 的目录中，并且已完成的应用程序将类似于下图：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql_todo_final.png" alt="显示空白 tasklist 的网页"/></p>
<div class="dev-callout">注意
<p>本教程中使用的 Microsoft Driver for Node.JS for SQL Server 目前只有预览版本，它所依赖的运行时组件仅在 Microsoft Windows 和 Windows Azure 操作系统上可用。</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>本教程引用 <strong>tasklist</strong> 文件夹。将省略此文件夹的完整路径，因为路径语义在操作系统之间并不相同。您应在本地文件系统中易于访问的位置（例如 <strong>~/node/tasklist</strong> 或 <strong>c:\node\tasklist</strong>）创建此文件夹</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>下面提到的许多步骤都将使用命令行。对于这些步骤，请使用适用于您的操作系统的命令行，例如 <strong>cmd.exe</strong> (Windows) 或 <strong>Bash</strong> (Unix Shell)。在 OS X 系统上，可以通过 Terminal 应用程序访问命令行。</p>
</div>
<h2>必备组件</h2>
<p>在按照本文中的说明操作之前，您应确保已安装下列项：</p>
<ul>
<li>
<p><a href="http://nodejs.org">node</a> 0.6.14 或更高版本</p>
</li>
<li>
<p><a href="http://git-scm.com">Git</a></p>
</li>
<li>
<p>Microsoft SQL Server 本机客户端库 - 作为 <a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=29065">Microsoft SQL Server 2012 功能包</a>的一部分提供</p>
</li>
<li>
<p>文本编辑器</p>
</li>
<li>
<p>Web 浏览器</p>
</li>
</ul>
<h2>创建网站和数据库</h2>
<p>按照以下步骤创建 Windows Azure 网站和 SQL Database：</p>
<ol>
<li>登录<a href="https://manage.windowsazure.cn/">管理门户</a>。</li>
<li>
<p>单击门户左下角的“+ 新建”图标。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/new_website.jpg" alt="新建 Windows Azure 网站"/></p>
</li>
<li>
<p>单击“网站”，然后单击“与数据库一起创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/custom_create.jpg" alt="自定义创建新的网站"/></p>
<p>输入一个“URL”值，从“数据库”下拉列表中选择“新建 SQL Database”，并在“区域”下拉列表为网站选择数据中心。单击对话框底部的箭头。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/website_details_sqlazure.jpg" alt="填写网站详细信息"/></p>
</li>
<li>
<p>输入一个数据库“名称”值，选择“版本”<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee621788.aspx">（Web 版或企业版）</a>，依次选择数据库的“最大大小”、“排序规则”和“新建 SQL Database 服务器”。单击对话框底部的箭头。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/database_settings.jpg" alt="填写 SQL Database 设置"/></p>
</li>
<li>
<p>输入管理员名称和密码（并确认密码），选择您将在其中创建新的 SQL Database 服务器的区域，选中“允许 Windows Azure 服务访问服务器”框。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/create_server.jpg" alt="新建 SQL Database 服务器"/></p>
<p>创建网站后，您会看到文本“已成功完成网站‘[SITENAME]’的创建”。现在，您可以启用 Git 发布。</p>
</li>
<li>
<p>单击在网站列表中显示的网站名称以打开该网站的“快速启动”仪表板。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/go_to_dashboard.png" alt="打开网站仪表板"/></p>
</li>
<li>
<p>在“快速启动”页面底部，单击“设置 Git 发布”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/setup_git_publishing.png" alt="设置 Git 发布"/></p>
</li>
<li>
<p>要启用 Git 发布，必须提供用户名和密码。记下您创建的用户名和密码。（如果您之前已设置 Git 存储库，则将跳过此步骤。）</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/git-deployment-credentials.png" alt="创建发布凭据"/></p>
<p>设置存储库需要花几秒钟时间。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/creating_repo.jpg" alt="创建 Git 存储库"/></p>
</li>
<li>
<p>在存储库准备就绪后，您将看到有关将应用程序文件推送到该存储库的说明。记下这些说明，稍后您将使用它们。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/git_instructions.png" alt="Git 说明"/></p>
</li>
</ol>
<h2>获取 SQL Database 连接信息</h2>
<p>若要连接到在 Windows Azure 网站中运行的 SQL Database 实例，您将需要连接信息。若要获取 SQL Database 连接信息，请按照以下步骤操作：</p>
<ol>
<li>
<p>从管理门户中，单击“链接的资源”，然后单击数据库名称。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/linked_resources.jpg" alt="链接的资源"/></p>
</li>
<li>
<p>单击“查看连接字符串”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/connection_string.jpg" alt="连接字符串"/></p>
</li>
<li>
<p>从结果对话框的“ODBC”部分，记下稍后将要使用到的连接字符串。</p>
</li>
</ol>
<h2>设计任务表</h2>
<p>若要创建用于存储 tasklist 应用程序项的数据库表，请执行下列步骤：</p>
<ol>
<li>
<p>从管理门户中，选择您的 SQL Database，然后单击该页面底部的“管理”。如果您收到一条内容为当前 IP 不属于防火墙规则的消息，请选择“确定”以添加该 IP 地址。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql-manage.png" alt="“管理”按钮"/></p>
</li>
<li>
<p>使用您前面在创建数据库服务器时选择的登录名和密码进行登录。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sqlazurelogin.png" alt="数据库管理登录"/></p>
</li>
<li>
<p>从页面左下角，选择“设计”，然后选择“新建表”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/new-table.png" alt="新建表"/></p>
</li>
<li>
<p>输入“tasks”作为“表名”，选中“ID”列的“是否标识?”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/table-name-identity.png" alt="表名设置为 tasks 且已选中“是否标识”"/></p>
</li>
<li>
<p>将“Column1”更改为“名称”，“Column2”更改为“类别”。通过单击“添加列”按钮来添加两个新列。将第一个新列命名为“已创建”且类型为“date”。将第二个新列命名为“已完成”且类型为“bit”。这两个新列都应标记“是否必需?”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/table-columns.png" alt="表设计已完成"/></p>
</li>
<li>
<p>单击“保存”按钮保存对表所做的更改。现在，您可以关闭 SQL Database 管理页面。</p>
</li>
</ol>
<h2>安装模块并生成基架</h2>
<p>在本节中，您将创建新的 Node 应用程序并使用 npm 添加模块包。对于任务列表应用程序，您将使用 <a href="http://expressjs.com">express</a> 和 <a href="https://github.com/WindowsAzure/node-sqlserver">node-sqlserver</a> 模块。Express 模块为 Node 提供“模型视图控制器”框架，而 node-sqlserver 模块提供与 Windows Azure SQL Database 的连接。</p>
<h3>安装 Express 并生成基架</h3>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。如果 <strong>tasklist</strong> 目录不存在，请创建该目录。</p>
</li>
<li>
<p>输入以下命令来安装 Express。</p>
<pre class="prettyprint">npm install express -g</pre>
<div class="dev-callout"><strong>注意</strong>
<p>在某些操作系统上使用“-g”参数时，您可能会收到一条错误 <strong>Error:EPERM, chmod '/usr/local/bin/express'</strong> 和一个尝试以管理员身份运行帐户的请求。如果发生这种情况，请使用 <strong>sudo</strong> 命令以更高的权限级别运行 npm。</p>
</div>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">express@2.5.9 /usr/local/lib/node_modules/express
â”œâ”€â”€ mime@1.2.4
â”œâ”€â”€ mkdirp@0.3.0
â”œâ”€â”€ qs@0.4.2
â””â”€â”€ connect@1.8.7</pre>
<div class="dev-callout"><strong>注意</strong>
<p>在安装 Express 模块时使用“-g”参数将全局安装该模块。这样我们就可以访问 <strong>express</strong> 命令以生成网站基架，而无需键入其他路径信息。</p>
</div>
</li>
<li>
<p>若要创建将用于此应用程序的基架，请使用 <strong>express</strong> 命令：</p>
<pre class="prettyprint">express</pre>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">create : .
create : ./package.json
create : ./app.js
create : ./public
create : ./public/javascripts
create : ./public/images
create : ./public/stylesheets
create : ./public/stylesheets/style.css
create : ./routes
create : ./routes/index.js
create : ./views
create : ./views/layout.jade
create : ./views/index.jade


dont forget to install dependencies:
$ cd . &amp;&amp; npm install</pre>
<p>此命令完成后，您应当会在 <strong>tasklist</strong> 目录中拥有几个新目录和文件。</p>
</li>
</ol>
<h3>安装其他模块</h3>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 文件夹，然后输入以下命令安装 <strong>package.json</strong> 文件中描述的模块：</p>
<pre class="prettyprint">npm install</pre>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">express@2.5.8 ./node_modules/express
â”œâ”€â”€ mime@1.2.4
â”œâ”€â”€ qs@0.4.2
â”œâ”€â”€ mkdirp@0.3.0
â””â”€â”€ connect@1.8.7
jade@0.26.0 ./node_modules/jade
â”œâ”€â”€ commander@0.5.2
â””â”€â”€ mkdirp@0.3.0</pre>
<p>这将安装 Express 需要的所有默认模块。</p>
</li>
<li>
<p>接下来，使用以下命令添加 nconf 模块。此模块将由应用程序用来从配置文件中读取数据库连接字符串。</p>
<p>npm install nconf -save</p>
</li>
<li>
<p>接下来，从<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=29995">下载中心</a>下载 Microsoft Driver for Node.JS for SQL Server 的二进制版本。</p>
</li>
<li>
<p>将存档解压缩到 <strong>tasklist\node_modules</strong> 目录。</p>
</li>
<li>
<p>运行 <strong>tasklist\node_modules</strong> 目录中的 <strong>msnodesql-install.cmd</strong> 文件。这将在 <strong>node_modules</strong> 下创建 <strong>msnodesql</strong> 子目录，并将驱动程序文件移到此新的目录结构中。</p>
</li>
<li>
<p>如果不再需要 <strong>msnodesql-install.cmd</strong> 文件，则将其删除。</p>
</li>
</ol>
<h2>在 Node 应用程序中使用 SQL Database</h2>
<p>在此部分，您将通过修改现有 <strong>app.js</strong> 来扩展 <strong>express</strong> 命令创建的基本应用程序，并创建一个新 <strong>index.js</strong> 文件来使用前面创建的数据库。</p>
<h3>修改控制器</h3>
<ol>
<li>
<p>在 <strong>tasklist/routes</strong> 目录中，用文本编辑器打开 <strong>index.js</strong> 文件。</p>
</li>
<li>
<p>将 <strong>index.js</strong> 文件中的现有代码替换为以下代码。这将加载 msnodesql 和 nconf 模块，然后使用 nconf 从名为 <strong>SQL_CONN</strong> 的环境变量或 <strong>config.json</strong> 文件中的 <strong>SQL_CONN</strong> 值中加载连接字符串。</p>
<pre class="prettyprint">var sql = require('msnodesql')
    , nconf = require('nconf');


nconf.env()
     .file({ file: 'config.json' });
var conn = nconf.get("SQL_CONN");</pre>
</li>
<li>
<p>继续通过添加 <strong>index</strong> 和 <strong>updateItem</strong> 方法来添加到 <strong>index.js</strong> 文件。<strong>index</strong> 方法会从数据库中返回所有未完成的任务，而 <strong>updateItem</strong> 会将选中的任务标记为已完成。</p>
<pre class="prettyprint">exports.index = function(req, res) {
    var select = "select * from tasks where completed = 0";
    sql.query(conn, select, function(err, items) {
        if(err)
            throw err;
        res.render('index', { title: 'My ToDo List ', tasks: items });
    });
};


exports.updateItem = function(req, res) {
    var item = req.body.item;
    if(item) {
        var insert = "insert into tasks (name, category, created, completed) values (?, ?, GETDATE(), 0)";
        sql.query(conn, insert, [item.name, item.category], function(err) {
            if(err)
                throw err;
            res.redirect('/');
        });
    } else {
        var completed = req.body.completed;
        if(!completed.forEach)
            completed = [completed];
        var update = "update tasks set completed = 1 where id in (" + completed.join(",") + ")";
        sql.query(conn, update, function(err) {
            if(err)
                throw err;
            res.redirect('/');
        });
    }
}</pre>
</li>
<li>
<p>保存 <strong>index.js</strong> 文件。</p>
</li>
</ol>
<h3>修改 app.js</h3>
<ol>
<li>
<p>在 <strong>tasklist</strong> 目录中，用文本编辑器打开 <strong>app.js</strong> 文件。此文件之前是通过运行 <strong>express</strong> 命令创建的。</p>
</li>
<li>
<p>在 app.js 文件中，向下滚动到以下代码位置。</p>
<pre class="prettyprint">app.configure('development', function(){
app.use(express.errorHandler());
});</pre>
</li>
<li>
<p>现在插入以下代码。</p>
<pre class="prettyprint">app.get('/', routes.index);
app.post('/', routes.updateItem);</pre>
<p>这样会将新路由添加到您之前在 <strong>index.js</strong> 文件中添加的 <strong>updateItem</strong> 方法中。</p>
</li>
<li>
<p>保存 <strong>app.js</strong> 文件。</p>
</li>
</ol>
<h3>修改索引视图</h3>
<ol>
<li>
<p>将目录更改为 <strong>views</strong> 目录并在文本编辑器中打开 <strong>index.jade</strong> 文件。</p>
</li>
<li>
<p>将 <strong>index.jade</strong> 文件的内容替换为以下代码。这将定义用于显示现有任务的视图，以及用于添加新任务和将现有任务标记为已完成的表单。</p>
<pre class="prettyprint">h1= title
br


form(action="/", method="post")
  table(class="table table-striped table-bordered")
    thead
      tr
        td Name
        td Category
        td Date
        td Complete
    tbody
    each task in tasks
      tr
        td #{task.name}
        td #{task.category}
        td #{task.created}
        td
          input(type="checkbox", name="completed", value="#{task.ID}", checked=task.completed == 1)
  button(type="submit", class="btn") Update tasks
hr


form(action="/", method="post", class="well")
  label Item Name:
  input(name="item[name]", type="textbox")
  label Item Category:
  input(name="item[category]", type="textbox")
  br
  button(type="submit", class="btn") Add Item</pre>
</li>
<li>
<p>保存并关闭 <strong>index.jade</strong> 文件。</p>
</li>
</ol>
<h3>修改全局布局</h3>
<p><strong>views</strong> 目录中的 <strong>layout.jade</strong> 文件用作其他 <strong>.jade</strong> 文件的全局模板。在此步骤中，您将对其进行修改以使用 <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>（一个可以轻松设计美观网站的工具包）。</p>
<ol>
<li>
<p>下载并提取 <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> 的文件。将 <strong>bootstrap.min.css</strong> 文件从 <strong>bootstrap\css</strong> 文件夹复制到您的 tasklist 应用程序的 <strong>public\stylesheets</strong> 目录。</p>
</li>
<li>
<p>从 <strong>views</strong> 文件夹中，用文本编辑器打开 <strong>layout.jade</strong> 并将其中内容替换为以下代码：</p>
<pre class="prettyprint">!!!html
html
  head
    title= title
    meta(http-equiv='X-UA-Compatible', content='IE=10')
    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
  body(class='app')
    div(class='navbar navbar-fixed-top')
      .navbar-inner
        .container
          a(class='brand', href='/') My Tasks
    .container!= body</pre>
</li>
<li>
<p>保存 <strong>layout.jade</strong> 文件。</p>
</li>
</ol>
<h3>创建配置文件</h3>
<p><strong>config.json</strong> 文件包含用于连接到 SQL Database 的连接字符串，并在运行时由 <strong>index.js</strong> 文件进行读取。若要创建此文件，请执行以下步骤：</p>
<ol>
<li>
<p>在 <strong>tasklist</strong> 目录中，创建一个名为 <strong>config.json</strong> 的新文件并在文本编辑器中打开它。</p>
</li>
<li>
<p>该 <strong>config.json</strong> 文件的内容看上去应如下所示：</p>
<pre class="prettyprint">{
  "SQL_CONN" : "connection_string"
}</pre>
<p>将 <strong>connection_string</strong> 替换为前面返回的 ODBC 连接字符串值。</p>
</li>
<li>
<p>保存文件。</p>
</li>
</ol>
<h2>在本地运行应用程序</h2>
<p>若要在您的本地计算机中测试应用程序，请执行以下步骤：</p>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。</p>
</li>
<li>
<p>使用以下命令在本地启动应用程序：</p>
<pre class="prettyprint">node app.js</pre>
</li>
<li>
<p>打开 Web 浏览器并导航到 http://127.0.0.1:3000。这应该会显示类似于下图的网页：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql_todo_empty.png" alt="显示空白 tasklist 的网页"/></p>
</li>
<li>
<p>使用提供的 <strong>Item Name</strong>（项名称）和 <strong>Item Category</strong>（项类别）字段输入信息，然后单击 <strong>Add item</strong>（添加项）。</p>
</li>
<li>
<p>页面应更新为在 ToDo List 中显示该项。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql_todo_list.png" alt="任务列表中新项的图像"/></p>
</li>
<li>
<p>若要完成任务，只需选中“Complete”（完成）列中的复选框，然后单击 <strong>Update task</strong>（更新任务）。</p>
</li>
<li>
<p>若要结束 Node 进程，请转到命令行并按 <strong>Ctrl</strong> 和 <strong>C</strong> 键。</p>
</li>
</ol>
<h2>将您的应用程序部署到 Windows Azure</h2>
<p>在此部分，您将使用在创建网站后接收到的部署步骤来将应用程序发布到 Windows Azure。</p>
<h3>发布应用程序</h3>
<ol>
<li>
<p>从命令行上，将目录改为 <strong>tasklist</strong> 目录（如果您尚未在此目录中）。</p>
</li>
<li>
<p>使用下列命令初始化应用程序的本地 Git 存储库、向其中添加应用程序文件，最后将文件推送到 Windows Azure</p>
<pre class="prettyprint">git init
git add .
git commit -m "adding files"
git remote add azure [URL for remote repository]
git push azure master</pre>
<p>在部署结束时，您将看到如下语句：</p>
<pre class="prettyprint">To https://username@tabletasklist.chinacloudsites.cn/TableTasklist.git
 * [new branch]      master -&gt; master</pre>
</li>
<li>
<p>在完成推送操作后，请浏览到 <strong>http://[site name].chinacloudsites.cn/</strong> 查看您的应用程序。</p>
</li>
</ol>
<h3>切换到环境变量</h3>
<p>前面我们实现了在 <strong>SQL_CONN</strong> 环境变量中查找连接字符串或从 <strong>config.json</strong> 文件加载该值的代码。在接下来的步骤中，您将在网站配置中创建应用程序通过环境变量实际访问的键/值对。</p>
<ol>
<li>
<p>从管理门户，单击“网站”，然后选择您的网站。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/go_to_dashboard.png" alt="打开网站仪表板"/></p>
</li>
<li>
<p>单击“配置”，然后找到页面的“应用设置”部分。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql-task-configure.png" alt="配置链接"/></p>
</li>
<li>
<p>在“应用程序设置”部分，在“键”字段中输入 <strong>SQL_CONN</strong>，在“值”字段中输入 ODBC 连接字符串。最后，单击复选标记。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/appsettings.png" alt="应用程序设置"/></p>
</li>
<li>
<p>最后，单击页面底部的“保存”图标，将此更改提交到运行时环境。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/savebutton.png" alt="保存应用程序设置"/></p>
</li>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录，然后输入以下命令以删除 <strong>config.json</strong> 文件：</p>
<pre class="prettyprint">git rm config.json
git commit -m "Removing config file"</pre>
</li>
<li>
<p>执行以下命令将更改部署到 Windows Azure：</p>
<pre class="prettyprint">git push azure master</pre>
</li>
</ol>
<p>在将更改部署到 Windows Azure 后，您的 Web 应用程序应当继续工作，因为它现在正在从“应用设置”条目读取连接字符串。若要对此进行验证，请在“应用程序设置”中将 <strong>SQL_CONN</strong> 条目的值更改为一个无效值。在您保存该值后，网站会因连接字符串无效而失败。</p>
<h2>后续步骤</h2>
<ul>
<li>
<p><a href="../website-with-mongodb-(mac)/">使用 MongoDB 构建 Node.js Web 应用程序</a></p>
</li>
<li>
<p><a href="/zh-cn/develop/nodejs/tutorials/web-site-with-storage/">使用表存储构建 Node.js Web 应用程序</a></p>
</li>
</ul>
<h2>其他资源</h2>
<p><a href="/zh-cn/develop/nodejs/how-to-guides/command-line-tools/">适用于 Mac 和 Linux 的 Windows Azure 命令行工具</a></p>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>使用 SQL Database 创建 Node.js 网站 - Windows Azure 教程</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>develop-nodejs-tutorials-web-site-with-sql-database</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[了解如何创建可访问 SQL Database 的 Node.js 网站并将其部署到 Windows Azure]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>使用 SQL Database 创建网站</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>