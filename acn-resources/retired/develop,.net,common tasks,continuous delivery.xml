<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="18798" parentID="18795" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="3" createDate="2013-07-11T10:33:33" updateDate="2014-08-18T11:08:09" nodeName="Continuous Delivery" urlName="continuous-delivery" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18795,18798" isDoc=""><bodyText><![CDATA[<div><!--?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>在 Windows Azure 中持续交付云服务</h1>
<p>本文中所述过程向您演示如何设置对 Windows Azure 云应用程序的持续交付。利用此过程，您可在每次代码签入后自动创建包并将包部署到 Windows Azure。本文中介绍的包生成过程与 Visual Studio 中的 Package 命令等效，而发布步骤与 Visual Studio 中的 Publish 命令等效。本文包含用于创建生成服务器的方法以及 MSBuild 命令行语句和 Windows PowerShell 脚本，并演示了如何选择性地配置 Visual Studio Team Foundation Server - Team Build 定义以使用 MSBuild 命令和 PowerShell 脚本。可针对您的生成环境和 Windows Azure 目标环境自定义此过程。</p>
<p>此外，通过使用 Team Foundation Service（承载于 Windows Azure 中的某个版本的 TFS），可以更轻松地做到这一点。有关更多信息，请参阅<a href="/zh-cn/develop/net/common-tasks/publishing-with-tfs">使用 Team Foundation Service 向 Windows Azure 持续交付</a>。</p>
<p>开始之前，您应从 Visual Studio 中发布应用程序。这将确保所有资源在您尝试实现发布过程的自动化时可用并进行初始化。</p>
<p>此任务包括下列步骤：</p>
<ul>
<li><a href="#step1">步骤 1:配置生成服务器</a></li>
<li><a href="#step2">步骤 2:使用 MSBuild 命令生成包</a></li>
<li><a href="#step3">步骤 3:使用 TFS Team Build 生成包（可选）</a></li>
<li><a href="#step4">步骤 4:使用 PowerShell 脚本发布包</a></li>
<li><a href="#step5">步骤 5:使用 TFS Team Build 发布包（可选）</a></li>
</ul>
<h2><a name="step1"></a> <span class="short-header">配置生成服务器</span>步骤 1：配置生成服务器</h2>
<p>您必须先在生成服务器上安装必需的软件和工具，然后才能使用 MSBuild 创建 Windows Azure 包。</p>
<p>无需在生成服务器上安装 Visual Studio。若要使用 Team Foundation 生成服务管理生成服务器，请按照 <a href="http://go.microsoft.com/fwlink/p/?LinkId=239963">Team Foundation 生成服务</a>文档中的说明操作。</p>
<ol>
<li>在生成服务器上，安装包含 MSBuild 的 <a href="http://go.microsoft.com/fwlink/?LinkId=239538">.NET Framework 4</a>。</li>
<li>安装 <a href="http://go.microsoft.com/fwlink/?LinkId=239600">Windows Azure 创作工具</a>（根据您的生成服务器的处理器，查找 WindowsAzureAuthoringTools-x86.msi 或 WindowsAzureAuthoringTools-x64.msi）。</li>
<li>将 Microsoft.WebApplication.targets 文件从 Visual Studio 安装复制到生成服务器中。在安装了 Visual Studio 的计算机上，该文件位于目录 C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications（对于 Visual Studio 2012，为 v11.0）中。您应将该文件复制到生成服务器上的同一目录中。</li>
<li>安装 <a href="http://go.microsoft.com/fwlink/?LinkId=257862">Windows Azure Tools for Visual Studio</a>。查找 WindowsAzureTools.VS110.exe。</li>
</ol>
<h2><a name="step2"></a> <span class="short-header">使用 MSBuild 生成包</span>步骤 2：使用 MSBuild 命令生成包</h2>
<p>本节介绍如何构造用于生成 Windows Azure 包的 MSBuild 命令。在生成服务器上执行此步骤可确认所有内容配置正确并且 MSBuild 命令起到预期作用。您可将此命令行添加到生成服务器上的现有生成脚本中，也可在 TFS 生成定义中使用此命令行，如下节所述。有关命令行参数和 MSBuild 的更多信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/ms164311(v=VS.90).aspx">MSBuild 命令行参考</a>。</p>
<ol>
<li>
<p>如果在生成服务器上安装了 Visual Studio，请单击“开始”、再单击“所有程序”，然后在“Visual Studio 工具”文件夹中找到并单击“Visual Studio 命令提示符”。</p>
<p>如果未在生成服务器上安装 Visual Studio，则请打开命令提示符并确保可按相应的路径访问 MSBuild.exe。MSBuild 与 .NET Framework 一起安装在路径<br /> %WINDIR%\Microsoft.NET\Framework\<em>&lt;版本\&gt;</em> 中。例如，若要在已安装 .NET Framework 4 的情况下将 MSBuild.exe 添加到 PATH 环境变量，请在命令提示符处键入以下命令：</p>
<pre class="prettyprint">set PATH=%PATH%;"C:\Windows\Microsoft.NET\Framework\4.0"</pre>
</li>
<li>
<p>在命令提示符处，导航到包含要生成的 Windows Azure 项目文件的文件夹。</p>
</li>
<li>
<p>将 msbuild 与 /target:Publish 选项一起运行，如以下示例所示：</p>
<pre class="prettyprint">MSBuild /target:Publish</pre>
<p>此选项可缩写为 /t:Publish。安装 Windows Azure SDK 后，MSBuild 中的 /t:Publish 选项不应与 Visual Studio 中的可用 Publish 命令混淆。/t:Publish 选项仅生成 Windows Azure 包。其部署包的方式与 Visual Studio 中的 Publish 命令部署包的方式不同。</p>
<p>您也可以将项目名称指定为 MSBuild 参数。如果未指定，则将使用当前目录。有关 MSBuild 命令行选项的更多信息，请参阅 <a href="http://go.microsoft.com/fwlink/p/?LinkId=239966">MSBuild 命令行参考</a>。</p>
</li>
<li>
<p>查找输出。默认情况下，此命令将创建与项目的根文件夹相关的目录，例如 <em>&lt;ProjectDir&gt;</em>\bin\<em>&lt;配置&gt;</em>\app.publish\。在构建 Windows Azure 项目时，将生成两个文件，即包文件本身和附带的配置文件：</p>
<ul>
<li>Project.cspkg</li>
<li>ServiceConfiguration.<em>&lt;TargetProfile&gt;</em>.cscfg</li>
</ul>
<p>默认情况下，每个 Windows Azure 项目均包含两个服务配置文件（.cscfg 文件），这两个文件分别针对本地（调试）生成和云（过渡或生产）生成，您可根据需要添加或删除服务配置文件。在 Visual Studio 中生成包时，系统会询问您要将哪个服务配置文件与包一起包含。</p>
</li>
<li>
<p>指定服务配置文件。使用 MSBuild 生成包时，默认情况下将包含本地服务配置文件。若要包含其他服务配置文件，请设置 MSBuild 命令的 TargetProfile 属性，如以下示例所示：</p>
<pre class="prettyprint">MSBuild /t:Publish /p:TargetProfile=Cloud</pre>
</li>
<li>
<p>指定输出的位置。使用 /p:PublishDir=<em>&lt;目录\&gt;</em>\ 选项设置路径，包含尾随反斜杠分隔符，如以下示例所示：</p>
<pre class="prettyprint">MSBuild /target:Publish /p:PublishDir=\\myserver\drops\</pre>
<p>构造并测试相应的 MSBuild 命令行以生成项目并将其并入一个 Windows Azure 包后，您可将此命令行添加到生成脚本中。如果生成服务器使用自定义脚本，则此过程将依赖生成自定义过程的细节。如果您要将 TFS 用作生成环境，则可按照下一步中的说明操作来将 Windows Azure 包生成添加到生成过程中。</p>
</li>
</ol>
<h2><a name="step3"></a> <span class="short-header">使用 TFS 生成包</span>步骤 3：使用 TFS Team Build 生成包（可选）</h2>
<p>如果您已将 Team Foundation Server (TFS) 设置为生成控制器并将生成服务器设置为 TFS 生成计算机，则可为 Windows Azure 包设置自动化生成。有关如何设置 Team Foundation Server 并将其用作生成系统的信息，请参阅<a href="http://go.microsoft.com/fwlink/?LinkId=238798">了解 Team Foundation Build 系统</a>。具体而言，以下过程假定您已按<a href="http://go.microsoft.com/fwlink/?LinkId=238799">配置生成计算机</a>中所述配置了生成服务器。</p>
<p>若要将 TFS 配置为生成 Windows Azure 包，请执行下列步骤：</p>
<ol>
<li>
<p>在开发计算机上的 Visual Studio 2010 中的“视图”菜单上，选择“团队资源管理器”，或选择 Ctrl+\、Ctrl+M。在“团队资源管理器”窗口中，展开“生成”节点，右键单击“所有生成定义”，然后单击“新建生成定义”：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/tfs-01.png"/></p>
</li>
<li>
<p>单击“进程”选项卡。在“进程”选项卡上，选择默认模板，在“要生成的项目”下方选择项目，然后在网格中展开“高级”部分。</p>
</li>
<li>
<p>选择“MSBuild 参数”，并按上面步骤 2 中所述设置相应的 MSBuild 命令行参数。例如，输入 <strong>/t:Publish /p:PublishDir=\\myserver\drops\</strong> 以生成一个包并将包文件复制到位置 \\myserver\drops\：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/tfs-02.png"/></p>
<p><strong>注意：</strong> 通过将这些文件复制到公共共享，可以更轻松地手动从开发计算机部署包。</p>
</li>
<li>
<p>单击“触发器”选项卡，然后为希望生成包的时间指定所需条件。例如，指定“持续集成”可在进行源代码管理签入时生成包。</p>
</li>
<li>
<p>选择“生成默认值”选项卡，并在生成控制器下确认生成服务器的名称。此外，选择“将生成输出复制到以下放置文件夹”选项并指定所需的放置位置。</p>
</li>
<li>
<p>通过签入对项目的更改来测试生成步骤是否成功或对新生成进行排队。若要对新生成进行排队，请在团队资源管理器中，右键单击“所有生成定义”，然后选择“使新生成入队”。</p>
</li>
</ol>
<h2><a name="step4"></a> <span class="short-header">使用 Powershell 进行发布</span>步骤 4：使用 Powershell 脚本发布包</h2>
<p>本节介绍如何构造使用可选参数将云应用程序包输出发布到 Windows Azure 的 Windows PowerShell 脚本。在执行自定义生成自动化中的生成步骤后，可以调用此脚本。也可以从 Visual Studio TFS Team Build 中的过程模板工作流活动中调用此脚本。</p>
<ol>
<li>
<p>安装 <a href="http://go.microsoft.com/fwlink/?LinkId=256262">Windows Azure PowerShell Cmdlet</a>（v0.6.1 或更高版本）。在 cmdlet 设置阶段，选择作为管理单元安装。请注意，此受支持的正式版本将替代通过 CodePlex 提供的旧版本，尽管早期版本已采用 2.x.x 的形式进行编号。</p>
</li>
<li>
<p>使用“开始”菜单启动 Windows Azure PowerShell。如果通过此方式启动，则将加载 Windows Azure PowerShell cmdlet。</p>
</li>
<li>
<p>在 PowerShell 提示符处，通过键入部分命令 Get-Azure，然后按 Tab 键完成语句，从而验证是否已加载 PowerShell cmdlet。</p>
<p>您应看到各种 Windows Azure PowerShell 命令。</p>
</li>
<li>
<p>通过导入 .publishsettings 文件中的订阅信息来确认您能够连接到 Windows Azure 订阅。</p>
<p>Import-AzurePublishSettingsFile c:\scripts\WindowsAzure\default.publishsettings</p>
<p>然后，提供以下命令</p>
<p>Get-AzureSubscription</p>
<p>这将显示有关您的订阅的信息。确认所有内容正确。</p>
</li>
<li>
<p>将<a href="#script">本文末尾</a>提供的脚本模板保存到脚本文件夹，路径为 c:\scripts\WindowsAzure\<strong>PublishCloudService.ps1</strong>。</p>
</li>
<li>
<p>查看脚本的参数部分。添加或修改任何默认值。始终可通过传入显式参数来覆盖这些值。</p>
</li>
<li>
<p>确保已在订阅中创建可通过发布脚本定位的有效云服务和存储帐户。存储帐户（Blob 存储）将用于在创建部署时上载和临时存储部署包和配置文件。</p>
<ul>
<li>
<p>若要创建新的云服务，您可调用此脚本或使用 Windows Azure 管理门户。云服务名称将用作完全限定域名中的前缀，因此该名称必须是唯一的。</p>
<pre class="prettyprint">New-AzureService -ServiceName "mytestcloudservice" -Location "North Central US" -Label "mytestcloudservice"</pre>
</li>
<li>
<p>若要创建新的存储帐户，您可调用此脚本或使用 Windows Azure 管理门户。存储帐户名称将用作完全限定域名中的前缀，因此该名称必须是唯一的。您可尝试使用与云服务相同的名称。</p>
<pre class="prettyprint">New-AzureStorageAccount -ServiceName "mytestcloudservice" -Location "North Central US" -Label "mytestcloudservice"</pre>
</li>
</ul>
</li>
<li>
<p>直接从 Windows Azure PowerShell 调用脚本，或将此脚本连接到在包生成后进行的主机生成自动化。</p>
<p><strong>警告：</strong>默认情况下，此脚本将始终删除或替换现有部署（如果检测到这些部署）。这对于从没有用户提示的自动化中启用持续集成是必需的。</p>
<p><strong>示例方案 1：</strong> 对服务的过渡环境进行持续部署：</p>
<pre class="prettyprint">PowerShell c:\scripts\windowsazure\PublishCloudService.ps1 –environment Staging -serviceName mycloudservice -storageAccountName mystoragesaccount -packageLocation c:\drops\app.publish\ContactManager.Azure.cspkg -cloudConfigLocation c:\drops\app.publish\ServiceConfiguration.Cloud.cscfg -subscriptionDataFile c:\scripts\default.publishsettings</pre>
<p>通常，此操作后跟测试运行验证和 VIP 交换。VIP 交换可通过 Windows Azure 管理门户或使用 Move-Deployment cmdlet 执行。</p>
<p><strong>示例方案 2：</strong> 对专用测试服务的生产环境进行持续部署</p>
<pre class="prettyprint">PowerShell c:\scripts\windowsazure\PublishCloudService.ps1 –environment Production –enableDeploymentUpgrade 1 -serviceName mycloudservice -storageAccountName mystorageaccount -packageLocation c:\drops\app.publish\ContactManager.Azure.cspkg -cloudConfigLocation c:\drops\app.publish\ServiceConfiguration.Cloud.cscfg -subscriptionDataFile c:\scripts\default.publishsettings</pre>
<p><strong>远程桌面：</strong></p>
<p>如果在 Windows Azure 项目中启用远程桌面，则将需要执行额外的一次性步骤以确保将正确的云服务证书上载到通过此脚本定位的所有云服务中。</p>
<p>查找角色所需的证书指纹值。这些指纹值在云配置文件（即 ServiceConfiguration.Cloud.cscfg）的“证书”部分中可见。此外，在显示选项并查看选定证书时，可在 Visual Studio 的“远程桌面配置”对话框中查看这些指纹值。</p>
<pre class="prettyprint">&lt;Certificates&gt;
      &lt;Certificate name="Microsoft.WindowsAzure.Plugins.RemoteAccess.PasswordEncryption" thumbprint="C33B6C432C25581601B84C80F86EC2809DC224E8" thumbprintAlgorithm="sha1" /&gt;
&lt;/Certificates&gt;</pre>
<p>使用以下 cmdlet 脚本将远程桌面证书作为一次性安装步骤上载：</p>
<pre class="prettyprint">Add-AzureCertificate -serviceName &lt;CLOUDSERVICENAME&gt; -certToDeploy (get-item cert:\CurrentUser\MY\&lt;THUMBPRINT&gt;)</pre>
<p>例如：</p>
<pre class="prettyprint">Add-AzureCertificate -serviceName 'mytestcloudservice' -certToDeploy (get-item cert:\CurrentUser\MY\C33B6C432C25581601B84C80F86EC2809DC224E8</pre>
<p>或者，可以导出带私钥的证书文件 PFX，并使用 Windows Azure 管理门户将证书上载到每个目标云服务。阅读以下文章以了解更多信息：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg443832.aspx">http://msdn.microsoft.com/zh-cn/library/windowsazure/gg443832.aspx</a>。</p>
<p><strong>升级部署与删除部署 -&gt; 新建部署</strong></p>
<p>默认情况下，此脚本将在未传入参数或显式传递值 1 时执行升级部署 ($enableDeploymentUpgrade = 1)。对于单一实例，此部署相对于完整部署的好处是，花费的时间更少。对于需要高可用性的实例，此部署的好处是，在升级一些实例的同时使其他实例保持运行（检查更新域）且不会删除您的 VIP。</p>
<p>可使用脚本 ($enableDeploymentUpgrade = 0) 或将 –enableDeploymentUpgrade 0 作为参数传递（这会将脚本行为更改为首先删除任何现有部署，然后创建新的部署）来禁用升级部署。</p>
<p><strong>警告：</strong>默认情况下，此脚本将始终删除或替换现有部署（如果检测到这些部署）。这对于从没有用户/操作员提示的自动化中启用持续集成是必需的。</p>
</li>
</ol>
<h2><a name="step5"></a> <span class="short-header">使用 TFS 进行发布</span>步骤 5：使用 TFS Team Build 发布包（可选）</h2>
<p>此步骤会将 TFS Team Build 连接到步骤 4 中创建的脚本，这将其处理将包生成发布到 Windows Azure 的过程。这就需要修改生成定义所使用的过程模板，使其在工作流结束时运行 Publish 活动。Publish 活动将执行从生成传入参数的 PowerShell 命令。MSBuild 目标和发布脚本的输出将传送到标准生成输出中。</p>
<ol>
<li>
<p>编辑负责持续部署的生成定义。</p>
</li>
<li>
<p>选择“进程”选项卡。</p>
</li>
<li>
<p>通过单击该选项卡的“过程模板选择”区域中的“新建...”按钮来创建新的过程模板。这将加载“新建生成过程模板”对话框。在此对话框中，请确保选中“复制现有 XAML 文件”，并浏览到要复制的 ProcessTemplate（如果您需要从默认值更改基本值）。为新模板提供一个名称，例如 DefaultTemplateAzure。</p>
</li>
<li>
<p>打开选定的过程模板以进行编辑。可以直接在工作流设计器或 XML 编辑器中打开以处理 XAML。</p>
</li>
<li>
<p>在工作流设计器的参数选项卡中将以下一系列新参数作为单独的行项添加。所有参数应具有 direction=In 和 type=String。这两个值将用于将参数从生成定义流入工作流中，然后用于调用发布脚本。</p>
<pre class="prettyprint">SubscriptionName
StorageAccountName
CloudConfigLocation
PackageLocation
Environment
SubscriptionDataFileLocation
PublishScriptLocation
ServiceName</pre>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/common-task-tfs-03.png"/></p>
<p>相应的 XAML 与下面类似：</p>
<pre class="prettyprint">&lt;Activity  â€¦ /&gt;
  &lt;x:Members&gt;
    &lt;x:Property Name="BuildSettings" Type="InArgument(mtbwa:BuildSettings)" /&gt;
    &lt;x:Property Name="TestSpecs" Type="InArgument(mtbwa:TestSpecList)" /&gt;
    &lt;x:Property Name="BuildNumberFormat" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="CleanWorkspace" Type="InArgument(mtbwa:CleanWorkspaceOption)" /&gt;
    &lt;x:Property Name="RunCodeAnalysis" Type="InArgument(mtbwa:CodeAnalysisOption)" /&gt;
    &lt;x:Property Name="SourceAndSymbolServerSettings" Type="InArgument(mtbwa:SourceAndSymbolServerSettings)" /&gt;
    &lt;x:Property Name="AgentSettings" Type="InArgument(mtbwa:AgentSettings)" /&gt;
    &lt;x:Property Name="AssociateChangesetsAndWorkItems" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="CreateWorkItem" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="DropBuild" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="MSBuildArguments" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="MSBuildPlatform" Type="InArgument(mtbwa:ToolPlatform)" /&gt;
    &lt;x:Property Name="PerformTestImpactAnalysis" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="CreateLabel" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="DisableTests" Type="InArgument(x:Boolean)" /&gt;
    &lt;x:Property Name="GetVersion" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="PrivateDropLocation" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="Verbosity" Type="InArgument(mtbw:BuildVerbosity)" /&gt;
    &lt;x:Property Name="Metadata" Type="mtbw:ProcessParameterMetadataCollection" /&gt;
    &lt;x:Property Name="SupportedReasons" Type="mtbc:BuildReason" /&gt;
    &lt;x:Property Name="SubscriptionName" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="StorageAccountName" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="CloudConfigLocation" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="PackageLocation" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="Environment" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="SubscriptionDataFileLocation" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="PublishScriptLocation" Type="InArgument(x:String)" /&gt;
    &lt;x:Property Name="ServiceName" Type="InArgument(x:String)" /&gt;
  &lt;/x:Members&gt;


  &lt;this:Process.MSBuildArguments&gt;</pre>
</li>
<li>
<p>在“在代理上运行”结束时添加一个新的序列：</p>
<ol>
<li>
<p>首先，通过添加 If 语句活动来检查有效的脚本文件。将条件设置为此值：</p>
<pre class="prettyprint">Not String.IsNullOrEmpty(PublishScriptLocation)</pre>
</li>
<li>
<p>在 If 语句的 Then 事例中，添加一个新的 Sequence 活动。将显示名称设置为“Start publish”</p>
</li>
<li>
<p>在 Start publish 序列仍处于选定状态的情况下，在工作流设计器的变量选项卡中将以下一系列新变量作为单独的行项添加。所有变量应具有 Variable type =String 和 Scope=Start publish。这两个值将用于将参数从生成定义流入工作流中，然后用于调用发布脚本。</p>
<ul>
<li>
<p>String 类型的 SubscriptionDataFilePath</p>
</li>
<li>
<p>String 类型的 PublishScriptFilePath</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/common-task-tfs-04.png"/></p>
</li>
</ul>
</li>
<li>
<p>在新的 Sequence 的开头添加一个 ConvertWorkspaceItem 活动。Direction=ServerToLocal, DisplayName='Convert publish script filename', Input=' PublishScriptLocation', Result='PublishScriptFilePath', Workspace='Workspace'。此活动将发布脚本的路径从 TFS 服务器位置（如果适用）转换为标准本地磁盘路径。</p>
</li>
<li>
<p>在新的 Sequence 的末尾添加另一个 ConvertWorkspaceItem 活动。Direction=ServerToLocal, DisplayName='Convert subscription filename', Input=' SubscriptionDataFileLocation', Result= 'SubscriptionDataFilePath', Workspace='Workspace'。</p>
</li>
<li>
<p>在新的 Sequence 的末尾添加一个 InvokeProcess 活动。此活动使用生成定义传入的参数调用 PowerShell.exe。</p>
<ol>
<li>
<p>Arguments = String.Format(" -File ""{0}"" -serviceName {1} -storageAccountName {2} -packageLocation ""{3}"" -cloudConfigLocation ""{4}"" -subscriptionDataFile ""{5}"" -selectedSubscription {6} -environment ""{7}""", PublishScriptFilePath, ServiceName, StorageAccountName, PackageLocation, CloudConfigLocation, SubscriptionDataFilePath, SubscriptionName, Environment)</p>
</li>
<li>
<p>DisplayName ='Execute publish script'</p>
</li>
<li>
<p>FileName = "PowerShell"</p>
</li>
<li>
<p>OutputEncoding= 'System.Text.Encoding.GetEncoding(System.Globalization.CultureInfo.InstalledUICulture.TextInfo.OEMCodePage)'</p>
</li>
</ol></li>
<li>
<p>在 InvokeProcess 的“处理标准输出”部分文本框中，将文本框值设置为“data”。这是一个用于存储标准输出数据的变量。</p>
</li>
<li>
<p>在标准输出部分的正下方添加一个 WriteBuildMessage 活动。设置 Importance = 'Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High' 和 Message='data'。这可确保脚本的标准输出将写入到生成输出中。</p>
</li>
<li>
<p>在 InvokeProcess 的“处理标准错误”部分文本框中，将文本框值设置为“data”。这是一个用于存储标准错误数据的变量。</p>
</li>
<li>
<p>在标准输出部分的正下方添加一个 WriteBuildError 活动。设置 Message='data'。这可确保脚本的标准错误将写入到生成错误输出中。</p>
</li>
</ol>
<p>发布工作流活动的最终结果将与设计器中的以下内容类似：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/common-task-tfs-05.png"/></p>
<p>发布工作流活动的最终结果将与 XAML 中的以下内容类似：</p>
<pre class="prettyprint">&lt;/TryCatch&gt;
      &lt;If Condition="[Not String.IsNullOrEmpty(PublishScriptLocation)]" sap:VirtualizedContainerService.HintSize="1539,552"&gt;
        &lt;If.Then&gt;
          &lt;Sequence DisplayName="Start publish" sap:VirtualizedContainerService.HintSize="297,446"&gt;
            &lt;Sequence.Variables&gt;
              &lt;Variable x:TypeArguments="x:String" Name="PublishScriptFilePath" /&gt;
              &lt;Variable x:TypeArguments="x:String" Name="SubscriptionDataFilePath" /&gt;
            &lt;/Sequence.Variables&gt;
            &lt;sap:WorkflowViewStateService.ViewState&gt;
              &lt;scg:Dictionary x:TypeArguments="x:String, x:Object"&gt;
                &lt;x:Boolean x:Key="IsExpanded"&gt;True&lt;/x:Boolean&gt;
              &lt;/scg:Dictionary&gt;
            &lt;/sap:WorkflowViewStateService.ViewState&gt;
            &lt;mtbwa:ConvertWorkspaceItem DisplayName="Convert publish script filename" sap:VirtualizedContainerService.HintSize="234,22" Input="[PublishScriptLocation]" Result="[PublishScriptFilePath]" Workspace="[Workspace]" /&gt;
            &lt;mtbwa:ConvertWorkspaceItem DisplayName="Convert subscription data file filename" sap:VirtualizedContainerService.HintSize="234,22" Input="[SubscriptionDataFileLocation]" Result="[SubscriptionDataFilePath]" Workspace="[Workspace]" /&gt;
            &lt;mtbwa:InvokeProcess Arguments="[String.Format(" -File ""{0}"" -serviceName {1} -storageAccountName {2} -packageLocation ""{3}"" -cloudConfigLocation ""{4}"" -subscriptionDataFile ""{5}"" -selectedSubscription {6} -environment ""{7}""", PublishScriptFilePath, ServiceName, StorageAccountName, PackageLocation, CloudConfigLocation, SubscriptionDataFilePath, SubscriptionName, Environment)]" DisplayName="Execute publish script" FileName="PowerShell" sap:VirtualizedContainerService.HintSize="234,198"&gt;
              &lt;mtbwa:InvokeProcess.ErrorDataReceived&gt;
                &lt;ActivityAction x:TypeArguments="x:String"&gt;
                  &lt;ActivityAction.Argument&gt;
                    &lt;DelegateInArgument x:TypeArguments="x:String" Name="data" /&gt;
                  &lt;/ActivityAction.Argument&gt;
                  &lt;mtbwa:WriteBuildError sap:VirtualizedContainerService.HintSize="200,22" Message="[data]" /&gt;
                &lt;/ActivityAction&gt;
              &lt;/mtbwa:InvokeProcess.ErrorDataReceived&gt;
              &lt;mtbwa:InvokeProcess.OutputDataReceived&gt;
                &lt;ActivityAction x:TypeArguments="x:String"&gt;
                  &lt;ActivityAction.Argument&gt;
                    &lt;DelegateInArgument x:TypeArguments="x:String" Name="data" /&gt;
                  &lt;/ActivityAction.Argument&gt;
                  &lt;mtbwa:WriteBuildMessage sap:VirtualizedContainerService.HintSize="200,22" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[data]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /&gt;
                &lt;/ActivityAction&gt;
              &lt;/mtbwa:InvokeProcess.OutputDataReceived&gt;
            &lt;/mtbwa:InvokeProcess&gt;
          &lt;/Sequence&gt;
        &lt;/If.Then&gt;
      &lt;/If&gt;
    &lt;/mtbwa:AgentScope&gt;
    &lt;mtbwa:InvokeForReason DisplayName="Check In Gated Changes for CheckInShelveset Builds" sap:VirtualizedContainerService.HintSize="1370,146" Reason="CheckInShelveset"&gt;
      &lt;mtbwa:CheckInGatedChanges DisplayName="Check In Gated Changes" sap:VirtualizedContainerService.HintSize="200,22" /&gt;
    &lt;/mtbwa:InvokeForReason&gt;
  &lt;/Sequence&gt;
&lt;/Activity&gt;</pre>
</li>
<li>
<p>保存 DefaultTemplateAzure 工作流并签入此文件。</p>
</li>
<li>
<p>在生成定义中选择 DefaultTemplateAzure 过程模板。如果您尚未在过程模板列表中看到此文件，请单击“刷新”或选择“新建”按钮。</p>
</li>
<li>
<p>在“杂项”部分中设置参数属性，如下所示：</p>
<ol>
<li>
<p>CloudConfigLocation = 'c:\drops\app.publish\ServiceConfiguration.Cloud.cscfg'<br /><em>此值派生自：($PublishDir)ServiceConfiguration.Cloud.cscfg</em></p>
</li>
<li>
<p>PackageLocation = 'c:\drops\app.publish\ContactManager.Azure.cspkg'<br /><em>此值派生自：($PublishDir)($ProjectName).cspkg</em></p>
</li>
<li>
<p>PublishScriptLocation = 'c:\scripts\WindowsAzure\PublishCloudService.ps1'</p>
</li>
<li>
<p>ServiceName = 'mycloudservicename'<br /><em>在此处使用适当的云服务名称</em></p>
</li>
<li>
<p>Environment = 'Staging'</p>
</li>
<li>
<p>StorageAccountName = 'mystorageaccountname'<br /><em>在此处使用适当的存储帐户名称</em></p>
</li>
<li>
<p>SubscriptionDataFileLocation = 'c:\scripts\WindowsAzure\Subscription.xml'</p>
</li>
<li>
<p>SubscriptionName = 'default'</p>
</li>
</ol>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/common-task-tfs-06.png"/></p>
</li>
<li>
<p>保存对生成定义所做的更改。</p>
</li>
<li>
<p>对生成进行排队以便同时执行包生成和发布。如果您的触发器设置为“持续部署”，则将在每次签入时执行此行为。</p>
</li>
</ol>
<h3><a name="script"></a>PublishCloudService.ps1 脚本模板</h3>
<pre class="prettyprint">Param(  $serviceName = "",
        $storageAccountName = "",
        $packageLocation = "",
        $cloudConfigLocation = "",
        $environment = "Staging",
        $deploymentLabel = "ContinuousDeploy to $servicename",
        $timeStampFormat = "g",
        $alwaysDeleteExistingDeployments = 1,
        $enableDeploymentUpgrade = 1,
        $selectedsubscription = "default",
        $subscriptionDataFile = ""
     )


function Publish()
{
    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot -ErrorVariable a -ErrorAction silentlycontinue 
    if ($a[0] -ne $null)
    {
        Write-Output "$(Get-Date â€“f $timeStampFormat) - No deployment is detected. Creating a new deployment. "
    }
    #check for existing deployment and then either upgrade, delete + deploy, or cancel according to $alwaysDeleteExistingDeployments and $enableDeploymentUpgrade boolean variables
    if ($deployment.Name -ne $null)
    {
        switch ($alwaysDeleteExistingDeployments)
        {
            1 
            {
                switch ($enableDeploymentUpgrade)
                {
                    1  #Update deployment inplace (usually faster, cheaper, won't destroy VIP)
                    {
                        Write-Output "$(Get-Date â€“f $timeStampFormat) - Deployment exists in $servicename.  Upgrading deployment."
                        UpgradeDeployment
                    }
                    0  #Delete then create new deployment
                    {
                        Write-Output "$(Get-Date â€“f $timeStampFormat) - Deployment exists in $servicename.  Deleting deployment."
                        DeleteDeployment
                        CreateNewDeployment

                    }
                } # switch ($enableDeploymentUpgrade)
            }
            0
            {
                Write-Output "$(Get-Date â€“f $timeStampFormat) - ERROR: Deployment exists in $servicename.  Script execution cancelled."
                exit
            }
        } #switch ($alwaysDeleteExistingDeployments)
    } else {
            CreateNewDeployment
    }
}

function CreateNewDeployment()
{
    write-progress -id 3 -activity "Creating New Deployment" -Status "In progress"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Creating New Deployment: In progress"

    $opstat = New-AzureDeployment -Slot $slot -Package $packageLocation -Configuration $cloudConfigLocation -label $deploymentLabel -ServiceName $serviceName

    $completeDeployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    $completeDeploymentID = $completeDeployment.deploymentid

    write-progress -id 3 -activity "Creating New Deployment" -completed -Status "Complete"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Creating New Deployment: Complete, Deployment ID: $completeDeploymentID"

    StartInstances
}

function UpgradeDeployment()
{
    write-progress -id 3 -activity "Upgrading Deployment" -Status "In progress"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Upgrading Deployment: In progress"

    # perform Update-Deployment
    $setdeployment = Set-AzureDeployment -Upgrade -Slot $slot -Package $packageLocation -Configuration $cloudConfigLocation -label $deploymentLabel -ServiceName $serviceName -Force

    $completeDeployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    $completeDeploymentID = $completeDeployment.deploymentid

    write-progress -id 3 -activity "Upgrading Deployment" -completed -Status "Complete"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Upgrading Deployment: Complete, Deployment ID: $completeDeploymentID"
}

function DeleteDeployment()
{

    write-progress -id 2 -activity "Deleting Deployment" -Status "In progress"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Deleting Deployment: In progress"

    #WARNING - always deletes with force
    $removeDeployment = Remove-AzureDeployment -Slot $slot -ServiceName $serviceName -Force

    write-progress -id 2 -activity "Deleting Deployment: Complete" -completed -Status $removeDeployment
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Deleting Deployment: Complete"

}

function StartInstances()
{
    write-progress -id 4 -activity "Starting Instances" -status "In progress"
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Starting Instances: In progress"

    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    $runstatus = $deployment.Status

    if ($runstatus -ne 'Running') 
    {
        $run = Set-AzureDeployment -Slot $slot -ServiceName $serviceName -Status Running
    }
    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    $oldStatusStr = @("") * $deployment.RoleInstanceList.Count

    while (-not(AllInstancesRunning($deployment.RoleInstanceList)))
    {
        $i = 1
        foreach ($roleInstance in $deployment.RoleInstanceList)
        {
            $instanceName = $roleInstance.InstanceName
            $instanceStatus = $roleInstance.InstanceStatus

            if ($oldStatusStr[$i - 1] -ne $roleInstance.InstanceStatus)
            {
                $oldStatusStr[$i - 1] = $roleInstance.InstanceStatus
                Write-Output "$(Get-Date â€“f $timeStampFormat) - Starting Instance '$instanceName': $instanceStatus"
            }

            write-progress -id (4 + $i) -activity "Starting Instance '$instanceName'" -status "$instanceStatus"
            $i = $i + 1
        }

        sleep -Seconds 1

        $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    }

    $i = 1
    foreach ($roleInstance in $deployment.RoleInstanceList)
    {
        $instanceName = $roleInstance.InstanceName
        $instanceStatus = $roleInstance.InstanceStatus

        if ($oldStatusStr[$i - 1] -ne $roleInstance.InstanceStatus)
        {
            $oldStatusStr[$i - 1] = $roleInstance.InstanceStatus
            Write-Output "$(Get-Date â€“f $timeStampFormat) - Starting Instance '$instanceName': $instanceStatus"
        }

        $i = $i + 1
    }

    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot $slot
    $opstat = $deployment.Status 

    write-progress -id 4 -activity "Starting Instances" -completed -status $opstat
    Write-Output "$(Get-Date â€“f $timeStampFormat) - Starting Instances: $opstat"
}

function AllInstancesRunning($roleInstanceList)
{
    foreach ($roleInstance in $roleInstanceList)
    {
        if ($roleInstance.InstanceStatus -ne "ReadyRole")
        {
            return $false
        }
    }

    return $true
}

#configure powershell with Azure 1.7 modules
Import-Module Azure

#configure powershell with publishsettings for your subscription
$pubsettings = $subscriptionDataFile
Import-AzurePublishSettingsFile $pubsettings
Set-AzureSubscription -CurrentStorageAccount $storageAccountName -SubscriptionName $selectedsubscription

#set remaining environment variables for Azure cmdlets
$subscription = Get-AzureSubscription $selectedsubscription
$subscriptionname = $subscription.subscriptionname
$subscriptionid = $subscription.subscriptionid
$slot = $environment

#main driver - publish &amp; write progress to activity log
Write-Output "$(Get-Date â€“f $timeStampFormat) - Azure Cloud Service deploy script started."
Write-Output "$(Get-Date â€“f $timeStampFormat) - Preparing deployment of $deploymentLabel for $subscriptionname with Subscription ID $subscriptionid."

Publish

$deployment = Get-AzureDeployment -slot $slot -serviceName $servicename
$deploymentUrl = $deployment.Url

Write-Output "$(Get-Date â€“f $timeStampFormat) - Created Cloud Service with URL $deploymentUrl."
Write-Output "$(Get-Date â€“f $timeStampFormat) - Azure Cloud Service deploy script finished."</pre>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>continuous delivery</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>continuous delivery</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>continuous delivery</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>