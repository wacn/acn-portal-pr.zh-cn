<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="18998" parentID="18995" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="3" createDate="2013-07-11T11:15:30" updateDate="2014-08-18T11:17:02" nodeName="Queue Service" urlName="queue-service" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,18995,18998" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/node" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>如何从 Node.js 使用队列服务</h1>
<p>本指南演示如何使用 Windows Azure 队列服务执行常见任务。相关示例是使用 Node.js API 编写的。涉及的任务包括<strong>插入</strong>、<strong>扫视</strong>、<strong>获取</strong>和<strong>删除</strong>队列消息以及<strong>创建和删除队列</strong>。有关队列的详细信息，请参阅<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-is">什么是队列服务？</a></li>
<li><a href="#concepts">概念</a></li>
<li><a href="#create-account">创建 Windows Azure 存储帐户</a></li>
<li><a href="#create-app">创建 Node.js 应用程序</a></li>
<li><a href="#configure-access">配置应用程序以访问存储</a></li>
<li><a href="#setup-connection-string">设置 Windows Azure 存储连接字符串</a></li>
<li><a href="#create-queue">如何：创建队列</a></li>
<li><a href="#insert-message">如何：在队列中插入消息</a></li>
<li><a href="#peek-message">如何：扫视下一条消息</a></li>
<li><a href="#get-message">如何：取消对下一条消息的排队</a></li>
<li><a href="#change-contents">如何：更改已排队消息的内容</a></li>
<li><a href="#advanced-get">如何：用于对消息取消排队的其他方法</a></li>
<li><a href="#get-queue-length">如何：获取队列长度</a></li>
<li><a href="#delete-queue">如何：删除队列</a></li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<h2><a name="what-is"></a>什么是队列服务？</h2>
<p>Windows Azure 队列服务是一项可存储大量消息的服务，用户可以通过经验证的呼叫，使用 HTTP 或 HTTPS 从世界任何地方访问这些消息。一条队列消息的大小可达 64 KB，一个队列中可以包含数百万条消息，而一个存储帐户的总容量限值高达 100 TB。队列服务的常见用途包括：</p>
<ul>
<li><span>创建积压工作以进行异步处理</span></li>
<li>将消息从 Windows Azure Web 角色传递到辅助角色</li>
</ul>
<h2><a name="concepts"></a>概念</h2>
<p>队列服务包含以下组件：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/queue1.png" alt="队列 1"/></p>
<ul>
<li>
<p><strong>URL 格式：</strong> 可使用以下 URL 格式访问队列：<br /> http://storageaccount.queue.core.chinacloudapi.cn/queue</p>
<p>可使用以下 URL 访问示意图中的某个队列：<br /> http://myaccount.queue.core.chinacloudapi.cn/imagesToDownload</p>
</li>
<li>
<p><strong>存储帐户：</strong> 对 Windows Azure 存储服务进行的所有访问都要通过存储帐户完成。存储帐户是访问队列的最高级别的命名空间。一个存储帐户中 blob、表和队列内容的总大小不能超过 100 TB。</p>
</li>
<li>
<p><strong>队列：</strong> 一个队列包含一组消息。所有消息必须位于相应的队列中。</p>
</li>
<li>
<p><strong>消息:</strong> 一条消息（不管采用何种格式）的最大大小为 64 KB。</p>
</li>
</ul>
<h2><a name="create-account"></a>创建 Windows Azure 存储帐户</h2>
<p>若要执行存储操作，您需要一个 Windows Azure 存储帐户。可通过以下步骤创建存储帐户。（也可以<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh264518.aspx">使用 REST API</a> 创建存储帐户。）</p>
<ol>
<li>
<p>登录到 <a href="http://manage.windowsazure.cn">Windows Azure 管理门户</a>。</p>
</li>
<li>
<p>在导航窗格的底部，单击“+新建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/plus-new.png" alt="+新建"/></p>
</li>
<li>
<p>单击“存储帐户”，然后单击“快速创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/quick-storage.png" alt="“快速创建”对话框"/></p>
</li>
<li>
<p>在 URL 中，键入要在存储帐户的 URI 中使用的子域名称。输入的名称可包含 3-24 个小写字母和数字。此值将成为用于对订阅的 Blob、队列或表资源进行寻址的 URI 中的主机名。</p>
</li>
<li>
<p>选择要在其中查找存储的区域/地缘组。如果要使用 Windows Azure 应用程序中的存储，请选择要在其中部署该应用程序的区域。</p>
</li>
<li>
<p>单击“创建存储帐户”。</p>
</li>
</ol>
<h2><a name="create-app"></a>创建 Node.js 应用程序</h2>
<p>创建空白 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅<a href="/zh-cn/develop/nodejs/tutorials/create-a-website-(mac)/">创建 Node.js 应用程序并将其部署到 Windows Azure 网站</a>、<a href="{localLink:2221}" title="使用 Express 构建 Web 应用程序">Node.js 云服务</a>（使用 Windows PowerShell）或<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-webmatrix/">使用 WebMatrix 构建网站</a>。</p>
<h2><a name="configure-access"></a>配置应用程序以访问存储</h2>
<p>要使用 Windows Azure 存储，您需要下载和使用 Node.js azure 包，其中包括一组便于与存储 REST 服务进行通信的库。</p>
<h3>使用 Node 包管理器 (NPM) 可获取该程序包</h3>
<ol>
<li>
<p>使用 <strong>PowerShell</strong> (Windows)、<strong>Terminal</strong> (Mac) 或 <strong>Bash</strong> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。</p>
</li>
<li>
<p>在命令窗口中键入 <strong>npm install azure</strong>，这应该产生以下输出：</p>
<pre class="prettyprint">azure@0.6.0 ./node_modules/azure
â”œâ”€â”€ easy-table@0.0.1
â”œâ”€â”€ dateformat@1.0.2-1.2.3
â”œâ”€â”€ xmlbuilder@0.3.1
â”œâ”€â”€ eyes@0.1.7
â”œâ”€â”€ colors@0.6.0-1
â”œâ”€â”€ mime@1.2.5
â”œâ”€â”€ log@1.3.0
â”œâ”€â”€ commander@0.6.1
â”œâ”€â”€ node-uuid@1.2.0
â”œâ”€â”€ xml2js@0.1.14
â”œâ”€â”€ async@0.1.22
â”œâ”€â”€ tunnel@0.0.1
â”œâ”€â”€ underscore@1.3.3
â”œâ”€â”€ qs@0.5.0
â”œâ”€â”€ underscore.string@2.2.0rc
â”œâ”€â”€ sax@0.4.0
â”œâ”€â”€ streamline@0.2.4
â””â”€â”€ winston@0.6.1 (cycle@1.0.0, stack-trace@0.0.6, pkginfo@0.2.3, request@2.9.202)</pre>
</li>
<li>
<p>可以手动运行 <strong>ls</strong> 命令来验证是否创建了 <strong>node_modules</strong> 文件夹。在该文件夹中，您将找到 <strong>azure</strong> 包，其中包含访问存储所需的库。</p>
</li>
</ol>
<h3>导入包</h3>
<p>使用记事本或其他文本编辑器将以下内容添加到您要在其中使用存储的应用程序的 <strong>server.js</strong> 文件的顶部：</p>
<pre class="prettyprint">var azure = require('azure');</pre>
<h2><a name="setup-connection-string"></a>设置 Windows Azure 存储连接</h2>
<p>azure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 以获取连接到您的 Windows Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 <strong>createQueueService</strong> 时必须指定帐户信息。</p>
<p>有关在 Windows Azure 云服务的配置文件中设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-app-with-storage/">使用存储构建 Node.js 云服务</a>。</p>
<p>有关在管理门户中为 Windows Azure 网站设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-storage/">使用存储构建 Node.js Web 应用程序</a></p>
<h2><a name="create-queue"></a>如何：创建队列</h2>
<p>以下代码将创建使您能够使用队列的 <strong>QueueService</strong> 对象。</p>
<pre class="prettyprint">var queueService = azure.createQueueService();</pre>
<p>使用 <strong>createQueueIfNotExists</strong> 方法，该方法将返回指定队列（如果它存在），或创建具有指定名称的新队列（如果它尚不存在）。</p>
<pre class="prettyprint">queueService.createQueueIfNotExists(queueName, function(error){
    if(!error){
        // Queue exists
    }
});</pre>
<h2><a name="insert-message"></a>如何：在队列中插入消息</h2>
<p>若要在队列中插入消息，可使用 <strong>createMessage</strong> 方法创建一条新消息并将其添加到队列中。</p>
<pre class="prettyprint">queueService.createMessage(queueName, "Hello world!", function(error){
    if(!error){
        // Message inserted
    }
});</pre>
<h2><a name="peek-message"></a>如何：扫视下一条消息</h2>
<p>通过调用 <strong>peekMessages</strong> 方法，您可以扫视队列前面的消息，而不会从队列中删除它。默认情况下，<strong>peekMessages</strong> 扫视单个消息。</p>
<pre class="prettyprint">queueService.peekMessages(queueName, function(error, messages){
    if(!error){
        // Messages peeked
        // Text is available in messages[0].messagetext
    }
});</pre>
<div class="dev-callout">注意
<p>在队列中没有消息时使用 <strong>peekMessage</strong> 不会返回错误，但也不会返回消息。</p>
</div>
<h2><a name="get-message"></a>如何：取消对下一条消息的排队</h2>
<p>您的代码分两步从队列中删除消息。在调用 <strong>getMessages</strong> 时，默认情况下您会获得队列中的下一条消息。对于从此队列读取消息的任何其他代码，从 <strong>getMessages</strong> 返回的消息将变得不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，您还必须调用 <strong>deleteMessage</strong>。此删除消息的两步过程确保在您的代码因硬件或软件故障而无法处理消息时，代码的另一个实例可以获取相同消息并重试。您的代码在处理消息后会立即调用 <strong>deleteMessage</strong>。</p>
<pre class="prettyprint">queueService.getMessages(queueName, function(error, messages){
    if(!error){
        // Process the message in less than 30 seconds, the message
        // text is available in messages[0].messagetext 
        var message = messages[0]
        queueService.deleteMessage(queueName
            , message.messageid
            , message.popreceipt
            , function(error){
                if(!error){
                    // Message deleted
                }
            });
    }
});</pre>
<div class="dev-callout">注意
<p>在队列中没有消息时使用 getMessages 不会返回错误，但也不会返回消息。</p>
</div>
<h2><a name="change-contents"></a>如何：更改已排队消息的内容</h2>
<p>您可以更改队列中现有消息的内容。如果消息表示工作任务，则可以使用此功能来更新该工作任务的状态。以下代码使用 <strong>updateMessage</strong> 方法来更新消息。</p>
<pre class="prettyprint">queueService.getMessages(queueName, function(error, messages){
    if(!error){
        // Got the message
        var message = messages[0];
        queueService.updateMessage(queueName
            , message.messageid
            , message.popreceipt
            , 10
            , { messagetext: 'in your message, doing stuff.' }
            , function(error){
                if(!error){
                    // Message updated successfully
                }
            });
    }
});</pre>
<h2><a name="advanced-get"></a>如何：用于对消息取消排队的其他方法</h2>
<p>您可以采用两种方法来自定义从队列中检索消息的过程。首先，您可以获取一批消息（最多 32 条）。其次，您可以设置更长或更短的不可见超时时间，从而允许您的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <strong>getMessages</strong> 方法在一次调用中获取 15 条消息。然后，使用 for 循环来处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。</p>
<pre class="prettyprint">queueService.getMessages(queueName
    , {numofmessages: 15, visibilitytimeout: 5 * 60}
    , function(error, messages){
    if(!error){
        // Messages retreived
        for(var index in messages){
            // text is available in messages[index].messagetext
            var message = messages[index];
            queueService.deleteMessage(queueName
                , message.messageid
                , message.popreceipt
                , function(error){
                    if(!error){
                        // Message deleted
                    }
                });
        }
    }
});</pre>
<h2><a name="get-queue-length"></a>如何：获取队列长度</h2>
<p>您可以获得队列中消息的估计数。<strong>getQueueMetadata</strong> 方法可要求队列服务返回有关队列的元数据，而响应的 <strong>approximatemessagecount</strong> 属性包含队列中的消息计数。此计数只是近似值，因为在队列服务响应您的请求之后，可能添加或删除了消息。</p>
<pre class="prettyprint">queueService.getQueueMetadata(queueName, function(error, queueInfo){
    if(!error){
        // Queue length is available in queueInfo.approximatemessagecount
    }
});</pre>
<h2><a name="delete-queue"></a>如何：删除队列</h2>
<p>若要删除队列及其中包含的所有消息，请对队列对象调用 <strong>deleteQueue</strong> 方法。</p>
<pre class="prettyprint">queueService.deleteQueue(queueName, function(error){
    if(!error){
        // Queue has been deleted
    }
});</pre>
<h2><a name="next-steps"></a>后续步骤</h2>
<p>现在，您已了解有关队列存储的基础知识，单击下面的链接可了解如何执行更复杂的存储任务。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433040.aspx">在 Windows Azure 中存储和访问数据</a>。</li>
<li>访问 <a href="http://blogs.msdn.com/b/windowsazurestorage/">Windows Azure 存储团队博客</a>。</li>
<li>访问 GitHub 上的 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Azure SDK for Node</a> 存储库。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>如何使用队列服务 (Node.js) - Windows Azure</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>dev-nodejs-how-to-service-bus-queues</linkid><metaKeywords>Windows Azure 队列服务, 获取消息 Node.js</metaKeywords><metaDescription><![CDATA[了解如何使用 Windows Azure 队列服务创建和删除队列，以及插入、获取和删除消息。相关示例是使用 Node.js 编写的。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>队列服务</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>