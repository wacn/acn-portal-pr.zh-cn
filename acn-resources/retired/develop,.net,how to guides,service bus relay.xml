<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18827" parentID="18423" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="19" createDate="2013-07-11T10:42:46" updateDate="2014-08-18T11:09:25" nodeName="service bus relay" urlName="service-bus-relay" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18423,18827" isDoc=""><bodyText><![CDATA[<div><!--?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>如何使用 Service Bus 中继服务</h1>
<p>本指南将演示如何使用 Service Bus 中继服务。相关示例用 C# 编写并使用 Service Bus 程序集中包含的 Windows Communication Foundation API 及扩展，Service Bus 程序集是 Windows Azure .NET 库的一部分。有关 Service Bus 中继的详细信息，请参阅<a href="#next_steps">后续步骤</a>一节。</p>
<h2><span class="short-header">什么是 Service Bus 中继 </span></h2>
<p>Service Bus <strong>中继</strong>服务使您能构建可在 Windows Azure 数据中心和您自己的本地企业环境中运行的<strong>混合应用程序</strong>。Service Bus 中继可简化这一过程，它允许您安全地向公有云公开位于企业网络内的 Windows Communication Foundation (WCF) 服务，而无需打开防火墙连接，也无需对企业网络基础结构进行彻底的更改。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-relay-01.png" alt="中继概念"/></p>
<p>Service Bus 中继使您能够在现有企业环境中托管 WCF 服务。然后，您可以将侦听传入会话和请求这些 WCF 服务的任务委托给在 Windows Azure 内运行的 Service Bus。这使您能够向 Windows Azure 中运行的应用程序代码或者向移动工作者或 Extranet 合作伙伴环境公开这些服务。Service Bus 允许您精确、安全地控制谁可以访问这些服务。它提供了一种强大且安全的方式，从您的现有企业解决方案公开应用程序功能和数据并从云中利用这些功能和数据。</p>
<p>本指南演示如何使用 Service Bus 中继创建 WCF Web 服务，并使用 TCP 通道绑定（可实现双方之间安全的对话）公开该服务。</p>
<h2><span class="short-header">创建服务命名空间 </span></h2>
<p>若要开始在 Windows Azure 中使用 Service Bus 中继，必须先创建一个服务命名空间。服务命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。</p>
<p>创建服务命名空间：</p>
<ol>
<li>
<p>登录到 <a href="http://manage.windowsazure.cn">Windows Azure 管理门户</a>。</p>
</li>
<li>
<p>在该管理门户的左侧导航窗格中，单击“Service Bus”。</p>
</li>
<li>
<p>在管理门户的下方窗格中，单击“创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-13.png"/></p>
</li>
<li>
<p>在“添加新命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-04.png"/></p>
</li>
<li>
<p>在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。</p>
<p>重要说明：选取要部署应用程序的<strong>相同区域</strong>。这将为您提供最佳性能。</p>
</li>
<li>
<p>单击复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户设置资源。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/getting-started-multi-tier-27.png"/></p>
</li>
</ol>
<p>您创建的命名空间随后将显示在管理门户中，然后要花费一段时间来激活。请等到状态变为“活动”后再继续。</p>
<h2>获取命名空间的默认管理凭据</h2>
<p>若要在新命名空间上执行管理操作（如创建中继连接），您必须获取该命名空间的管理凭据。</p>
<ol>
<li>
<p>在左侧导航窗格中，单击“Service Bus”节点以显示可用命名空间的列表：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-13.png"/></p>
</li>
<li>
<p>从显示的列表中选择刚刚创建的命名空间：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-09.png"/></p>
</li>
<li>
<p>单击“访问密钥”。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-06.png"/></p>
</li>
<li>
<p>在“连接到您的命名空间”对话框中，找到“默认颁发者”和“默认密钥”条目。记下这些值，因为您将在下面使用此信息来对命名空间执行操作。</p>
</li>
</ol>
<h2>获取 Service Bus NuGet 包</h2>
<p>Service Bus <strong>NuGet</strong> 包是获取 Service Bus API 和使用所有 Service Bus 依赖项配置应用程序的最简单的方法。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Web Developer 中安装和更新库和工具。Service Bus NuGet 包是获取 Service Bus API 和使用所有 Service Bus 依赖项配置应用程序的最简单的方法。</p>
<p>要在您的应用程序中安装 NuGet 包，请执行以下操作：</p>
<ol>
<li>在“解决方案资源管理器”中，右键单击“引用”，然后单击“管理 NuGet 包”。</li>
<li>
<p>搜索“WindowsAzure”，然后选择“Windows Azure Service Bus”项。单击“安装”以完成安装，然后关闭此对话框。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/getting-started-multi-tier-13.png"/></p>
</li>
</ol>
<h2>如何使用 Service Bus 通过 TCP 公开和使用 SOAP Web 服务</h2>
<p>要公开现有 WCF SOAP Web 服务以供外部使用，您必须更改服务绑定和地址。这可能需要更改您的配置文件或者可能需要更改代码，具体取决于您如何设置和配置 WCF 服务。请注意，WCF 允许您对同一服务使用多个网络终结点，因此您可以在添加 Service Bus 终结点以便进行外部访问的同时保留现有内部终结点。</p>
<p>在此任务中，您将构建一个简单的 WCF 服务并向其添加 Service Bus 侦听程序。此练习假定您熟悉 Visual Studio 2012，因此不演练创建项目的所有详细信息，而是侧重于代码。</p>
<p>在开始下面的步骤之前，请完成以下过程以设置您的环境：</p>
<ol>
<li>在 Visual Studio 中，在解决方案内创建一个包含以下两个项目的控制台应用程序：“客户端”和“服务”。</li>
<li>将这两个项目的目标框架均设置为 .NET Framework 4。</li>
<li>向这两个项目添加 <strong>Windows Azure Service Bus NuGet</strong> 包。这会向您的项目添加所有必需的程序集引用。</li>
</ol>
<h3>如何创建该服务</h3>
<p>首先，创建该服务本身。任何 WCF 服务都包含至少三个不同部分：</p>
<ul>
<li>描述交换哪些信息以及将调用哪些操作的协定的定义。</li>
<li>上述协定的实施方案。</li>
<li>托管该服务并公开多个终结点的主机。</li>
</ul>
<p>本节中的代码示例涵盖了其中每个部分。</p>
<p>协定定义用于添加两个数字并返回相应结果的单个操作 <strong>AddNumbers</strong>。<strong>IProblemSolverChannel</strong> 接口使客户端能够更轻松地管理代理生存期。创建这样一个接口被认为是最佳实践。最好将此协定定义放入单独的文件中，以便可从您的“客户端”和“服务”两个项目中引用该文件，但也可以将代码复制到这两个项目中：</p>
<pre class="prettyprint">using System.ServiceModel;

    [ServiceContract(Namespace = "urn:ps")]
    interface IProblemSolver
    {
        [OperationContract]
        int AddNumbers(int a, int b);
    }

    interface IProblemSolverChannel : IProblemSolver, IClientChannel {}</pre>
<p>协定到位后，实施起来就很简单了：</p>
<pre class="prettyprint">class ProblemSolver : IProblemSolver
    {
        public int AddNumbers(int a, int b)
        {
            return a + b;
        }
    }</pre>
<p><strong>如何以编程方式配置服务主机</strong></p>
<p>协定和实施完成后，您现在就可以托管服务了。托管发生在 <strong>System.ServiceModel.ServiceHost</strong> 对象内，该对象负责管理服务实例并托管侦听消息的终结点。下面的代码使用常规的本地终结点和 Service Bus 终结点来配置服务，以便并列展示内部和外部终结点的外观。将字符串“**namespace**”替换为您的命名空间名称，并将“**key**”替换为您在上面的设置步骤中获取的颁发者密钥。</p>
<pre class="prettyprint">ServiceHost sh = new ServiceHost(typeof(ProblemSolver));

sh.AddServiceEndpoint(
   typeof (IProblemSolver), new NetTcpBinding(), 
   "net.tcp://localhost:9358/solver");

sh.AddServiceEndpoint(
   typeof(IProblemSolver), new NetTcpRelayBinding(), 
   ServiceBusEnvironment.CreateServiceUri("sb", "**namespace**", "solver"))
    .Behaviors.Add(new TransportClientEndpointBehavior {
          TokenProvider = TokenProvider.CreateSharedSecretTokenProvider( "owner", "**key**")});

sh.Open();

Console.WriteLine("Press ENTER to close");
Console.ReadLine();

sh.Close();</pre>
<p>在本示例中，您将创建两个位于同一协定实施中的终结点。一个是本地的，一个通过 Service Bus 进行投影。两者之间的主要区别是绑定；本地终结点使用 <strong>NetTcpBinding</strong>，而 Service Bus 终结点和地址使用 <strong>NetTcpRelayBinding</strong>。本地终结点有一个使用不同端口的本地网络地址。Service Bus 终结点有一个由字符串“sb”、您的命名空间名称、路径“solver”组成的终结点地址。这将生成 URI“sb://[serviceNamespace].servicebus.chinacloudapi.cn/solver”，将服务终结点标识为具有完全限定的外部 DNS 名称的 Service Bus TCP 终结点。如果将替换上述占位符的代码放入“服务”应用程序的 <strong>Main</strong> 函数中，您将会获得一个可正常运行的服务。如果您希望您的服务专门侦听 Service Bus，请删除本地终结点声明。</p>
<p><strong>如何在 App.config 文件中配置服务主机</strong></p>
<p>您还可以使用 App.config 文件配置主机。在此情况下，服务托管代码如下所示：</p>
<pre class="prettyprint">ServiceHost sh = new ServiceHost(typeof(ProblemSolver));
sh.Open();
Console.WriteLine("Press ENTER to close");
Console.ReadLine();
sh.Close();</pre>
<p>终结点定义将移到 App.config 文件中。请注意，<strong>NuGet</strong> 包已向 App.config 文件添加一系列定义，这些定义是 Service Bus 必需的配置扩展。以下代码段（与上面列出的代码完全等效）应该直接显示在 <strong>system.serviceModel</strong> 元素下。这段代码假定您的项目 C# 命名空间名为“Service”。将占位符替换为您的 Service Bus 服务命名空间和密钥。</p>
<pre class="prettyprint">&lt;services&gt;
    &lt;service name="Service.ProblemSolver"&gt;
        &lt;endpoint contract="Service.IProblemSolver"
                  binding="netTcpBinding"
                  address="net.tcp://localhost:9358/solver"/&gt;
        &lt;endpoint contract="Service.IProblemSolver"
                  binding="netTcpRelayBinding"
                  address="sb://**namespace**.servicebus.chinacloudapi.cn/solver"
                  behaviorConfiguration="sbTokenProvider"/&gt;
    &lt;/service&gt;
&lt;/services&gt;
&lt;behaviors&gt;
    &lt;endpointBehaviors&gt;
        &lt;behavior name="sbTokenProvider"&gt;
            &lt;transportClientEndpointBehavior&gt;
                &lt;tokenProvider&gt;
                    &lt;sharedSecret issuerName="owner" issuerSecret="**key**" /&gt;
                &lt;/tokenProvider&gt;
            &lt;/transportClientEndpointBehavior&gt;
        &lt;/behavior&gt;
    &lt;/endpointBehaviors&gt;
&lt;/behaviors&gt;</pre>
<p>进行这些更改后，该服务将像以前一样启动，但具有两个活动终结点：一个本地的，一个在云中进行侦听。</p>
<h3>如何创建客户端</h3>
<p><strong>如何以编程方式配置客户端</strong></p>
<p>若要使用该服务，您可以使用 <strong>ChannelFactory</strong> 对象构造 WCF 客户端。Service Bus 使用通过 Access Control 服务 (ACS) 实现的基于声明的安全模型。<strong>TokenProvider</strong> 类代表具有内置工厂方法的安全令牌提供程序，这些方法可返回一些众所周知的令牌提供程序。下面的示例使用 <strong>SharedSecretTokenProvider</strong> 保存共享机密凭据并从 Access Control服务获取相应令牌。名称和密钥是根据上一节所述从门户获取的凭据。</p>
<p>首先，在您的客户端项目中引用服务中的 <strong>IProblemSolver</strong> 协定代码或将其复制到您的客户端项目中。</p>
<p>然后，替换客户端的 <strong>Main</strong> 方法中的代码，再次将占位符文本替换为您的 Service Bus 服务命名空间和密钥：</p>
<pre class="prettyprint">var cf = new ChannelFactory&lt;IProblemSolverChannel&gt;(
    new NetTcpRelayBinding(), 
    new EndpointAddress(ServiceBusEnvironment.CreateServiceUri("sb", "**namespace**", "solver")));

cf.Endpoint.Behaviors.Add(new TransportClientEndpointBehavior
            { TokenProvider = TokenProvider.CreateSharedSecretTokenProvider("owner","**key**") });

using (var ch = cf.CreateChannel())
{
    Console.WriteLine(ch.AddNumbers(4, 5));
}</pre>
<p>现在您可以编译客户端和服务，运行它们（首先运行服务），客户端将调用该服务并输出“9”。您可以在不同计算机上，甚至跨网络运行客户端和服务器，通信仍将进行。客户端代码还可以在云中或在本地运行。</p>
<p><strong>如何在 App.config 文件中配置客户端</strong></p>
<p>您还可以使用 App.config 文件配置客户端。使用这种方法的客户端代码如下所示：</p>
<pre class="prettyprint">var cf = new ChannelFactory&lt;IProblemSolverChannel&gt;("solver");
using (var ch = cf.CreateChannel())
{
    Console.WriteLine(ch.AddNumbers(4, 5));
}</pre>
<p>终结点定义将移到 App.config 文件中。以下代码段（与上面列出的代码相同）应该直接显示在 <strong>system.serviceModel</strong> 元素下。在此，与之前一样，您必须将占位符替换为您的 Service Bus 服务命名空间和密钥。</p>
<pre class="prettyprint">&lt;client&gt;
    &lt;endpoint name="solver" contract="Service.IProblemSolver"
              binding="netTcpRelayBinding"
              address="sb://**namespace**.servicebus.chinacloudapi.cn/solver"
              behaviorConfiguration="sbTokenProvider"/&gt;
&lt;/client&gt;
&lt;behaviors&gt;
    &lt;endpointBehaviors&gt;
        &lt;behavior name="sbTokenProvider"&gt;
            &lt;transportClientEndpointBehavior&gt;
                &lt;tokenProvider&gt;
                    &lt;sharedSecret issuerName="owner" issuerSecret="**key**" /&gt;
                &lt;/tokenProvider&gt;
            &lt;/transportClientEndpointBehavior&gt;
        &lt;/behavior&gt;
    &lt;/endpointBehaviors&gt;
&lt;/behaviors&gt;</pre>
<h2><span class="short-header">后续步骤 </span></h2>
<p>此时，您已了解 Service Bus <strong>中继</strong>服务的基础知识，请访问以下链接以了解更多信息。</p>
<ul>
<li>构建服务：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee173564.aspx">为 Service Bus 构建服务</a>。</li>
<li>构建客户端：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee173543.aspx">构建 Service Bus 客户端应用程序</a>。</li>
<li>Service Bus 示例：从 <a href="http://code.msdn.microsoft.com/windowsazure">Windows Azure 示例</a>下载。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>service bus relay</pageTitle><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><linkid>service bus relay</linkid><urlDisplayName>service bus relay</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>