<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19089" parentID="19076" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="13" createDate="2013-07-11T11:29:14" updateDate="2014-08-18T11:20:03" nodeName="Service Management" urlName="service-management" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17389,19076,19089" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/php" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<div>
<h1>如何通过 PHP 使用服务管理</h1>
<p>本指南将演示如何通过 PHP 以编程方式执行常见服务管理任务。<a href="http://www.windowsazure.cn/zh-cn/develop/php/common-tasks/download-php-sdk/">Widows Azure SDK for PHP</a> 中的 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/ServiceManagementRestProxy.php">ServiceManagementRestProxy</a> 类支持以编程方式访问<a href="https://manage.windowsazure.cn/">管理门户</a>中提供的很多与服务管理相关的功能（如<strong>创建、更新和删除云服务、部署、存储服务和地缘组</strong>）。此功能可用于构建需要以编程方式访问服务管理的应用程序。</p>
<h2>目录</h2>
<ul>
<li><a href="#WhatIs">什么是服务管理</a></li>
<li><a href="#Concepts">概念</a></li>
<li><a href="#CreateApplication">创建 PHP 应用程序</a></li>
<li><a href="#GetClientLibraries">获取 Windows Azure 客户端库</a></li>
<li><a href="#Connect">如何：连接到服务管理</a></li>
<li><a href="#ListAvailableLocations">如何：列出可用位置</a></li>
<li><a href="#CreateCloudService">如何：创建云服务</a></li>
<li><a href="#DeleteCloudService">如何：删除云服务</a></li>
<li><a href="#CreateDeployment">如何：创建部署</a></li>
<li><a href="#UpdateDeployment">如何：更新部署</a></li>
<li><a href="#MoveDeployments">如何：在过渡环境和生产环境之间移动部署</a></li>
<li><a href="#DeleteDeployment">如何：删除部署</a></li>
<li><a href="#CreateStorageService">如何：创建存储服务</a></li>
<li><a href="#DeleteStorageService">如何：删除存储服务</a></li>
<li><a href="#CreateAffinityGroup">如何：创建地缘组</a></li>
<li><a href="#DeleteAffinityGroup">如何：删除地缘组</a></li>
</ul>
<h2 id="WhatIs">什么是服务管理</h2>
<p>利用服务管理 API，可以以编程方式访问通过<a href="https://manage.windowsazure.cn/">管理门户</a>提供的很多服务管理功能。您可以通过 Windows Azure SDK for PHP 管理云服务、存储帐户和地缘组。</p>
<p>若要使用服务管理 API，您将需要<a href="http://www.windowsazure.cn/zh-cn/pricing/free-trial/">创建 Windows Azure 帐户</a>。</p>
<h2 id="Concepts">概念</h2>
<p>Windows Azure SDK for PHP 将包装 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460799.aspx">Windows Azure 服务管理 API</a>，后者是 REST API。所有 API 操作都是通过 SSL 执行的，并且使用 X.509 v3 证书互相进行身份验证。可以从在 Windows Azure 中运行的服务访问管理服务，或直接通过 Internet 从可发送 HTTPS 请求和接收 HTTPS 响应的任何应用程序访问管理服务。</p>
<h2 id="CreateApplication">创建 PHP 应用程序</h2>
<p>创建使用 Windows Azure 服务管理的 PHP 应用程序的唯一要求是从代码中引用 Windows Azure SDK for PHP 中的类。您可以使用任何开发工具来创建应用程序，包括记事本。</p>
<p>在本指南中，您将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或在 Windows Azure 的 Web 角色、辅助角色或网站中运行的代码中调用。</p>
<h2 id="GetClientLibraries">获取 Windows Azure 客户端库</h2>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="get-client-libraries" macroAlias="AzureChunkDisplayer" ?-->
<h2 id="Connect">如何：连接到服务管理</h2>
<p>若要连接到服务管理终结点，您需要 Windows Azure 订阅 ID 和有效管理证书的路径。您可以通过<a href="https://manage.windowsazure.cn/">管理门户</a>获取订阅 ID，并且可以采用多种方式创建管理证书。本指南中将使用 <a href="http://www.openssl.org/">OpenSSL</a>，您可以<a href="http://www.openssl.org/related/binaries.html">下载 Windows 版本的 OpenSSL</a> 并在控制台中运行它。</p>
<p>您实际上需要创建两个证书，一个用于服务器（<code>.cer</code> 文件），一个用于客户端（<code>.pem</code> 文件）。若要创建 <code>.pem</code> 文件，请执行以下代码：</p>
<pre class="prettyprint">`openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem`</pre>
<p>若要创建 <code>.cer</code> 证书，请执行以下代码：</p>
<pre class="prettyprint">`openssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer`</pre>
<p>有关 Windows Azure 证书的详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg981935.aspx">Windows Azure 中的证书概述</a>。有关 OpenSSL 参数的完整说明，请参阅 <a href="http://www.openssl.org/docs/apps/openssl.html">http://www.openssl.org/docs/apps/openssl.html</a> 上的文档。</p>
<p>如果已使用 <a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/command-line-tools/">Windows Azure 命令行工具</a>下载和导入发布设置文件（<a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/command-line-tools/#Account">在此处</a>查看详细信息），则可以使用这些工具创建的 <code>.pem</code> 文件（而不是您自己的 .pem 文件）。这些工具为您创建了一个 <code>.cer</code> 并将其上载到 Windows Azure，然后将相应的 <code>.pem</code> 文件放在计算机上的 <code>.azure</code> 目录中（在您的用户目录中）。</p>
<p>创建这些文件之后，您将需要通过<a href="https://manage.windowsazure.cn/">管理门户</a>将 <code>.cer</code> 文件上载到 Windows Azure，并且您将需要记下 <code>.pem</code> 文件的保存位置。</p>
<p>获取订阅 ID，创建证书并将 <code>.cer</code> 文件上载到 Windows Azure 之后，您可以通过创建连接字符串并将其传递到对 <strong>ServicesBuilder</strong> 类调用的 <strong>createServiceManagementService</strong> 方法来连接到 Windows Azure 管理终结点：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;

$conn_string = "SubscriptionID=&lt;your_subscription_id&gt;;CertificatePath=&lt;path_to_.pem_certificate&gt;";

$serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);</pre>
<p>在上面的示例中，<code>$serviceManagementRestProxy</code> 是一个 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/ServiceManagementRestProxy.php">ServiceManagementRestProxy</a> 对象。<strong>ServiceManagementRestProxy</strong> 类是用于管理 Windows Azure 服务的主类。</p>
<h2 id="ListAvailableLocations">如何：列出可用位置</h2>
<p>若要列出可用于承载服务的位置，请使用 <strong>ServiceManagementRestProxy-&gt;listLocations</strong> 方法：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\Common\ServiceException;

try{
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $serviceManagementRestProxy-&gt;listLocations();

    $locations = $result-&gt;getLocations();

    foreach($locations as $location){
          echo $location-&gt;getName()."&lt;br /&gt;";
    }
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>在创建云服务、存储服务或地缘组时，您将需要提供有效位置。<strong>listLocations</strong> 方法将始终返回当前可用位置的最新列表。截止到本文撰写时为止，可用位置为：</p>
<ul>
<li>美国任意地区</li>
<li>欧洲任意地区</li>
<li>欧洲西部</li>
<li>亚洲任意地区</li>
<li>亚洲东南部</li>
<li>亚洲东部</li>
<li>美国中北部</li>
<li>欧洲北部</li>
<li>美国中南部</li>
<li>美国西部</li>
<li>美国东部</li>
</ul>
<div class="dev-callout">注意
<p>在下面的代码示例中，位置将作为字符串传递到方法。但是，您还可以使用 <code>WindowsAzure\ServiceManagement\Models\Locations</code> 类将位置作为枚举传递。例如，您可以将 <code>Locations::WEST_US</code> 传递到接受位置的方法，而不是传递“美国西部”。</p>
</div>
<h2 id="CreateCloudService">如何：创建云服务</h2>
<p>当您在 Windows Azure 中创建应用程序并运行它时，相关代码和配置统称为 Windows Azure <a href="http://www.windowsazure.cn/zh-cn/manage/services/cloud-services/what-is-a-cloud-service/">云服务</a>（在早期版本的 Windows Azure 中称为<em>托管服务</em>）。利用 <strong>createHostedServices</strong> 方法，您可以通过提供托管服务名称（在 Windows Azure 中必须是唯一的）、标签（base 64 编码托管服务名称）和 <strong>CreateServiceOptions</strong> 对象来创建新的托管服务。利用 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/CreateServiceOptions.php">CreateServiceOptions</a> 对象，您可以设置位置<em>或</em> 服务的地缘组。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\CreateServiceOptions;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $name = "myhostedservice";
    $label = base64_encode($name);
    $options = new CreateServiceOptions();
    $options-&gt;setLocation('West US');
    // Instead of setLocation, you can use setAffinityGroup
    // to set an affinity group.

    $result = $serviceManagementRestProxy-&gt;createHostedService($name, $label, $options);
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>您可以使用 <strong>listHostedServices</strong> 方法列出您的订阅的所有托管方法，该方法将返回 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/GetDeploymentOptions.php">ListHostedServicesResult</a> 对象。调用 <strong>getHostedServices</strong> 方法后，您就可以循环访问一系列 [HostedServices] 对象和检索服务属性：</p>
<pre class="prettyprint">$listHostedServicesResult = $serviceManagementRestProxy-&gt;listHostedServices();

$hosted_services = $listHostedServicesResult-&gt;getHostedServices();

foreach($hosted_services as $hosted_service){
    echo "Service name: ".$hosted_service-&gt;getName()."&lt;br /&gt;";
    echo "Management URL: ".$hosted_service-&gt;getUrl()."&lt;br /&gt;";
    echo "Affinity group: ".$hosted_service-&gt;getAffinityGroup()."&lt;br /&gt;";
    echo "Location: ".$hosted_service-&gt;getLocation()."&lt;br /&gt;";
    echo "------&lt;br /&gt;";
    }</pre>
<p>如果您希望获得有关特定托管服务的信息，可以通过将该托管服务的名称传递到 <strong>getHostedServiceProperties</strong> 方法来实现：</p>
<pre class="prettyprint">$getHostedServicePropertiesResult = $serviceManagementRestProxy-&gt;getHostedServiceProperties("myhostedservice");

$hosted_service = $getHostedServicePropertiesResult-&gt;getHostedService();

echo "Service name: ".$hosted_service-&gt;getName()."&lt;br /&gt;";
echo "Management URL: ".$hosted_service-&gt;getUrl()."&lt;br /&gt;";
echo "Affinity group: ".$hosted_service-&gt;getAffinityGroup()."&lt;br /&gt;";
echo "Location: ".$hosted_service-&gt;getLocation()."&lt;br /&gt;";</pre>
<p>创建云服务后，您可以使用 <a href="#CreateDeployment">createDeployment</a> 方法将代码部署到服务。</p>
<h2 id="DeltetCloudService">如何：删除云服务</h2>
<p>您可以通过将服务名称传递到 <strong>deleteHostedService</strong> 方法来删除云服务：</p>
<pre class="prettyprint">$serviceManagementRestProxy-&gt;deleteHostedService("myhostedservice");</pre>
<p>请注意，必须先删除服务的所有部署，然后才能删除该服务。（有关详细信息，请参阅<a href="#DeleteDeployment">如何：删除部署</a>。）</p>
<h2 id="CreateDeployment">如何：创建部署</h2>
<p><strong>createDeployment</strong> 方法可上载新<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433093">服务包</a>并在过渡环境或生产环境中创建新部署。此方法的参数如下：</p>
<ul>
<li><strong>$name</strong>：托管服务的名称。</li>
<li><strong>$deploymentName</strong>：部署的名称。</li>
<li><strong>$slot</strong>：用于指示过渡槽或生产槽的枚举。</li>
<li><strong>$packageUrl</strong>：部署包（.cspgk 文件）的 URL。包文件必须存储在与它要上载到的托管服务相同的订阅下的 Windows Azure Blob 存储帐户中。您可以使用 <a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/powershell-cmdlets/">Windows Azure PowerShell cmdlet</a> 或使用 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg432988.aspx">cspack 命令行工具</a>创建部署包。</li>
<li><strong>$configuration</strong>：服务配置文件 (.cscfg file)。</li>
<li><strong>$label</strong>：base 64 编码托管服务名称。</li>
</ul>
<p>下面的示例将在名为 <code>myhostedservice</code> 的托管服务的生产槽中创建新部署：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\DeploymentSlot;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $name = "myhostedservice";
    $deploymentName = "v1";
    $slot = DeploymentSlot::PRODUCTION;
    $packageUrl = "URL_for_.cspkg_file";
    $configuration = base64_encode(file_get_contents('path_to_.cscfg_file'));
    $label = base64_encode($name);

    $result = $serviceManagementRestProxy-&gt;createDeployment($name,
                                                     $deploymentName,
                                                     $slot,
                                                     $packageUrl,
                                                     $configuration,
                                                     $label);

    $status = $serviceManagementRestProxy-&gt;getOperationStatus($result);
    echo "Operation status: ".$status-&gt;getStatus()."&lt;br /&gt;";
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>请注意，在上面的示例中，可以通过将 <strong>createDeployment</strong> 返回的结果传递到 <strong>getOperationStatus</strong> 方法来检索 <strong>createDeployment</strong> 操作的状态。</p>
<p>您可以使用 <strong>getDeployment</strong> 方法访问部署属性。下面的示例通过指定 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/GetDeploymentOptions.php">GetDeploymentOptions</a> 对象中的部署槽来检索部署，但您可以指定部署名称。该示例还将循环访问部署的所有实例：</p>
<pre class="prettyprint">$options = new GetDeploymentOptions();
$options-&gt;setSlot(DeploymentSlot::PRODUCTION);

$getDeploymentResult = $serviceManagementRestProxy-&gt;getDeployment("myhostedservice", $options);
$deployment = $getDeploymentResult-&gt;getDeployment();

echo "Name: ".$deployment-&gt;getName()."&lt;br /&gt;";
echo "Slot: ".$deployment-&gt;getSlot()."&lt;br /&gt;";
echo "Private ID: ".$deployment-&gt;getPrivateId()."&lt;br /&gt;";
echo "Status: ".$deployment-&gt;getStatus()."&lt;br /&gt;";
echo "Instances: &lt;br /&gt;";
foreach($deployment-&gt;getroleInstanceList() as $roleInstance){
    echo "Instance name: ".$roleInstance-&gt;getInstanceName()."&lt;br /&gt;";
    echo "Instance status: ".$roleInstance-&gt;getInstanceStatus()."&lt;br /&gt;";
    echo "Instance size: ".$roleInstance-&gt;getInstanceSize()."&lt;br /&gt;";
}
echo "------&lt;br /&gt;";</pre>
<h2 id="UpdateDeployment">如何：更新部署</h2>
<p>可以使用 <strong>changeDeploymentConfiguration</strong> 方法或 <strong>updateDeploymentStatus</strong> 方法来更新部署。</p>
<p>利用 <strong>changeDeploymentConfiguration</strong> 方法，您可以上载新服务配置 (<code>.cscfg</code>) 文件，这将更改多项服务设置（包括部署中的实例数）中的任何设置。有关详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee758710.aspx">Windows Azure 服务配置架构 (.cscfg)</a>。下面的示例演示如何上载新的服务配置文件：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\ChangeDeploymentConfigurationOptions;
use WindowsAzure\ServiceManagement\Models\DeploymentSlot;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $name = "myhostedservice";
    $configuration = base64_encode(file_get_contents('path to .cscfg file'));
    $options = new ChangeDeploymentConfigurationOptions();
    $options-&gt;setSlot(DeploymentSlot::PRODUCTION);

    $result = $serviceManagementRestProxy-&gt;changeDeploymentConfiguration($name, $configuration, $options);

    $status = $serviceManagementRestProxy-&gt;getOperationStatus($result);
    echo "Operation status: ".$status-&gt;getStatus()."&lt;br /&gt;";
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>请注意，在上面的示例中，可以通过将 <strong>changeDeploymentConfiguration</strong> 返回的结果传递到 <strong>getOperationStatus</strong> 方法来检索 <strong>changeDeploymentConfiguration</strong> 操作的状态。</p>
<p>利用 <strong>updateDeploymentStatus</strong> 方法，您可以将部署状态设置为“正在运行”或“已挂起”。下面的示例演示如何将名为 <code>myhostedservice</code> 的托管服务的生产槽中的部署的状态设置为“正在运行”：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\DeploymentStatus;
use WindowsAzure\ServiceManagement\Models\DeploymentSlot;
use WindowsAzure\ServiceManagement\Models\GetDeploymentOptions;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $options = new GetDeploymentOptions();
    $options-&gt;setSlot(DeploymentSlot::PRODUCTION);

    $result = $serviceManagementRestProxy-&gt;updateDeploymentStatus("myhostedservice", DeploymentStatus::RUNNING, $options);
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<h2 id="MoveDeployments">如何：在过渡环境和生产环境之间移动部署</h2>
<p>Windows Azure 提供了两种部署环境：过渡环境和生产环境。通常，在将服务部署到生产环境之前，会将服务部署到过渡环境以进行测试。在需要将过渡环境中的服务提升到生产环境时，您可以执行此操作而无需重新部署该服务。这可通过交换部署来完成。（有关交换部署的详细信息，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh386336.aspx">在 Windows Azure 中管理部署概述</a>。）</p>
<p>下面的示例演示如何使用 <strong>swapDeployment</strong> 方法来交换两个部署（部署名称分别为 <code>v1</code> 和 <code>v2</code>）。在该示例中，在调用 <strong>swapDeployment</strong> 之前，部署 <code>v1</code> 位于生产槽中，部署 <code>v2</code> 位于过渡槽中。在调用 <strong>swapDeployment</strong> 之后，<code>v2</code> 位于生产槽中，<code>v1</code> 位于过渡槽中。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php'; 

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $result = $serviceManagementRestProxy-&gt;swapDeployment("myhostedservice", "v2", "v1");
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<h2 id="DeleteDeployment">如何：删除部署</h2>
<p>若要删除部署，请使用 <strong>deleteDeployment</strong> 方法。下面的示例演示如何通过对 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/GetDeploymentOptions.php">GetDeploymentOptions</a> 对象使用 <strong>setSlot</strong> 方法，然后将过渡环境中的部署传递到 <strong>deleteDeployment</strong> 来删除该部署。您可以对 [GetDepolymentOptions] 类使用 <strong>setName</strong> 方法来按部署名称指定部署，而不是按槽指定部署。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\GetDeploymentOptions;
use WindowsAzure\ServiceManagement\Models\DeploymentSlot;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $options = new GetDeploymentOptions();
    $options-&gt;setSlot(DeploymentSlot::STAGING);

    $result = $serviceManagementRestProxy-&gt;deleteDeployment("myhostedservice", $options);
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<h2 id="CreateStorageService">如何：创建存储服务</h2>
<p>利用<a href="http://www.windowsazure.cn/zh-cn/manage/services/storage/what-is-a-storage-account/">存储服务</a>，可以访问 Windows Azure <a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/blob-service/">Blob</a>、<a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/table-service/">表</a>和<a href="http://www.windowsazure.cn/zh-cn/develop/php/how-to-guides/queue-service/">队列</a>。若要创建存储服务，您需要服务的名称（长度为 3 - 24 个小写字符且在 Windows Azure 中是唯一的）、标签（服务的 base-64 编码名称，最多 100 个字符）以及位置或地缘组。提供服务的描述是可选的。位置、地缘组和描述在传递到 <strong>createStorageService</strong> 方法的 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/CreateServiceOptions.php">CreateServiceOptions</a> 对象中设置。下面的示例演示如何通过指定位置来创建存储服务。如果要使用地缘组，则必须先创建地缘组（请参阅<a href="#CreateAffinityGroup">如何：创建地缘组</a>）并使用 <strong>CreateStorageServiceOptions-&gt;setAffinityGroup</strong> 方法设置它。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\CreateServiceOptions;
use WindowsAzure\Common\ServiceException;


try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $name = "mystorageaccount";
    $label = base64_encode($name);
    $options = new CreateServiceOptions();
    $options-&gt;setLocation('West US');
    $options-&gt;setDescription("My storage account description.");

    $result = $serviceManagementRestProxy-&gt;createStorageService($name, $label, $options);

    $status = $serviceManagementRestProxy-&gt;getOperationStatus($result);
    echo "Operation status: ".$status-&gt;getStatus()."&lt;br /&gt;";
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>请注意，在上面的示例中，可以通过将 <strong>createStorageService</strong> 返回的结果传递到 <strong>getOperationStatus</strong> 方法来检索 <strong>createStorageService</strong> 操作的状态。</p>
<p>您可以使用 <strong>listStorageServices</strong> 方法来列出存储帐户及其属性：</p>
<pre class="prettyprint">// Create REST proxy.
$serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);
$getStorageServicesResult = $serviceManagementRestProxy-&gt;listStorageServices();
$storageServices = $getStorageServicesResult-&gt;getStorageServices();

foreach($storageServices as $storageService){
    echo "Service name: ".$storageService-&gt;getName()."&lt;br /&gt;";
    echo "Service URL: ".$storageService-&gt;getUrl()."&lt;br /&gt;";
    echo "Affinity group: ".$storageService-&gt;getAffinityGroup()."&lt;br /&gt;";
    echo "Location: ".$storageService-&gt;getLocation()."&lt;br /&gt;";
    echo "------&lt;br /&gt;";
}</pre>
<h2 id="DeleteStorageService">如何：删除存储服务</h2>
<p>您可以通过将存储服务名称传递到 <strong>deleteStorageService</strong> 方法来删除存储服务。删除存储服务也将删除该服务中存储的所有数据（Blob、表和队列）。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $serviceManagementRestProxy-&gt;deleteStorageService("mystorageservice");
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<h2 id="CreateAffinityGroup">如何：创建地缘组</h2>
<p>地缘组是 Azure 服务的逻辑分组，用于指示 Windows Azure 查找服务以优化性能。例如，您可以在“美国西部”位置创建一个地缘组，然后在该地缘组中创建<a href="#CreateCloudService">云服务</a>。如果您随后在同一地缘组中创建了存储服务，则 Windows Azure 知道要将它放在“美国西部”位置并使用同一地缘组中的云服务在数据中心中优化它以获得最佳性能。</p>
<p>若要创建地缘组，您需要名称、标签（base 64 编码名称）和位置。您可以选择性地提供说明：</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\ServiceManagement\Models\CreateAffinityGroupOptions;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    $name = "myAffinityGroup";
    $label = base64_encode($name);
    $location = "West US";

    $options = new CreateAffinityGroupOptions();
    $options-&gt;setDescription = "My affinity group description.";

    $serviceManagementRestProxy-&gt;createAffinityGroup($name, $label, $location, $options);
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
<p>创建地缘组后，您可以在<a href="#CreateStorageService">创建存储服务</a>时指定该组（而非位置）。</p>
<p>您可以通过调用 <strong>listAffinityGroups</strong> 方法，然后对 <a href="https://github.com/WindowsAzure/azure-sdk-for-php/blob/master/WindowsAzure/ServiceManagement/Models/AffinityGroup.php">AffinityGroup</a> 类调用适当的方法来列出地缘组并检查其属性：</p>
<pre class="prettyprint">$result = $serviceManagementRestProxy-&gt;listAffinityGroups();

$groups = $result-&gt;getAffinityGroups();

foreach($groups as $group){
    echo "Name: ".$group-&gt;getName()."&lt;br /&gt;";
    echo "Description: ".$group-&gt;getDescription()."&lt;br /&gt;";
    echo "Location: ".$group-&gt;getLocation()."&lt;br /&gt;";
    echo "------&lt;br /&gt;";
}</pre>
<h2 id="DeleteAffinityGroup">如何：删除地缘组</h2>
<p>您可以通过将组名传递到 <strong>deleteAffinityGroup</strong> 方法来删除地缘组。请注意，必须将地缘组与所有服务解除关联（或者必须删除使用地缘组的服务），然后才能删除地缘组。</p>
<pre class="prettyprint">require_once 'vendor\autoload.php';

use WindowsAzure\Common\ServicesBuilder;
use WindowsAzure\Common\ServiceException;

try{
    // Create REST proxy.
    $serviceManagementRestProxy = ServicesBuilder::getInstance()-&gt;createServiceManagementService($conn_string);

    // An affinity group must be disassociated from all services 
    // before it can be deleted.
    $serviceManagementRestProxy-&gt;deleteAffinityGroup("myAffinityGroup");
}
catch(ServiceException $e){
    // Handle exception based on error codes and messages.
    // Error codes and messages are here: 
    // http://msdn.microsoft.com/zh-cn/library/windowsazure/ee460801
    $code = $e-&gt;getCode();
    $error_message = $e-&gt;getMessage();
    echo $code.": ".$error_message."&lt;br /&gt;";
}</pre>
</div>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>service management</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>service management</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>service management</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>