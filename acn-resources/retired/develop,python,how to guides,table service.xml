<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19132" parentID="19130" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="2" createDate="2013-07-11T11:45:24" updateDate="2014-08-18T11:21:57" nodeName="Table Service" urlName="table-service" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18397,19130,19132" isDoc=""><bodyText><![CDATA[<div>
<h1>如何从 Python 使用表存储服务</h1>
<p>本指南演示如何使用 Windows Azure 表存储服务执行常见任务。相关示例是使用 Python API 编写的。涉及的任务包括<strong>创建和删除表、在表中插入和查询实体</strong>。有关表的详细信息，请参阅<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<p><a href="#what-is">什么是表服务？</a> <br /><a href="#concepts">概念</a> <br /><a href="#create-account">创建 Windows Azure 存储帐户</a> <br /><a href="#create-table">如何：创建表</a> <br /><a href="#add-entity">如何：向表中添加实体</a> <br /><a href="#update-entity">如何：更新实体</a> <br /><a href="#change-entities">如何：更改实体组</a> <br /><a href="#query-for-entity">如何：查询实体</a> <br /><a href="#query-set-entities">如何：查询实体集</a> <br /><a href="#query-entity-properties">如何：查询实体属性子集</a> <br /><a href="#delete-entity">如何：删除实体</a> <br /><a href="#delete-table">如何：删除表</a> <br /><a href="#next-steps">后续步骤</a></p>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-table-storage" macroAlias="AzureChunkDisplayer" ?-->
<h2><a name="create-account"></a>创建 Windows Azure 存储帐户</h2>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="create-storage-account" macroAlias="AzureChunkDisplayer" ?-->
<p><strong>注意：</strong>如果您需要安装 Python 或客户端库，请参阅 <a href="/zh-cn/develop/python/common-tasks/install-python">Python 安装指南</a>。</p>
<h2><a name="create-table"></a>如何创建表</h2>
<p>可通过 <strong>TableService</strong> 对象使用表服务。以下代码创建 <strong>TableService</strong> 对象。将以下代码添加到您希望在其中以编程方式访问 Windows Azure 存储的任何 Python 文件的顶部附近：</p>
<pre class="prettyprint">from azure.storage import *</pre>
<p>以下代码使用存储帐户名称和帐户密钥创建 <strong>TableService</strong> 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。</p>
<pre class="prettyprint">table_service = TableService(account_name='myaccount', account_key='mykey')

table_service.create_table('tasktable')</pre>
<h2><a name="add-entity"></a>如何向表中添加实体</h2>
<p>若要添加实体，请首先创建定义实体属性名称和值的字典。请注意，对于每个实体，您必须指定 <strong>PartitionKey</strong> 和 <strong>RowKey</strong>。这些值是实体的唯一标识符，并且查询它们比查询其他属性快很多。系统使用 <strong>PartitionKey</strong> 自动将表的实体分发到多个存储节点上。具有相同 <strong>PartitionKey</strong> 的实体存储在同一个节点上。<strong>RowKey</strong> 是实体在其所属分区内的唯一 ID。</p>
<p>若要将实体添加到表中，请将字典对象传递给 <strong>insert_entity</strong> 方法。</p>
<pre class="prettyprint">task = {'PartitionKey': 'tasksSeattle', 'RowKey': '1', 'description' : 'Take out the trash', 'priority' : 200}
table_service.insert_entity('tasktable', task)</pre>
<p>您还可以将 <strong>Entity</strong> 类的实例传递给 <strong>insert_entity</strong> 方法。</p>
<pre class="prettyprint">task = Entity()
task.PartitionKey = 'tasksSeattle'
task.RowKey = '2'
task.description = 'Wash the car'
task.priority = 100
table_service.insert_entity('tasktable', task)</pre>
<h2><a name="update-entity"></a>如何更新实体</h2>
<p>此代码演示如何使用更新版本替换现有实体的旧版本。</p>
<pre class="prettyprint">task = {'description' : 'Take out the garbage', 'priority' : 250}
table_service.update_entity('tasktable', 'tasksSeattle', '1', task)</pre>
<p>如果要更新的实体不存在，更新操作将失败。如果您要存储实体，而不管它以前是否已存在，请使用 <strong>insert_or_replace_entity</strong>。在下面的示例中，第一次调用将替换现有实体。第二次调用将插入新实体，因为表中不存在具有指定 <strong>PartitionKey</strong> 和 <strong>RowKey</strong> 的实体。</p>
<pre class="prettyprint">task = {'description' : 'Take out the garbage again', 'priority' : 250}
table_service.insert_or_replace_entity('tasktable', 'tasksSeattle', '1', task)

task = {'description' : 'Buy detergent', 'priority' : 300}
table_service.insert_or_replace_entity('tasktable', 'tasksSeattle', '3', task)</pre>
<h2><a name="change-entities"></a>如何更改实体组</h2>
<p>有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。若要实现该目的，请对 <strong>TableService</strong> 使用 <strong>begin_batch</strong> 方法，然后像通常一样调用一系列操作。在您确实要按批提交时，可调用 <strong>commit_batch</strong>。请注意，所有实体必须在相同分区中才能更改为批处理。下面的示例将两个实体一起添加到批处理中。</p>
<pre class="prettyprint">task10 = {'PartitionKey': 'tasksSeattle', 'RowKey': '10', 'description' : 'Go grocery shopping', 'priority' : 400}
task11 = {'PartitionKey': 'tasksSeattle', 'RowKey': '11', 'description' : 'Clean the bathroom', 'priority' : 100}
table_service.begin_batch()
table_service.insert_entity('tasktable', task10)
table_service.insert_entity('tasktable', task11)
table_service.commit_batch()</pre>
<h2><a name="query-for-entity"></a>如何查询实体</h2>
<p>若要在表中查询实体，请通过传递 <strong>PartitionKey</strong> 和 <strong>RowKey</strong> 来使用 <strong>get_entity</strong> 方法。</p>
<pre class="prettyprint">task = table_service.get_entity('tasktable', 'tasksSeattle', '1')
print(task.description)
print(task.priority)</pre>
<h2><a name="query-set-entities"></a>如何查询实体集</h2>
<p>此示例基于 <strong>PartitionKey</strong> 查找 Seattle 中的所有任务。</p>
<pre class="prettyprint">tasks = table_service.query_entities('tasktable', "PartitionKey eq 'tasksSeattle'")
for task in tasks:
    print(task.description)
    print(task.priority)</pre>
<h2><a name="query-entity-properties"></a>如何查询实体属性子集</h2>
<p>对表的查询可以只检索实体中的少数几个属性。此方法称为<em>投影</em>，可减少带宽并提高查询性能，尤其适用于大型实体。可使用 <strong>select</strong> 参数并传递您要传送给客户端的属性的名称。</p>
<p>以下代码中的查询只返回表中实体的<strong>说明</strong>。</p>
<p><em>请注意，下面的代码段只适用于云存储服务，存储仿真程序不支持它。</em></p>
<pre class="prettyprint">tasks = table_service.query_entities('tasktable', "PartitionKey eq 'tasksSeattle'", 'description')
for task in tasks:
    print(task.description)</pre>
<h2><a name="delete-entity"></a>如何删除实体</h2>
<p>可以使用实体的分区键和行键删除实体。</p>
<pre class="prettyprint">table_service.delete_entity('tasktable', 'tasksSeattle', '1')</pre>
<h2><a name="delete-table"></a>如何删除表</h2>
<p>以下代码从存储帐户中删除一个表。</p>
<pre class="prettyprint">table_service.delete_table('tasktable')</pre>
<h2><a name="next-steps"></a>后续步骤</h2>
<p>现在，您已了解有关表存储的基础知识，单击下面的链接可了解如何执行更复杂的存储任务。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433040.aspx">在 Windows Azure 中存储和访问数据</a></li>
<li><a href="http://blogs.msdn.com/b/windowsazurestorage/">访问 Windows Azure 存储团队博客</a></li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>table service</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>table service</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>table service</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>