<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18828" parentID="18423" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="20" createDate="2013-07-11T10:42:58" updateDate="2014-08-18T11:09:23" nodeName="service bus queues" urlName="service-bus-queues" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18423,18828" isDoc=""><bodyText><![CDATA[<div><!--?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>如何使用 Service Bus 队列</h1>
<p><span>本指南演示如何使用 Service Bus 队列。相关示例用 C# 编写且使用 .NET API。涉及的应用场景包括<strong>创建队列、发送和接收消息</strong>以及<strong>删除队列</strong>。有关队列的更多信息，请参见<a href="#next-steps">后续步骤</a>一节。 </span></p>
<h2><span class="short-header">什么是 Service Bus 队列 </span></h2>
<p><span>Service Bus 队列支持<strong>中转消息传递通信</strong>模型。在使用队列时，分布式应用程序的组件不会直接相互通信，而是通过充当中介的队列交换消息。消息创建方（发送方）将消息传送到队列，然后继续对其进行处理。消息使用方（接收方）以异步方式从队列中提取消息并处理它。创建方不必等待使用方的答复即可继续处理并发送更多消息。队列为一个或多个竞争使用方提供“先入先出(FIFO)”消息传递方式。也就是说，接收方通常会按照消息添加到队列中的顺序来接收并处理消息，并且每条消息仅由一个消息使用方接收并处理。</span></p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-08.png" alt="队列概念"/></p>
<p>Service Bus 队列是一种可用于各种应用场景的通用技术：</p>
<ul>
<li>多层 Windows Azure 应用程序中 Web 角色和辅助角色之间的通信</li>
<li>混合解决方案中本地应用程序和 Windows Azure 托管应用程序之间的通信</li>
<li>在不同组织或组织的各部门中本地运行的分布式应用程序组件之间的通信</li>
</ul>
<p>利用队列，您可以更好地向外扩展应用程序，并增强您的体系结构的恢复能力。</p>
<h2><span class="short-header">创建服务命名空间 </span></h2>
<p>若要开始在 Windows Azure 中使用 Service Bus 队列，必须先创建一个服务命名空间。服务命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。</p>
<p>创建服务命名空间：</p>
<ol>
<li>
<p>登录到 <a href="http://manage.windowsazure.cn">Windows Azure 管理门户</a>。</p>
</li>
<li>
<p>在该管理门户的左侧导航窗格中，单击“Service Bus”。</p>
</li>
<li>
<p>在管理门户的下方窗格中，单击“创建”。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-03.png"/></p>
</li>
<li>
<p>在“添加新命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-04.png"/></p>
</li>
<li>
<p>在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。</p>
<p>重要说明：选取要部署应用程序的<strong>相同区域</strong>。这将为您提供最佳性能。</p>
</li>
<li>
<p>单击复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户设置资源。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/getting-started-multi-tier-27.png"/></p>
</li>
</ol>
<p>您创建的命名空间随后将显示在管理门户中，然后要花费一段时间来激活。请等到状态变为“活动”后再继续。</p>
<h2><span class="short-header">获取</span>命名空间的默认管理凭据</h2>
<p>若要在新命名空间上执行管理操作（如创建队列），则必须获取该命名空间的管理凭据。</p>
<ol>
<li>
<p>在左侧导航窗格中，单击“Service Bus”节点以显示可用命名空间的列表：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-13.png"/></p>
</li>
<li>
<p>从显示的列表中选择刚刚创建的命名空间：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-09.png"/></p>
</li>
<li>
<p>单击“访问密钥”。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/sb-queues-06.png"/></p>
</li>
<li>
<p>在“连接到您的命名空间”对话框中，找到“默认颁发者”和“默认密钥”条目。记下这些值，因为您将在下面使用此信息来对命名空间执行操作。</p>
</li>
</ol>
<h2>配置应用程序以使用 Service Bus</h2>
<p>在您创建使用 Service Bus 的应用程序时，必须添加对 Service Bus 程序集的引用并包括相应的命名空间。</p>
<h3>添加对 Service Bus 程序集的引用</h3>
<ol>
<li>
<p>在 Visual Studio 的“解决方案资源管理器”中，右键单击“引用”，然后单击“添加引用”。</p>
</li>
<li>
<p>在“浏览”选项卡中，转到 C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\2012-06\ref，然后添加 <strong>Microsoft.ServiceBus.dll</strong> 引用。</p>
</li>
</ol>
<h3>导入 Service Bus 命名空间</h3>
<p>将以下代码添加到要在其中使用 Service Bus 队列的任何 C# 文件的顶部：</p>
<pre class="prettyprint">using Microsoft.ServiceBus;
using Microsoft.ServiceBus.Messaging;</pre>
<p>您现在可以为 Service Bus 编写代码。</p>
<h2>如何设置 Service Bus 连接字符串</h2>
<p>Service Bus 使用连接字符串来存储终结点和凭据。您可以将连接字符串置于配置文件中，而不是在代码中对其进行硬编码：</p>
<ul>
<li>在使用 Windows Azure 云服务时，建议使用 Windows Azure 服务配置系统（<code>*.csdef</code> 和 <code>*.cscfg</code> 文件）存储连接字符串。</li>
<li>在使用 Windows Azure 网站或 Windows Azure 虚拟机时，建议使用 .NET 配置系统（如 <code>web.config</code> 文件）存储连接字符串。</li>
</ul>
<p>在上述两种情况下，您都可以使用 <code>CloudConfigurationManager.GetSetting</code> 方法检索连接字符串，本指南稍后部分将对此进行介绍。</p>
<h3><a name="config-connstring"></a>在使用云服务时配置连接字符串</h3>
<p>该服务配置机制是 Windows Azure 云服务项目特有的，它使您能够从 Windows Azure 管理门户动态更改配置设置，而无需重新部署您的应用程序。例如，向您的服务定义 (<code>*.csdef</code>) 文件中添加设置，如下所示：</p>
<pre class="prettyprint">&lt;ServiceDefinition name="WindowsAzure1"&gt;
...
    &lt;WebRole name="MyRole" vmsize="Small"&gt;
        &lt;ConfigurationSettings&gt;
            &lt;Setting name="Microsoft.ServiceBus.ConnectionString" /&gt;
        &lt;/ConfigurationSettings&gt;
    &lt;/WebRole&gt;
...
&lt;/ServiceDefinition&gt;</pre>
<p>然后在服务配置 (<code>*.cscfg</code>) 文件中指定值：</p>
<pre class="prettyprint">&lt;ServiceConfiguration serviceName="WindowsAzure1"&gt;
...
    &lt;Role name="MyRole"&gt;
        &lt;ConfigurationSettings&gt;
            &lt;Setting name="Microsoft.ServiceBus.ConnectionString" 
                     value="Endpoint=sb://[yourServiceNamespace].servicebus.chinacloudapi.cn/;SharedSecretIssuer=[issuerName];SharedSecretValue=[yourDefaultKey]" /&gt;
        &lt;/ConfigurationSettings&gt;
    &lt;/Role&gt;
...
&lt;/ServiceConfiguration&gt;</pre>
<p>使用从管理门户检索到的颁发者和密钥值，如上一节中所述。</p>
<h3>在使用网站或虚拟机时配置连接字符串</h3>
<p>在使用网站或虚拟机时，建议使用 .NET 配置系统（如 <code>web.config</code>）。您可以使用 <code>&lt;appSettings&gt;</code> 元素存储连接字符串：</p>
<pre class="prettyprint">&lt;configuration&gt;
    &lt;appSettings&gt;
        &lt;add key="Microsoft.ServiceBus.ConnectionString"
             value="Endpoint=sb://[yourServiceNamespace].servicebus.chinacloudapi.cn/;SharedSecretIssuer=[issuerName];SharedSecretValue=[yourDefaultKey]" /&gt;
    &lt;/appSettings&gt;
&lt;/configuration&gt;</pre>
<p>使用从管理门户检索到的颁发者和密钥值，如上一节中所述。</p>
<h2><span class="short-header">如何创建队列 </span></h2>
<p>您可以通过 <strong>NamespaceManager</strong> 类对 Service Bus 队列执行管理操作。<strong>NamespaceManager</strong> 类提供了创建、枚举和删除队列的方法。</p>
<p>此示例使用带连接字符串的 Windows Azure <strong>CloudConfigurationManager</strong> 类构造 <strong>NamespaceManager</strong> 对象，此连接字符串包含 Service Bus 服务命名空间的基址和有权管理该命名空间的相应凭据。此连接字符串的形式为</p>
<pre class="prettyprint">Endpoint=sb://[yourServiceNamespace].servicebus.chinacloudapi.cn/;SharedSecretIssuer=[issuerName];SharedSecretValue=[yourDefaultKey]</pre>
<p>例如，考虑上一节中的配置设置：</p>
<pre class="prettyprint">// Create the queue if it does not exist already
string connectionString = 
    CloudConfigurationManager.GetSetting("Microsoft.ServiceBus.ConnectionString");

var namespaceManager = 
    NamespaceManager.CreateFromConnectionString(connectionString);

if (!namespaceManager.QueueExists("TestQueue"))
{
    namespaceManager.CreateQueue("TestQueue");
}</pre>
<p>这里使用了 <strong>CreateQueue</strong> 方法的重载，以允许您调整队列属性（例如，为了将默认“生存时间”值设置为应用于发送到队列的消息）。使用 <strong>QueueDescription</strong> 类应用这些设置。下面的示例演示如何创建最大大小为 5GB 且默认消息生存时间为 1 分钟的名为“TestQueue”的队列：</p>
<pre class="prettyprint">// Configure Queue Settings
QueueDescription qd = new QueueDescription("TestQueue");
qd.MaxSizeInMegabytes = 5120;
qd.DefaultMessageTimeToLive = new TimeSpan(0, 1, 0);

// Create a new Queue with custom settings
string connectionString = 
    CloudConfigurationManager.GetSetting("Microsoft.ServiceBus.ConnectionString");

var namespaceManager = 
    NamespaceManager.CreateFromConnectionString(connectionString);

if (!namespaceManager.QueueExists("TestQueue"))
{
    namespaceManager.CreateQueue(qd);
}</pre>
<p><strong>注意：</strong>您可以对 <strong>NamespaceManager</strong> 对象使用 <strong>QueueExists</strong> 方法，以检查具有指定名称的队列是否已位于服务命名空间中。</p>
<h2>如何向队列发送消息</h2>
<p>为向 Service Bus 队列发送消息，您的应用程序需使用连接字符串创建 <strong>QueueClient</strong> 对象。</p>
<p>下面的代码演示如何使用 <strong>CreateFromConnectionString</strong> API 调用为上面创建的“TestQueue”队列创建 <strong>QueueClient</strong> 对象：</p>
<pre class="prettyprint">string connectionString = 
    CloudConfigurationManager.GetSetting("Microsoft.ServiceBus.ConnectionString");

QueueClient Client = 
    QueueClient.CreateFromConnectionString(connectionString, "TestQueue");

Client.Send(new BrokeredMessage());</pre>
<p>发送到 Service Bus 队列以及从中接收到的消息是 <strong>BrokeredMessage</strong> 类的实例。<strong>BrokeredMessage</strong> 对象包含一组标准属性（如 <strong>Label</strong> 和 <strong>TimeToLive</strong>）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入 <strong>BrokeredMessage</strong> 的构造函数来设置消息的正文，相应的 <strong>DataContractSerializer</strong> 随后将用于序列化对象。或者，也可以提供 <strong>System.IO.Stream</strong>。</p>
<p>下面的示例演示如何将五条测试消息发送到在上面的代码段中获得的“TestQueue”<strong>QueueClient</strong>：</p>
<pre class="prettyprint">for (int i=0; i&lt;5; i++)
 {
   // Create message, passing a string message for the body
   BrokeredMessage message = new BrokeredMessage("Test message " + i);

   // Set some addtional custom app-specific properties
   message.Properties["TestProperty"] = "TestValue";
   message.Properties["Message number"] = i;   

   // Send message to the queue
   Client.Send(message);
 }</pre>
<p>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。</p>
<h2>如何从队列接收消息</h2>
<p>从队列接收消息的最简单方法是使用 <strong>QueueClient</strong> 对象。这些对象可在两种不同模式下工作：<strong>ReceiveAndDelete</strong> 和 <strong>PeekLock</strong>。</p>
<p>当使用 <strong>ReceiveAndDelete</strong> 模式时，接收是一项单步操作。即，当 Service Bus 收到对队列中某消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<strong>ReceiveAndDelete</strong> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。因为 Service Bus 会将消息标记为“已使用”，所以在应用程序重新启动并开始再次使用消息时，它会遗漏在崩溃之前使用过的消息。</p>
<p>在 <strong>PeekLock</strong> 模式（这是默认模式）下，接收变成了一个两阶段操作，从而有可能支持不允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找要使用的下一条消息，将其锁定以防其他使用方接收它，然后将该消息返回给应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <strong>Complete</strong> 完成接收过程的第二个阶段。当 Service Bus 发现 <strong>Complete</strong> 调用时，它会将消息标记为“已使用”并将其从队列中删除。</p>
<p>下面的示例演示如何使用默认的 <strong>PeekLock</strong> 模式接收和处理消息。若要指定不同的 <strong>ReceiveMode</strong> 值，可以使用 <strong>CreateFromConnectionString</strong> 的另一个重载。此示例创建无限循环并在消息到达“TestQueue”后对其进行处理：</p>
<pre class="prettyprint">Client.Receive();

// Continuously process messages sent to the "TestQueue" 
while (true) 
{  
   BrokeredMessage message = Client.Receive();

   if (message != null)
   {
      try 
      {
         Console.WriteLine("Body: " + message.GetBody&lt;string&gt;());
         Console.WriteLine("MessageID: " + message.MessageId);
         Console.WriteLine("Test Property: " + 
            message.Properties["TestProperty"]);

         // Remove message from queue
         message.Complete();
      }
      catch (Exception)
      {
         // Indicate a problem, unlock message in queue
         message.Abandon();
      }
   }
}</pre>
<h2>如何处理应用程序崩溃和不可读消息</h2>
<p>Service Bus 提供了相关功能来帮助您轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <strong>Abandon</strong> 方法（而不是 <strong>Complete</strong> 方法）。这会导致 Service Bus 在队列中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</p>
<p>还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</p>
<p>如果应用程序在处理消息之后，但在发出 <strong>Complete</strong> 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<strong>至少处理一次</strong>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果某个场景不允许重复处理，则应用程序开发人员应在其应用程序中添加额外逻辑来处理重复消息传送。这通常可以通过使用消息的 <strong>MessageId</strong> 属性来实现，该属性在多次传送尝试中保持不变。</p>
<h2><span class="short-header">后续步骤 </span></h2>
<p>现在，您已了解有关 Service Bus 队列的基础知识，单击下面的链接可了解更多信息。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh367516.aspx">队列、主题和订阅。</a></li>
<li>构建向 Service Bus 队列发送消息以及从中接收消息的工作应用程序：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh367512.aspx">Service Bus 中转消息传递 .NET 教程</a>。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>service bus queues</pageTitle><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><linkid>service bus queues</linkid><urlDisplayName>service bus queues</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>