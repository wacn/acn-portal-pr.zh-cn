<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19134" parentID="19130" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="4" createDate="2013-07-11T11:45:24" updateDate="2014-08-18T11:21:51" nodeName="Service Bus Queues" urlName="service-bus-queues" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18397,19130,19134" isDoc=""><bodyText><![CDATA[<div>
<h1>如何使用 Service Bus 队列</h1>
<p>本指南演示如何使用 Service Bus 队列。相关示例是使用 Python 编写的，并使用 Python Azure 模块。涉及的应用场景包括<strong>创建队列、发送和接收消息</strong>以及<strong>删除队列</strong>。有关队列的详细信息，请参阅<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-are-service-bus-queues">什么是 Service Bus 队列？</a></li>
<li><a href="#create-a-service-namespace">创建服务命名空间</a></li>
<li><a href="#obtain-default-credentials">获取命名空间的默认管理凭据</a></li>
<li><a href="#create-queue">如何：创建队列</a></li>
<li><a href="#send-messages">如何：向队列发送消息</a></li>
<li><a href="#receive-messages">如何：从队列接收消息</a></li>
<li><a href="#handle-crashes">如何：处理应用程序崩溃和不可读消息</a></li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-service-bus-queues" macroAlias="AzureChunkDisplayer" ?-->
<p><strong>注意：</strong>如果您需要安装 Python 或客户端库，请参阅 <a href="/zh-cn/develop/python/common-tasks/install-python">Python 安装指南</a>。</p>
<h2><a name="create-queue"></a>如何创建队列</h2>
<p>可以通过 <strong>ServiceBusService</strong> 对象处理队列。将以下代码添加到任何 Python 文件的顶部附近，您希望在其中以编程方式访问 Windows Azure Service Bus：</p>
<pre class="prettyprint">from azure.servicebus import *</pre>
<p>以下代码创建 <strong>ServiceBusService</strong> 对象。使用实际命名空间、密钥和颁发者替换“mynamespace”、“mykey”和“myissuer”。</p>
<pre class="prettyprint">bus_service = ServiceBusService(service_namespace='mynamespace', account_key='mykey', issuer='myissuer')

bus_service.create_queue('taskqueue')</pre>
<p><strong>create_queue</strong> 还支持其他选项，以允许您重写默认队列设置，例如消息生存时间或最大队列大小。下面的示例演示如何将最大队列大小设置为 5 GB，将生存时间设置为 1 分钟：</p>
<pre class="prettyprint">queue_options = Queue()
queue_options.max_size_in_megabytes = '5120'
queue_options.default_message_time_to_live = 'PT1M'

bus_service.create_queue('taskqueue', queue_options)</pre>
<h2><a name="send-messages"></a>如何向队列发送消息</h2>
<p>若要向 Service Bus 队列发送消息，您的应用程序需对 <strong>ServiceBusService</strong> 对象调用 <strong>send_queue_message</strong> 方法。</p>
<p>下面的示例演示如何使用 <strong>send_queue_message</strong> 向名为“taskqueue”的队列发送测试消息：</p>
<pre class="prettyprint">msg = Message('Test Message')
bus_service.send_queue_message('taskqueue', msg)</pre>
<p>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列中包含的消息数量不受限制，但消息的总大小受限制。此队列大小是在创建时定义的，上限为 5 GB。</p>
<h2><a name="receive-messages"></a>如何从队列接收消息</h2>
<p>对 <strong>ServiceBusService</strong> 对象使用 <strong>receive_queue_message</strong> 方法可从队列接收消息：</p>
<pre class="prettyprint">msg = bus_service.receive_queue_message('taskqueue')
print(msg.body)</pre>
<p>在读取消息后将从队列中删除它们；不过，通过将可选参数 <strong>peek_lock</strong> 设置为 <strong>True</strong>，您可以读取（扫视）并锁定消息而不会从队列中删除它。</p>
<p>在接收过程中读取并删除消息的默认行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。因为 Service Bus 会将消息标记为已使用，所以在应用程序重新启动并开始再次使用消息时，它会遗漏在崩溃之前使用过的消息。</p>
<p>如果将 <strong>peek_lock</strong> 参数设置为 <strong>True</strong>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 <strong>Message</strong> 对象调用 <strong>delete</strong> 方法来完成接收过程的第二个阶段。<strong>delete</strong> 方法会将消息标记为已使用，并从队列中删除它。</p>
<pre class="prettyprint">msg = bus_service.receive_queue_message('taskqueue', peek_lock=True)
print(msg.body)

msg.delete()</pre>
<h2><a name="handle-crashes"></a>如何处理应用程序崩溃和不可读消息</h2>
<p>Service Bus 提供了相关功能来帮助您轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <strong>Message</strong> 对象调用 <strong>unlock</strong> 方法。这会导致 Service Bus 在队列中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</p>
<p>还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</p>
<p>如果应用程序在处理消息之后，但在调用 <strong>delete</strong> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。这通常称为“至少处理一次”，即，将对每条消息至少处理一次，但在某些情况下，可能会重新传送同一消息。如果某个场景不允许重复处理，则应用程序开发人员应在其应用程序中添加额外逻辑来处理重复消息传送。这通常可以通过使用消息的 <strong>MessageId</strong> 属性来实现，该属性在多次传送尝试中保持不变。</p>
<h2><a name="next-steps"></a>后续步骤</h2>
<p>现在，您已了解有关 Service Bus 队列的基础知识，单击下面的链接可了解更多信息。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh367516.aspx">队列、主题和订阅。</a></li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>service bus queues</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>service bus queues</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>service bus queues</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>