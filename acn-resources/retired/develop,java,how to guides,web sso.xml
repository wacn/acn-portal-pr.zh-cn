<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="18567" parentID="18554" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="13" createDate="2013-06-04T09:19:27" updateDate="2014-08-18T11:12:30" nodeName="Web SSO" urlName="web-sso" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18396,18554,18567" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO chunkpath="devcenter/java" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>使用 Java 和 Windows Azure Active Directory 进行 Web 单一登录</h1>
<h2><a name="introduction"></a>介绍</h2>
<p>本教程将向 Java 开发人员介绍如何利用 Windows Azure Active Directory 为 Office 365 客户的用户实现单一登录。您将了解如何执行以下操作：</p>
<ul>
<li>在客户的租户中设置 Web 应用程序</li>
<li>使用 WS 联合身份验证保护应用程序</li>
</ul>
<h3>先决条件</h3>
<p>本教程使用特定的应用程序服务器，但如果您是熟练的 Java 开发人员，则也可以将下面所述的过程应用于其他环境。学习本教程需要满足以下开发环境先决条件：</p>
<ul>
<li><a href="https://github.com/WindowsAzure/azure-sdk-for-java-samples/tree/master/WAAD.WebSSO.JAVA">针对 Windows Azure Active Directory 的 Java 示例代码</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java 运行时环境 1.6</a></li>
<li><a href="http://www.jboss.org/jbossas/downloads/">JBoss Application Server 7.1.1 最终版</a></li>
<li><a href="https://devstudio.jboss.com/earlyaccess/">JBoss Developer Studio IDE</a></li>
<li>启用了 SSL 的 Internet Information Services (IIS) 7.5</li>
<li>Windows PowerShell</li>
<li><a href="http://onlinehelp.microsoft.com/zh-cn/office365-enterprises/ff652560.aspx">Office 365 PowerShell Commandlets</a></li>
</ul>
<h3>目录</h3>
<ul>
<li><a href="#introduction">介绍</a></li>
<li><a href="#createapp">步骤 1：创建 Java 应用程序</a></li>
<li><a href="#provisionapp">步骤 2：在公司的目录租户中设置应用程序</a></li>
<li><a href="#protectapp">步骤 3：通过对员工登录使用 WS 联合身份验证来保护应用程序</a></li>
<li><a href="#summary">摘要</a></li>
</ul>
<h2><a name="createapp"></a>步骤 1：创建 Java 应用程序</h2>
<p>此步骤介绍如何创建将表示受保护资源的简单 Java 应用程序。对此资源的访问权限将通过公司的 STS 管理的联合身份验证（将在本教程后面部分介绍）授予。</p>
<ol>
<li>打开 JBoss Developer Studio 的新实例。</li>
<li>在“文件”菜单中，单击“新建”，然后单击“项目...”。</li>
<li>在“新建项目”对话框中，展开 <strong>Maven</strong> 文件夹，单击“Maven 项目”，然后单击“下一步”。</li>
<li>在“新建 Maven 项目”对话框中，选中“创建简单项目(跳过 archetype 选择)”，然后单击“下一步”。</li>
<li>在“新建 Maven 项目”对话框的下一页上，在“组 ID”和“项目 ID”文本框中键入 <em>sample</em>。然后，从“打包”下拉菜单中选择“war”，然后单击“完成”。</li>
<li>将创建新的 Maven 项目。在左侧的“项目资源管理器”菜单中，展开 <strong>sample</strong> 项目，右键单击 <strong>pom.xml</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</li>
<li>
<p>在 <strong>pom.xml</strong> 文件中，在 <em>&lt;project&gt;</em> 节中添加以下 XML：</p>
<pre class="prettyprint">&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;jboss-public-repository-group&lt;/id&gt;
        &lt;name&gt;JBoss Public Maven Repository Group&lt;/name&gt;
        &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public-jboss/&lt;/url&gt;
        &lt;layout&gt;default&lt;/layout&gt;
        &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
        &lt;/releases&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
&lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
        &lt;id&gt;jboss-public-repository-group&lt;/id&gt;
        &lt;name&gt;JBoss Public Maven Repository Group&lt;/name&gt;
        &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public-jboss/&lt;/url&gt;
        &lt;layout&gt;default&lt;/layout&gt;
        &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
        &lt;/releases&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
        &lt;/snapshots&gt;
    &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.0.2&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.6&lt;/source&gt;
                &lt;target&gt;1.6&lt;/target&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;</pre>
<p>输入此 XML 后，保存 <strong>pom.xml</strong> 文件。</p>
</li>
<li>
<p>右键单击 <strong>sample</strong> 项目并单击“Maven”，然后单击“更新 Maven 项目”。在“更新 Maven 项目”对话框中，单击“确定”。此步骤将使用 <strong>pom.xml</strong> 更改来更新项目。</p>
</li>
<li>
<p>右键单击 <strong>sample</strong> 项目，单击“新建”，然后单击“JSP 文件”。</p>
</li>
<li>
<p>在“新建 JSP 文件”对话框上，将新文件的路径更改为 <em>sample/src/main/webapp</em>。然后，将文件命名为 <strong>index.jsp</strong> 并单击“完成”。</p>
</li>
<li>
<p>将自动打开新的 <strong>index.jsp</strong> 文件。将自动生成的代码替换为以下形式，然后保存文件：</p>
<pre class="prettyprint">&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"  pageEncoding="ISO-8859-1"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
    &lt;title&gt;Index&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h3&gt;Index Page&lt;/h3&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</li>
<li>
<p>右键单击 <strong>sample</strong> 项目并单击“运行身份”，然后单击“在服务器上运行”。</p>
</li>
<li>
<p>在“在服务器上运行”对话框上，确保选择了“JBoss Enterprise Application Platform 6.x”，然后单击“已完成”。</p>
</li>
</ol>
<h2><a name="provisionapp"></a>步骤 2：在公司的目录租户中设置应用程序</h2>
<p>此步骤介绍 Windows Azure Active Directory 客户的管理员如何在其租户中设置 Java 应用程序以及如何配置单一登录。完成此步骤后，公司的员工可以使用其 Office 365 帐户对 Web 应用程序进行身份验证。</p>
<p>设置过程的第一步是为应用程序创建新的服务主体。Windows Azure Active Directory 将使用服务主体来向目录注册和验证应用程序。</p>
<ol>
<li>如果尚未下载和安装 Office 365 PowerShell Commandlets，则执行此操作。</li>
<li>在“开始”菜单中，运行“用于 Windows PowerShell 的 Microsoft Online Services 模块”控制台。此控制台提供了用于配置有关 Office 365 租户的属性（如创建和修改服务主体）的命令行环境。</li>
<li>
<p>若要导入必需的 <strong>MSOnlineExtended</strong> 模块，请键入以下命令并按 Enter：</p>
<pre class="prettyprint">Import-Module MSOnlineExtended -Force</pre>
</li>
<li>
<p>若要连接到 Office 365 目录，您将需要提供公司的管理员凭据。请键入以下命令并按 Enter，然后在提示符处输入凭据：</p>
<pre class="prettyprint">Connect-MsolService</pre>
</li>
<li>
<p>现在，您将为应用程序创建新的服务主体。请键入以下命令并按 Enter：</p>
<pre class="prettyprint">New-MsolServicePrincipal -ServicePrincipalNames @("javaSample/localhost") -DisplayName "Federation Sample Web Site" -Type Symmetric -Usage Verify -StartDate "12/01/2012" -EndDate "12/01/2013"</pre>
<p>此步骤将输出类似于下面的信息：</p>
<pre class="prettyprint">The following symmetric key was created as one was not supplied qY+Drf20Zz+A4t2w e3PebCopoCugO76My+JMVsqNBFc=
DisplayName           : Federation Sample Java Web Site
ServicePrincipalNames : {javaSample/localhost}
ObjectId              : 59cab09a-3f5d-4e86-999c-2e69f682d90d
AppPrincipalId        : 7829c758-2bef-43df-a685-717089474505
TrustedForDelegation  : False
AccountEnabled        : True
KeyType               : Symmetric
KeyId                 : f1735cbe-aa46-421b-8a1c-03b8f9bb3565
StartDate             : 12/01/2012 08:00:00 a.m.
EndDate               : 12/01/2013 08:00:00 a.m.
Usage                 : Verify</pre>
<div class="dev-callout"><strong>注意</strong>
<p>您应该保存此输出，尤其是生成的对称密钥。此密钥仅在服务主体创建期间对您显示，您以后将无法检索它。使用 Graph API 在目录中读取和写入信息还需要其他值。</p>
</div>
</li>
<li>
<p>最后一个步骤是为应用程序设置答复 URL。在进行身份验证尝试之后，将在答复 URL 中发送响应。请键入以下命令并按 Enter：</p>
<pre class="prettyprint">$replyUrl = New-MsolServicePrincipalAddresses â€“Address "https://localhost:8443/sample" 


Set-MsolServicePrincipal â€“AppPrincipalId "7829c758-2bef-43df-a685-717089474505" â€“Addresses $replyUrl</pre>
</li>
</ol>
<p>现在已经在目录中设置 Web 应用程序，公司员工可以使用它来进行 Web 单一登录。</p>
<h2><a name="protectapp"></a>步骤 3：通过对员工登录使用 WS 联合身份验证来保护应用程序</h2>
<p>此步骤演示如何使用 Windows Identity Foundation (WIF) 和作为必备组件中的示例代码包的一部分下载的 <strong>waad-federation</strong> 库来添加对联合登录的支持。您还将添加登录页并配置应用程序和目录租户之间的信任关系。</p>
<ol>
<li>
<p>在 JBoss Developer Studio 中，单击“文件”，然后单击“导入”。</p>
</li>
<li>
<p>在“导入”对话框中，展开 <strong>Maven</strong> 文件夹，单击“现有 Maven 项目”，然后单击“下一步”。</p>
</li>
<li>
<p>在“导入 Maven 项目”对话框中，将“根目录”路径设置为您将示例代码中的 <strong>waad-federation</strong> 库下载到的位置。然后，选中 <strong>waad-federation</strong> 项目中的 <strong>pom.xml</strong> 文件旁边的复选框并单击“完成”。</p>
</li>
<li>
<p>展开 <strong>sample</strong> 项目，右键单击 <strong>pom.xml</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>在 <strong>pom.xml</strong> 文件中，在 <em>&lt;project&gt;</em> 节中添加以下 XML，然后保存文件：</p>
<pre class="prettyprint">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
        &lt;version&gt;3.0-alpha-1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.microsoft.samples.waad.federation&lt;/groupId&gt;
        &lt;artifactId&gt;waad-federation&lt;/artifactId&gt;
        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</pre>
</li>
<li>
<p>右键单击 <strong>sample</strong> 项目，单击“Maven”，然后单击“更新项目”。在“更新 Maven 项目”对话框中，单击“确定”。此步骤将使用 <strong>pom.xml</strong> 更改来更新项目。</p>
</li>
<li>
<p>右键单击 <strong>sample</strong> 项目，单击“新建”，然后单击“筛选器”。</p>
</li>
<li>
<p>在“创建筛选器”对话框中，为“类名称”项键入 <em>FederationFilter</em>，然后单击“完成”。</p>
</li>
<li>
<p>将打开自动生成的 <strong>FederationFilter.java</strong> 文件。将其中的代码替换为以下代码并保存该文件：</p>
<pre class="prettyprint">import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.regex.*;
import com.microsoft.samples.federation.FederatedLoginManager; import com.microsoft.samples.federation.URLUTF8Encoder;


public class FederationFilter implements Filter {
    private String loginPage;
    private String allowedRegex;
    public void init(FilterConfig config) throws ServletException {
        this.loginPage = config.getInitParameter("login-page-url");
        this.allowedRegex = config.getInitParameter("allowed-regex");
    }
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
            if (request instanceof HttpServletRequest) { 
                HttpServletRequest httpRequest = (HttpServletRequest) request;
                if (!httpRequest.getRequestURL().toString().contains(this.loginPage)) {
                    FederatedLoginManager loginManager = FederatedLoginManager.fromRequest(httpRequest);
                    boolean allowedUrl = Pattern.compile(this.allowedRegex).matcher(httpRequest.getRequestURL().toString()).find();
                    if (!allowedUrl &amp;&amp; !loginManager.isAuthenticated()) {
                        HttpServletResponse httpResponse = (HttpServletResponse) response;
                        String encodedReturnUrl = URLUTF8Encoder.encode(httpRequest.getRequestURL().toString());
                        httpResponse.setHeader("Location", this.loginPage + "?returnUrl=" + encodedReturnUrl);
                        httpResponse.setStatus(302);
                        return;
                    }
                }
            }
        chain.doFilter(request, response);
    }
    public void destroy() {
    }
}</pre>
</li>
<li>
<p>在“项目资源管理器”中，依次展开 <strong>src</strong>、<strong>main</strong> 和 <strong>webapp</strong> 文件夹。右键单击 <strong>web.xml</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>在 <strong>web.xml</strong> 文件中，您将添加一个筛选器来处理受保护和未受保护的页面，它会将未经过身份验证的用户重定向到登录页（作为 <strong>login-page-url</strong> 筛选器参数）。但是，如果 URL 与 <strong>allowed-regex</strong> 筛选器参数中指定的正则表达式匹配，则不会被筛选掉。在 <em>&lt;web-app&gt;</em> 节中添加以下 XML，然后保存 <strong>web.xml</strong> 文件。</p>
<pre class="prettyprint">&lt;filter&gt;
    &lt;filter-name&gt;FederationFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;FederationFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;login-page-url&lt;/param-name&gt;
        &lt;param-value&gt;/sample/login.jsp&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;allowed-regex&lt;/param-name&gt;
        &lt;param-value&gt;(\/sample\/login.jsp|\/sample\/wsfed-saml|\/sample\/oauth)&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;FederationFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;</pre>
</li>
<li>
<p>若要创建登录页，请右键单击 <strong>sample</strong> 项目，单击“新建”，然后单击“JSP 文件”。</p>
</li>
<li>
<p>在“新建 JSP 文件”对话框上，将新文件的路径更改为 <em>sample/src/main/webapp</em>。然后，将文件命名为 <strong>login.jsp</strong> 并单击“完成”。</p>
</li>
<li>
<p>将自动打开新的 <strong>login.jsp</strong> 文件。将自动生成的代码替换为以下形式，然后保存文件：</p>
<pre class="prettyprint">&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"  pageEncoding="ISO-8859-1"%&gt;
&lt;%@ page import="com.microsoft.samples.federation.*"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt; 
    &lt;title&gt;Login Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h3&gt;Login Page&lt;/h3&gt;
    &lt;a href="&lt;%=FederatedLoginManager.getFederatedLoginUrl(request.getParameter("returnUrl"))%&gt;"&gt;&lt;%=FederatedConfiguration.getInstance().getStsFriendlyName()%&gt;&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</li>
<li>
<p>在“项目资源管理器”中，展开 <strong>sample</strong> 项目的 <strong>/src/main</strong> 文件夹。右键单击 <strong>resources</strong> 文件夹，单击“新建”，然后单击“其他”。</p>
</li>
<li>
<p>在“新建”对话框中，展开 <strong>JBoss Tools Web</strong> 文件夹，单击“属性文件”，然后单击“下一步”。</p>
</li>
<li>
<p>在“新建文件属性”对话框中，将文件命名为 <strong>federation</strong>，然后单击“完成”。</p>
</li>
<li>
<p>在“项目资源管理器”中，展开 <strong>sample</strong> 项目的 <strong>src/main/resources</strong> 文件夹。右键单击 <strong>federation.properties</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>在 <strong>federation.properties</strong> 文件中，包含以下配置项，然后保存文件：</p>
<pre class="prettyprint">federation.trustedissuers.issuer=https://accounts.accesscontrol.chinacloudapi.cn/v2/wsfederation
federation.trustedissuers.thumbprint=qY+Drf20Zz+A4t2we3PebCopoCugO76My+JMVsqNBFc=
federation.trustedissuers.friendlyname=Fabrikam
federation.audienceuris=spn:7829c758-2bef-43df-a685-717089474505
federation.realm=spn:7829c758-2bef-43df-a685-717089474505
federation.reply=https://localhost:8443/sample/wsfed-saml</pre>
<div class="dev-callout"><strong>注意</strong>
<p>必须在 Theaudienceurisandrealmvalues 前面加上“spn:”。</p>
</div>
</li>
<li>
<p>现在您需要创建新的 Servlet。右键单击 <strong>sample</strong> 项目，依次单击“新建”、“其他”和“Servlet”。</p>
</li>
<li>
<p>在“创建 Servlet”对话框上，为“类名称”提供<em>FederationServlet</em>，然后单击“完成”。</p>
</li>
<li>
<p>将自动打开 <strong>FederationServlet.java</strong> 文件。将其内容替换为以下代码，然后保存文件：</p>
<pre class="prettyprint">import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.microsoft.samples.federation.FederatedAuthenticationListener;
import com.microsoft.samples.federation.FederatedLoginManager;
import com.microsoft.samples.federation.FederatedPrincipal;
import com.microsoft.samples.federation.FederationException;


public class FederationServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;


protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String token = request.getParameter("wresult").toString();


    if (token == null) {
        response.sendError(400, "You were supposed to send a wresult parameter with a token");
    }
    FederatedLoginManager loginManager = FederatedLoginManager.fromRequest(request, new SampleAuthenticationListener());


    try {
        loginManager.authenticate(token, response);
    } catch (FederationException e) {
        response.sendError(500, "Oops! and error occurred.");
    }
}


private class SampleAuthenticationListener implements FederatedAuthenticationListener {
    @Override
    public void OnAuthenticationSucceed(FederatedPrincipal principal) {
        // ***
        // do whatever you want with the principal object that contains the token's claims
        // ***
    }
}


}</pre>
</li>
<li>
<p>在“项目资源管理器”中，展开 <strong>src/main/webapp/WEB-INF</strong> 文件夹。右键单击 <strong>web.xml</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>在 <strong>web.xml</strong> 文件中，将 <em>&lt;url-pattern&gt;</em> 节中的 <strong>/FederationServlet</strong> 设置替换为 <strong>/ws-saml</strong>。例如：</p>
<pre class="prettyprint">&lt;servlet&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;display-name&gt;FederationServlet&lt;/display-name&gt;
    &lt;servlet-name&gt;FederationServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;FederationServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;FederationServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/wsfed-saml&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
</li>
<li>
<p>在“项目资源管理器”中，展开 <strong>src/main/webapp</strong> 文件夹。右键单击 <strong>index.jsp</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>在 <strong>index.jsp</strong> 文件中，将现有代码替换为以下代码，然后保存文件：</p>
<pre class="prettyprint">&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%&gt;
&lt;%@ page import="com.microsoft.samples.federation.*"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
    &lt;title&gt;Index Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h3&gt;Welcome &lt;strong&gt;&lt;%=FederatedLoginManager.fromRequest(request).getPrincipal().getName()%&gt;&lt;/strong&gt;!&lt;/h3&gt;
    &lt;h2&gt;Claim list:&lt;/h2&gt;
    &lt;ul&gt; 
        &lt;% for (Claim claim : FederatedLoginManager.fromRequest(request).getClaims()) { %&gt;
        &lt;li&gt;&lt;%= claim.toString()%&gt;&lt;/li&gt;
        &lt;%  } %&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</li>
<li>
<p>在“项目资源管理器”中，展开 <strong>src/main/webapp/WEB-INF</strong> 文件夹。右键单击 <strong>web.xml</strong> 文件，单击“打开方式”，然后单击“文本编辑器”。</p>
</li>
<li>
<p>我们现在将为应用程序启用 SSL。在 <strong>web.xml</strong> 文件中，在 <em>&lt;web-app&gt;</em> 节中插入以下 <em>&lt;security-constraint&gt;</em> 部分，然后保存文件：</p>
<pre class="prettyprint">&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;SSL Forwarding&lt;/web-resource-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
        &lt;http-method&gt;POST&lt;/http-method&gt;
        &lt;http-method&gt;GET&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;user-data-constraint&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;</pre>
<div class="dev-callout"><strong>注意</strong>
<p>开始进行之前，请确保已将 JBoss Server 配置为支持 SSL。</p>
</div>
</li>
<li>
<p>现在我们已做好端到端运行应用程序的准备。右键单击 <strong>sample</strong> 项目，单击“运行身份”，然后单击“在服务器上运行”。接受之前指定的值，然后单击“完成”。</p>
</li>
<li>
<p>JBoss 浏览器将打开登录页。如果单击“出色的计算机”链接，您将重定向到“Office 365 标识提供程序”页，您可在其中使用目录租户凭据进行登录。例如，<em>john.doe@fabrikam.onmicrosoft.com</em>。</p>
</li>
<li>
<p>登录后，您将作为经过身份验证的用户再次重定向到受保护页面 (<strong>sample/index.jsp</strong>)。</p>
</li>
</ol>
<h2><a name="summary"></a>摘要</h2>
<p>本教程已向您演示如何创建和配置使用 Windows Azure Active Directory 的单一登录功能的单租户 Java 应用程序。</p>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>Windows Azure Active Directory 包含的单一登录功能 (Java)</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>develop-java-how-to-guides-web-sso</linkid><metaKeywords>Azure Java Web 应用程序, Azure 单一登录, Azure Java Active Directory</metaKeywords><metaDescription><![CDATA[了解如何使用 Windows Azure Active Directory 包含的单一登录创建 Java Web 应用程序。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>Web SSO</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>