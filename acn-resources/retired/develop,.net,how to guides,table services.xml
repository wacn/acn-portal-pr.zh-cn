<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18821" parentID="18423" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="13" createDate="2013-07-11T10:41:17" updateDate="2014-08-18T11:09:35" nodeName="Table Services" urlName="table-services" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18423,18821" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/dotnet" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>如何使用表存储服务</h1>
<div class="dev-center-tutorial-selector"><a href="/zh-cn/develop/net/how-to-guides/table-services-v17/" title="1.7 版">1.7 版</a> <a href="/zh-cn/develop/net/how-to-guides/table-services/" title="2.0 版" class="current">2.0 版</a></div>
<p>本指南将演示如何使用 Windows Azure 表存储服务执行常见任务。相关示例用 C# 代码编写并使用 Windows Azure Storage Client Library for .NET（2.0 版）。涉及的任务包括<strong>创建和删除表</strong>，以及<strong>使用表实体</strong>。有关表的更多信息，请参见<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-is">什么是表服务？</a></li>
<li><a href="#concepts">概念</a></li>
<li><a href="#create-account">创建 Windows Azure 存储帐户</a></li>
<li><a href="#setup-connection-string">设置存储连接字符串</a></li>
<li><a href="#configure-access">如何：以编程方式访问表存储</a></li>
<li><a href="#create-table">如何：创建表</a></li>
<li><a href="#add-entity">如何：将实体添加到表</a></li>
<li><a href="#insert-batch">如何：插入一批实体</a></li>
<li><a href="#retrieve-all-entities">如何：检索分区中的所有实体</a></li>
<li><a href="#retrieve-range-entities">如何：检索分区中的一部分实体</a></li>
<li><a href="#retrieve-single-entity">如何：检索单个实体</a></li>
<li><a href="#replace-entity">如何：替换实体</a></li>
<li><a href="#insert-or-replace-entity">如何：插入或替换实体</a></li>
<li><a href="#query-entity-properties">如何：查询一部分实体属性</a></li>
<li><a href="#delete-entity">如何：删除实体</a></li>
<li><a href="#delete-table">如何：删除表</a></li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/shared" chunkname="howto-table-storage" macroAlias="AzureChunkDisplayer" />
<h2><a name="create-account"></a> <span class="short-header">创建帐户</span>创建 Windows Azure 存储帐户</h2>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/shared" chunkname="create-storage-account" macroAlias="AzureChunkDisplayer" />
<h2><a name="setup-connection-string"></a> <span class="short-header">设置连接字符串</span>设置存储连接字符串</h2>
<p>Windows Azure .NET 存储客户端库支持使用存储连接字符串来配置终结点和用于访问存储服务的凭据。您可以将存储连接字符串置于配置文件中，而不是在代码中对其进行硬编码：</p>
<ul>
<li>当使用 Windows Azure 云服务时，建议您使用 Windows Azure 服务配置系统（<code>*.csdef</code> 和 <code>*.cscfg</code> 文件）来存储连接字符串。</li>
<li>当使用 Windows Azure 网站、Windows Azure 虚拟机或构建准备在 Windows Azure 外部运行的 .NET 应用程序时，建议您使用 .NET 配置系统（如 <code>web.config</code> 或 <code>app.config</code> 文件）来存储连接字符串。</li>
</ul>
<p>在上述两种情况下，您可以使用 <code>CloudConfigurationManager.GetSetting</code> 方法检索连接字符串，本指南稍后部分将对此进行介绍。</p>
<h3>在使用云服务时配置连接字符串</h3>
<p>该服务配置机制是 Windows Azure 云服务项目特有的，它使您能够从 Windows Azure 管理门户动态更改配置设置，而无需部署您的应用程序。</p>
<p>在 Windows Azure 服务配置中配置连接字符串：</p>
<ol>
<li>
<p>在 Visual Studio 解决方案资源管理器内 Windows Azure 部署项目的“角色”文件夹中，右键单击 Web 角色或辅助角色，然后单击“属性”。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/blob5.png" alt="Blob5"/></p>
</li>
<li>
<p>单击“设置”选项卡并按“添加设置”按钮。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/blob6.png" alt="Blob6"/></p>
<p>新的 <strong>Setting1</strong> 条目稍后将显示在设置网格中。</p>
</li>
<li>
<p>在新的 <strong>Setting1</strong> 条目的“类型”下拉列表中，选择“连接字符串”。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/blob7.png" alt="Blob7"/></p>
</li>
<li>
<p>单击 <strong>Setting1</strong> 条目最右侧的 <strong>...</strong> 按钮。将打开“存储帐户连接字符串”对话框。</p>
</li>
<li>
<p>选择是要定位到存储模拟器（在本地计算机上模拟的 Windows Azure 存储），还是云中的实际存储帐户。本指南中的代码使用其中任一方式。如果您希望使用我们之前在 Windows Azure 中创建的存储帐户存储 Blob 数据，请输入从本教程前面的步骤中复制的“主访问密钥”值。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/blob8.png" alt="Blob8"/></p>
</li>
<li>
<p>将条目“名称”从 <strong>Setting1</strong> 更改为更友好的名称，例如 <strong>StorageConnectionString</strong>。稍后将在本指南的代码中引用此连接字符串。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/blob9.png" alt="Blob9"/></p>
</li>
</ol>
<h3>使用 .NET 配置来配置连接字符串</h3>
<p>除非您使用的是 Windows Azure 云服务（请参见上一节），否则建议您使用 .NET 配置系统（如 <code>web.config</code> 或 <code>app.config</code>）。这包括 Windows Azure 网站或 Windows Azure 虚拟机，以及设计为在 Windows Azure 外部运行的应用程序。您可以使用 <code>&lt;connectionStrings&gt;</code> 元素存储连接字符串，如下所示：</p>
<pre class="prettyprint">&lt;configuration&gt;     &lt;connectionStrings&gt;         &lt;add name="StorageConnectionString"              connectionString="DefaultEndpointsProtocol=https;AccountName=[AccountName];AccountKey=[AccountKey]" /&gt;     &lt;/connectionStrings&gt; &lt;/configuration&gt;</pre>
<p>有关存储连接字符串的更多信息，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee758697.aspx">配置连接字符串</a>。</p>
<p>您现在即可准备执行本指南中的操作任务。</p>
<h2><a name="configure-access"></a> <span class="short-header">以编程方式访问</span>如何：以编程方式访问表存储</h2>
<h3>获得程序集</h3>
<p>您可以使用 NuGet 获得 <code>Microsoft.WindowsAzure.Storage.dll</code> 程序集。在“解决方案资源管理器”中，右键单击您的项目并选择“管理 NuGet 包”。在线搜索“WindowsAzure.Storage”，然后单击“安装”以安装 Windows Azure 存储包和依赖项。</p>
<p><code>Microsoft.WindowsAzure.Storage.dll</code> 还包含在 2012 年 10 月版的 Windows Azure SDK for .NET 中，可从 <a href="http://www.windowsazure.cn/zh-cn/develop/net/#">.NET 开发人员中心</a>下载该版本。程序集安装在 <code>%Program Files%\Microsoft SDKs\Windows Azure\.NET SDK\2012-10\ref\</code> 目录中。</p>
<h3>命名空间声明</h3>
<p>将以下代码命名空间声明添加到任何 C# 文件的顶部，您希望使用此类文件以编程方式访问 Windows Azure 存储：</p>
<pre class="prettyprint">using Microsoft.WindowsAzure.Storage; using Microsoft.WindowsAzure.Storage.Auth; using Microsoft.WindowsAzure.Storage.Table;</pre>
<p>确保您引用 <code>Microsoft.WindowsAzure.Storage.dll</code> 程序集。</p>
<h3>检索连接字符串</h3>
<p>可以使用 <strong>CloudStorageAccount</strong> 类型来表示您的存储帐户信息。如果您使用的是 Windows Azure 项目模板并且/或者引用 Microsoft.WindowsAzure.CloudConfigurationManager 命名空间，则可以使用 <strong>CloudConfigurationManager</strong> 类型从 Windows Azure 服务配置中检索存储连接字符串和存储帐户信息：</p>
<pre class="prettyprint">CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));</pre>
<p>如果您要创建应用程序而不引用 Microsoft.WindowsAzure.CloudConfigurationManager，并且您的连接字符串位于前面显示的 <code>web.config</code> 或 <code>app.config</code> 中，那么您可以使用 <strong>ConfigurationManager</strong> 来检索连接字符串。您需要将对 System.Configuration.dll 的引用添加到您的项目中，并为其添加另一个命名空间声明：</p>
<pre class="prettyprint">using System.Configuration; ... CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     ConfigurationManager.ConnectionStrings["StorageConnectionString"].ConnectionString);</pre>
<h3>ODataLib 依赖项</h3>
<p>.NET 存储客户端库中的 ODataLib 依赖项可通过在 NuGet （而非 WCF 数据服务）上获得的 ODataLib（5.0.2 版）包来解析。ODataLib 库可直接下载或者通过 NuGet 由代码项目引用。特定的 ODataLib 包为 <a href="http://nuget.org/packages/Microsoft.Data.OData/5.0.2">OData</a>、<a href="http://nuget.org/packages/Microsoft.Data.Edm/5.0.2">Edm</a> 和 <a href="http://nuget.org/packages/System.Spatial/5.0.2">Spatial</a>。</p>
<h2><a name="create-table"></a> <span class="short-header">创建表</span>如何：创建表</h2>
<p>利用 <strong>CloudTableClient</strong> 对象，您可以获得表和实体的引用对象。以下代码将创建 <strong>CloudTableClient</strong> 对象并使用它创建新表。本指南中的所有代码假定将构建的应用程序是 Windows Azure 云服务项目，并且使用存储在 Windows Azure 应用程序的服务配置中的存储连接字符串。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the table if it doesn't exist. CloudTable table = tableClient.GetTableReference("people"); table.CreateIfNotExists();</pre>
<h2><a name="add-entity"></a> <span class="short-header">将实体添加到表</span>如何：将实体添加到表</h2>
<p>实体将映射到使用派生自 <strong>TableEntity</strong> 的自定义类的 C# 对象。若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。对于应存储在表服务中的任何属性，该属性必须是公开 <code>get</code> 和 <code>set</code> 的受支持类型的公共属性。此外，您的实体类型<em>必须</em> 公开不带参数的构造函数。</p>
<pre class="prettyprint">public class CustomerEntity : TableEntity {     public CustomerEntity(string lastName, string firstName)     {         this.PartitionKey = lastName;         this.RowKey = firstName;     }      public CustomerEntity() { }      public string Email { get; set; }      public string PhoneNumber { get; set; } }</pre>
<p>可使用您在“如何：创建表”中创建的 <strong>CloudTable</strong> 对象执行涉及实体的表操作。要执行的操作由 <strong>TableOperation</strong> 对象表示。以下代码示例演示如何创建 <strong>CloudTable</strong> 对象以及 <strong>CustomerEntity</strong> 对象。为准备此操作，会创建一个 <strong>TableOperation</strong> 以将客户实体插入该表中。最后，将通过调用 <strong>CloudTable.Execute</strong> 执行此操作。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(    CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create a new customer entity. CustomerEntity customer1 = new CustomerEntity("Harp", "Walter"); customer1.Email = "Walter@contoso.com"; customer1.PhoneNumber = "425-555-0101";  // Create the TableOperation that inserts the customer entity. TableOperation insertOperation = TableOperation.Insert(customer1);  // Execute the insert operation. table.Execute(insertOperation);</pre>
<h2><a name="insert-batch"></a> <span class="short-header">插入一批实体</span>如何：插入一批实体</h2>
<p>您可以通过一次写入操作将一批实体插入表中。批处理操作的一些其他注意事项：</p>
<ol>
<li>您可以在同一批处理操作中执行更新、删除和插入操作。</li>
<li>单个批处理操作最多可包含 100 个实体。</li>
<li>单次批处理操作中的所有实体都必须具有相同的分区键。</li>
<li>可以作为批处理操作执行查询时，此操作必须是批处理中仅有的操作。</li>
</ol>
<p><!-- --> 以下代码示例创建两个实体对象，并使用 <strong>Insert</strong> 方法将其中每个对象都添加到 <strong>TableBatchOperation</strong> 中。然后调用 <strong>CloudTable.Execute</strong> 以执行此操作。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create the batch operation. TableBatchOperation batchOperation = new TableBatchOperation();  // Create a customer entity and add it to the table. CustomerEntity customer1 = new CustomerEntity("Smith", "Jeff"); customer1.Email = "Jeff@contoso.com"; customer1.PhoneNumber = "425-555-0104";  // Create another customer entity and add it to the table. CustomerEntity customer2 = new CustomerEntity("Smith", "Ben"); customer2.Email = "Ben@contoso.com"; customer2.PhoneNumber = "425-555-0102";  // Add both customer entities to the batch insert operation. batchOperation.Insert(customer1); batchOperation.Insert(customer2);  // Execute the batch operation. table.ExecuteBatch(batchOperation);</pre>
<h2><a name="retrieve-all-entities"></a> <span class="short-header">检索所有实体</span>如何：检索分区中的所有实体</h2>
<p>若要查询表以获取分区中的所有实体，请使用 <strong>TableQuery</strong> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Construct the query operation for all customer entities where PartitionKey="Smith". TableQuery&lt;CustomerEntity&gt; query = new TableQuery&lt;CustomerEntity&gt;().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"));  // Print the fields for each customer. foreach (CustomerEntity entity in table.ExecuteQuery(query)) {     Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,         entity.Email, entity.PhoneNumber); }</pre>
<h2><a name="retrieve-range-entities"></a> <span class="short-header">检索一部分实体</span>如何：检索分区中的一部分实体</h2>
<p>如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，然后输出查询结果。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  //Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create the table query. TableQuery&lt;CustomerEntity&gt; rangeQuery = new TableQuery&lt;CustomerEntity&gt;().Where(     TableQuery.CombineFilters(         TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"),         TableOperators.And,         TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.LessThan, "E")));  // Loop through the results, displaying information about the entity. foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery)) {     Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,         entity.Email, entity.PhoneNumber); }</pre>
<h2><a name="retrieve-single-entity"></a> <span class="short-header">检索单个实体</span>如何：检索单个实体</h2>
<p>您可以写入查询以检索单个特定实体。以下代码使用 <strong>TableOperation</strong> 来指定客户“Ben Smith”。此方法仅返回一个实体，而不是一个集合，并且 <strong>TableResult.Result</strong> 中的返回值是一个 <strong>CustomerEntity</strong>。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable ojbect that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create a retrieve operation that takes a customer entity. TableOperation retrieveOperation = TableOperation.Retrieve&lt;CustomerEntity&gt;("Smith", "Ben");  // Execute the retrieve operation. TableResult retrievedResult = table.Execute(retrieveOperation);  // Print the phone number of the result. if (retrievedResult.Result != null)    Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber); else    Console.WriteLine("The phone number could not be retrieved.");</pre>
<h2><a name="replace-entity"></a> <span class="short-header">替换实体</span>如何：替换实体</h2>
<p>若要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码使用 <strong>Replace</strong>，而不是调用 <strong>Insert</strong>。这将导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。操作失败将防止您的应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 <strong>Replace</strong> 操作。下一节将为您演示如何重写此行为。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create a retrieve operation that takes a customer entity. TableOperation retrieveOperation = TableOperation.Retrieve&lt;CustomerEntity&gt;("Smith", "Ben");  // Execute the operation. TableResult retrievedResult = table.Execute(retrieveOperation);  // Assign the result to a CustomerEntity object. CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;  if (updateEntity != null) {    // Change the phone number.    updateEntity.PhoneNumber = "425-555-0105";     // Create the InsertOrReplace TableOperation    TableOperation updateOperation = TableOperation.Replace(updateEntity);     // Execute the operation.    table.Execute(updateOperation);     Console.WriteLine("Entity updated."); }  else    Console.WriteLine("Entity could not be retrieved.");</pre>
<h2><a name="insert-or-replace-entity"></a> <span class="short-header">插入或替换实体</span>如何：插入或替换实体</h2>
<p>如果该实体自从服务器中检索到它以后发生更改，则 <strong>Replace</strong> 操作将失败。此外，您必须首先从服务器中检索该实体，<strong>Replace </strong>才能成功。但是，有时您不知道服务器上是否存在该实体以及存储在其中的当前值是否无关 - 更新操作会将其全部覆盖。为此，您应使用 <strong>InsertOrReplace</strong> 操作。如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。在以下代码示例中，仍将检索 Ben Smith 的客户实体，但稍后会使用 <strong>InsertOrReplace</strong> 将其保存回服务器。将覆盖在检索与更新操作之间对实体进行的任何更新。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  // Create the CloudTable object that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create a retrieve operation that takes a customer entity. TableOperation retrieveOperation = TableOperation.Retrieve&lt;CustomerEntity&gt;("Smith", "Ben");  // Execute the operation. TableResult retrievedResult = table.Execute(retrieveOperation);  // Assign the result to a CustomerEntity object. CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;  if (updateEntity != null) {    // Change the phone number.    updateEntity.PhoneNumber = "425-555-1234";     // Create the InsertOrReplace TableOperation    TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);     // Execute the operation.    table.Execute(insertOrReplaceOperation);     Console.WriteLine("Entity was updated."); }  else    Console.WriteLine("Entity could not be retrieved.");</pre>
<h2><a name="query-entity-properties"></a> <span class="short-header">查询一部分属性</span>如何：查询一部分实体属性</h2>
<p>表查询可以只检索实体中的少数几个属性而不是所有实体属性。此方法称为投影，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询只返回表中实体的电子邮件地址。这可通过使用 <strong>DynamicTableEntity</strong> 和 <strong>EntityResolver</strong> 的查询来实现。您可以在此<a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2011/09/15/windows-azure-tables-introducing-upsert-and-query-projection.aspx">博客文章</a>中了解有关投影的详细信息。请注意，本地存储模拟器不支持投影，因此此代码仅在使用表服务中的帐户时运行。</p>
<pre class="prettyprint">// Retrieve storage account from connection string CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  //Create the CloudTable that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Define the query, and only select the Email property TableQuery&lt;DynamicTableEntity&gt; projectionQuery = new TableQuery&lt;DynamicTableEntity&gt;().Select(new string[] { "Email" });  // Define an entity resolver to work with the entity after retrieval. EntityResolver&lt;string&gt; resolver = (pk, rk, ts, props, etag) =&gt; props.ContainsKey("Email") ? props["Email"].StringValue : null;  foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null)) {     Console.WriteLine(projectedEmail); }</pre>
<h2><a name="delete-entity"></a> <span class="short-header">删除实体</span>如何：删除实体</h2>
<p>在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。以下代码检索并删除了客户实体。</p>
<pre class="prettyprint">// Retrieve storage account from connection string CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  //Create the CloudTable that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Create a retrieve operation that expects a customer entity. TableOperation retrieveOperation = TableOperation.Retrieve&lt;CustomerEntity&gt;("Smith", "Ben");  // Execute the operation. TableResult retrievedResult = table.Execute(retrieveOperation);  // Assign the result to a CustomerEntity. CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;  // Create the Delete TableOperation. if (deleteEntity != null) {    TableOperation deleteOperation = TableOperation.Delete(deleteEntity);     // Execute the operation.    table.Execute(deleteOperation);     Console.WriteLine("Entity deleted."); }  else    Console.WriteLine("Could not retrieve the entity.");</pre>
<h2><a name="delete-table"></a> <span class="short-header">删除表</span>如何：删除表</h2>
<p>最后，以下代码示例将从存储帐户中删除表。在删除表之后的一段时间内无法重新创建它。</p>
<pre class="prettyprint">// Retrieve the storage account from the connection string. CloudStorageAccount storageAccount = CloudStorageAccount.Parse(     CloudConfigurationManager.GetSetting("StorageConnectionString"));  // Create the table client. CloudTableClient tableClient = storageAccount.CreateCloudTableClient();  //Create the CloudTable that represents the "people" table. CloudTable table = tableClient.GetTableReference("people");  // Delete the table it if exists. table.DeleteIfExists();</pre>
<h2><a name="next-steps"></a> <span class="short-header">后续步骤</span>后续步骤</h2>
<p>现在，您已了解有关表存储的基础知识，单击下面的链接可了解如何执行更复杂的存储任务。</p>
<ul>
<li>查看 Blob 服务参考文档，了解有关可用 API 的完整详情：
<ul>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/wa_storage_api_ref_reference_home.aspx">.NET 存储客户端库参考</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/dd179355">REST API 参考</a></li>
</ul>
</li>
<li>在以下位置了解有关可以使用 Windows Azure 存储执行的更高级任务：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433040.aspx">在 Windows Azure 中存储和访问数据</a>。</li>
<li>查看更多功能指南，以了解在 Windows Azure 中存储数据的其他方式。
<ul>
<li>使用 <a href="/zh-cn/develop/net/how-to-guides/blob-storage-v17/">Blob 存储</a>存储非结构化数据。</li>
<li>使用 <a href="/zh-cn/develop/net/how-to-guides/sql-database/">SQL Database</a> 存储关系数据。</li>
</ul>
</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>如何使用表存储 - Windows Azure 功能指南</pageTitle><metaKeywords>Azure 表入门   Azure nosql   Azure 大型结构化数据存储   Azure 表   Azure 表存储   Azure 表 .NET   Azure 表存储 .NET   Azure 表 C#   Azure 表存储 C#</metaKeywords><metaDescription><![CDATA[了解如何使用表存储创建和删除表，以及在表中插入和查询实体。]]></metaDescription><linkid>dev-net-2-how-to-table-services</linkid><urlDisplayName>表服务 (2.0)</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>