<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="18561" parentID="18554" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="7" createDate="2013-06-04T09:19:26" updateDate="2014-08-18T11:12:26" nodeName="Using SQL Azure in Java" urlName="using-sql-azure-in-java" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18396,18554,18561" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/java" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>如何通过 Java 使用 Windows Azure SQL Database</h1>
<p>以下步骤演示了如何通过 Java 使用 Windows Azure SQL Database。显示命令行示例是为了简单起见，但对于在本地、Windows Azure 中或其他环境中承载的 Web 应用程序，采用的步骤非常相似。本指南介绍如何从 <a href="https://manage.windowsazure.cn">Windows Azure 管理门户</a>创建服务器和数据库。</p>
<h2>什么是 Windows Azure SQL Database</h2>
<p>Windows Azure SQL Database 基于 SQL Server 技术为 Windows Azure 提供关系数据库管理系统。使用 SQL Database 实例，您可以轻松地配置关系数据库解决方案并将其部署到云中，并且利用能够为企业级可用性、可缩放性和安全性提供内置数据保护和自愈优势的分布式数据中心。</p>
<h2>目录</h2>
<ul>
<li><a href="#concepts">概念</a></li>
<li><a href="#prerequisites">先决条件</a></li>
<li><a href="#create_db">创建 Windows Azure SQL Database</a></li>
<li><a href="#determine_connection_string">确定 SQL Database 连接字符串</a></li>
<li><a href="#specify_allowed_ips">允许访问一系列 IP 地址</a></li>
<li><a href="#use_sql_azure_in_java">通过 Java 使用 Windows Azure SQL Database</a></li>
<li><a href="#communicate_from_code">通过代码与 Windows Azure SQL Database 通信</a></li>
<li><a href="#to_create_table">创建表</a></li>
<li><a href="#to_create_index">在表中创建索引</a></li>
<li><a href="#to_insert_rows">插入行</a></li>
<li><a href="#to_retrieve_rows">检索行</a></li>
<li><a href="#to_retrieve_rows_using_where">使用 WHERE 子句检索行</a></li>
<li><a href="#to_retrieve_row_count">检索行的计数</a></li>
<li><a href="#to_update_rows">更新行</a></li>
<li><a href="#to_delete_rows">删除行</a></li>
<li><a href="#to_check_table_existence">检查表是否存在</a></li>
<li><a href="#to_drop_index">删除索引</a></li>
<li><a href="#to_drop_table">删除表</a></li>
<li><a href="#using_in_azure">在 Windows Azure 部署中通过 Java 使用 SQL Database</a></li>
<li><a href="#nextsteps">后续步骤</a></li>
</ul>
<h2><a id="concepts"></a>概念</h2>
<p>由于 Windows Azure SQL Database 是基于 SQL Server 技术构建的，因此通过 Java 访问 SQL Database 与通过 Java 访问 SQL Server 非常相似。您可以本地部署应用程序（使用 SQL Server），然后通过仅更改连接字符串连接到 SQL Database。您可以对应用程序使用 SQL Server JDBC 驱动程序。但是，SQL Database 和 SQL Server 之间有一些可能影响您的应用程序的差别。有关详细信息，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ff394102.aspx">指导原则和限制 (SQL Database)</a>。</p>
<p>有关 SQL Database 的更多资源，请参阅<a href="#nextsteps">后续步骤</a>部分。</p>
<h2><a id="prerequisites"></a>先决条件</h2>
<p>如果您打算通过 Java 使用 SQL Database，则需满足下面的先决条件。</p>
<ul>
<li>Java 开发人员工具包 (JDK) 1.6 版或更高版本。</li>
<li>Windows Azure 订阅，可从 <a href="http://www.windowsazure.cn/zh-cn/pricing/free-trial/">http://www.windowsazure.cn/zh-cn/pricing/free-trial/</a> 获得。</li>
<li>
<p>如果使用了 Eclipse：</p>
<ul>
<li>
<p>Eclipse IDE for Java EE Developers Helios SR2 或更高版本。可从 <a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a> 下载。</p>
</li>
<li>
<p>Windows Azure Plugin for Eclipse with Java（由 Microsoft Open Technologies 提供）。在此插件的安装过程中，请确保包含了 Microsoft JDBC Driver 4.0 for SQL Server。有关详细信息，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh690946.aspx">安装 Windows Azure Plugin for Eclipse with Java（由 Microsoft Open Technologies 提供）</a>。</p>
</li>
</ul>
</li>
<li>
<p>如果未使用 Eclipse：</p>
<ul>
<li>Microsoft JDBC Driver 4.0 for SQL Server，可从 <a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=11774">http://www.microsoft.com/zh-cn/download/details.aspx?id=11774</a> 下载。</li>
</ul>
</li>
</ul>
<h2><a id="create_db"></a>创建 Windows Azure SQL Database</h2>
<p>通过 Java 代码使用 Windows Azure SQL Database 之前，需要创建 Windows Azure SQL Database 服务器。</p>
<ol>
<li>登录到 <a href="https://manage.windowsazure.cn">Windows Azure管理门户</a>。</li>
<li>
<p>单击“新建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_new.png" alt="新建 SQL Database"/></p>
</li>
<li>
<p>单击“SQL Database”，然后单击“自定义创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_sql_db_create.png" alt="创建自定义 SQL Database"/></p>
</li>
<li>
<p>在“数据库设置”对话框中，指定数据库名称。在本指南中，使用 <strong>gettingstarted</strong> 作为数据库名称。</p>
</li>
<li>
<p>对于“服务器”，选择“新建 SQL Database 服务器”。对其他字段使用默认值。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_customcreate_1.png" alt="SQL Database 设置"/></p>
</li>
<li>
<p>单击“下一步”箭头。</p>
</li>
<li>
<p>在“服务器设置”对话框中，指定 SQL Server 登录名。在本指南中，使用了 <strong>MySQLAdmin</strong>。指定并确认密码。指定一个区域，并确保选中了“允许 Windows Azure 服务访问服务器”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_customcreate_2.png" alt="SQL Server 设置"/></p>
</li>
<li>
<p>单击“完成”按钮。</p>
</li>
</ol>
<h2><a id="determine_connection_string"></a>确定 SQL Database 连接字符串</h2>
<ol>
<li>登录到 <a href="https://manage.windowsazure.cn">Windows Azure管理门户</a>。</li>
<li>单击“SQL Database”。</li>
<li>单击要使用的数据库。</li>
<li>单击“显示连接字符串”。</li>
<li>
<p>突出显示 <strong>JDBC</strong> 连接字符串的内容。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_sql_jdbc_connectionstring.png" alt="确定 JDBC 连接字符串"/></p>
</li>
<li>
<p>右键单击 <strong>JDBC</strong> 连接字符串的突出显示内容并单击“复制”。</p>
</li>
<li>
<p>您现在可以将此值粘贴到代码文件中以创建以下形式的连接字符串。将 <em>your_server</em>（在两个位置中）替换为在上一步中复制的文本，并将 <em>your_password</em> 替换为创建 SQL Database 帐户时指定的密码值。（如果未使用 <strong>gettingstarted</strong> 和 <strong>MySQLAdmin</strong>，则还要分别替换分配给 <strong>database=</strong> 和 <strong>user=</strong> 的值。）</p>
<p>jdbc:sqlserver://<em>your_server</em>;database=gettingstarted;user=MySQLAdmin@<em>your_server</em>;password=<em>your_password</em>;encrypt=true;hostNameInCertificate=*.int.mscds.com;loginTimeout=30;</p>
</li>
</ol>
<p>我们实际上会在本指南的后面使用此字符串，您目前知道了确定连接字符串的步骤。此外，根据您的应用程序需求，您可能不需要使用 <strong>encrypt</strong> 和 <strong>hostNameInCertificate</strong> 设置，并可能需要修改 <strong>loginTimeout</strong> 设置。</p>
<h2><a id="specify_allowed_ips"></a>允许访问一系列 IP 地址</h2>
<ol>
<li>登录到<a href="https://manage.windowsazure.cn">管理门户</a>。</li>
<li>单击“SQL Database”。</li>
<li>单击“服务器”。</li>
<li>单击要使用的服务器。</li>
<li>单击“管理”。</li>
<li>单击“配置”。</li>
<li>
<p>在“允许的 IP 地址”下，输入新 IP 规则的名称。指定 IP 地址的开始和结束范围。为方便起见，将会显示当前的客户端 IP 地址。以下示例允许使用单个客户端 IP 地址（您的 IP 将与此不同）。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/java/wa_allowed_ips.png" alt="“允许的 IP 地址”对话框"/></p>
</li>
<li>
<p>单击“完成”按钮。您指定的 IP 地址现在将可以访问您的数据库服务器。</p>
</li>
</ol>
<h2><a id="use_sql_azure_in_java"></a>通过 Java 使用 Windows Azure SQL Database</h2>
<ol>
<li>创建一个 Java 项目。在本教程中，将该项目命名为 <strong>HelloSQLAzure</strong>。</li>
<li>将名为 <strong>HelloSQLAzure.java</strong> 的 Java 类文件添加到该项目。</li>
<li>
<p>将 <strong>Microsoft JDBC Driver for SQL Server</strong> 添加到生成路径。</p>
<p> </p>
<p>如果使用了 Eclipse</p>
<ol>
<li>在 Eclipse 的项目资源管理器中，右键单击 <strong>HelloSQLAzure</strong> 项目并单击“属性”。</li>
<li>在“属性”对话框的左侧窗格中，单击“Java 生成路径”。</li>
<li>单击“库”选项卡，然后单击“添加库”。</li>
<li>在“添加库”对话框中，选择“Microsoft JDBC Driver 4.0 for SQL Server”，单击“下一步”，然后单击“完成”。</li>
<li>单击“确定”以关闭“属性”对话框。</li>
</ol>
<p> </p>
<p>如果未使用 Eclipse</p>
<ol>
<li>将 Microsoft JDBC Driver 4.0 for SQL Server JAR 添加到类路径。若要了解相关信息，请参阅<a href="http://msdn.microsoft.com/zh-cn/library/ms378526.aspx">使用 JDBC Driver</a>。</li>
</ol></li>
<li>
<p>在 <strong>HelloSQLAzure.java</strong> 代码中，添加 <code>import</code> 语句，如下所示：</p>
<pre class="prettyprint">import java.sql.*;
import com.microsoft.sqlserver.jdbc.*;</pre>
</li>
<li>
<p>指定连接字符串。下面是一个示例。如上所述，将 <em>your_server</em>（在两个位置中）、<em>your_user</em> 和 <em>your_password</em> 替换为适合您的 SQL Database 服务器的值。</p>
<pre class="prettyprint">String connectionString =
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=master" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";</pre>
</li>
</ol>
<p>您现在已准备好添加与 SQL Database 服务器通信的代码。</p>
<h2><a id="communicate_from_code"></a>通过代码与 Windows Azure SQL Database 通信</h2>
<p>本主题剩下的部分将显示执行以下操作的示例：</p>
<ol>
<li>连接到 SQL Database 服务器。</li>
<li>定义 SQL 语句，例如，创建或删除表、插入/选择/删除行，等等。</li>
<li>通过调用 <strong>executeUpdate</strong> 或 <strong>executeQuery</strong> 执行 SQL 语句。</li>
<li>在适当的时候显示查询结果。</li>
</ol>
<p>以下各节需要按顺序阅读（举例）。第一个代码段是一个完整示例；其他代码段将依赖于完整示例中的部分框架，例如 <strong>import</strong> 语句、<strong>class</strong> 和 <strong>main</strong> 声明、错误处理和资源关闭。</p>
<h2><a id="to_create_table"></a>创建表</h2>
<p>以下代码演示了如何创建名为 <strong>Person</strong> 的表。</p>
<pre class="prettyprint">import java.sql.*;
import com.microsoft.sqlserver.jdbc.*;

public class HelloSQLAzure {

    public static void main(String[] args) 
    {

        // Connection string for your SQL Database server.
        // Change the values assigned to your_server, 
        // your_user@your_server,
        // and your_password.
        String connectionString = 
            "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
                "database=gettingstarted" + ";" + 
                "user=your_user@your_server" + ";" +  
                "password=your_password";

        // The types for the following variables are
        // defined in the java.sql library.
        Connection connection = null;  // For making the connection
        Statement statement = null;    // For the SQL statement
        ResultSet resultSet = null;    // For the result set, if applicable

        try
        {
            // Ensure the SQL Server driver class is available.
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // Establish the connection.
            connection = DriverManager.getConnection(connectionString);

            // Define the SQL string.
            String sqlString = 
                "CREATE TABLE Person (" + 
                    "[PersonID] [int] IDENTITY(1,1) NOT NULL," +
                    "[LastName] [nvarchar](50) NOT NULL," + 
                    "[FirstName] [nvarchar](50) NOT NULL)";

            // Use the connection to create the SQL statement.
            statement = connection.createStatement();

            // Execute the statement.
            statement.executeUpdate(sqlString);

            // Provide a message when processing is complete.
            System.out.println("Processing complete.");

        }
        // Exception handling
        catch (ClassNotFoundException cnfe)  
        {

            System.out.println("ClassNotFoundException " +
                               cnfe.getMessage());
        }
        catch (Exception e)
        {
            System.out.println("Exception " + e.getMessage());
            e.printStackTrace();
        }
        finally
        {
            try
            {
                // Close resources.
                if (null != connection) connection.close();
                if (null != statement) statement.close();
                if (null != resultSet) resultSet.close();
            }
            catch (SQLException sqlException)
            {
                // No additional action if close() statements fail.
            }
        }

    }

}</pre>
<h2><a id="to_create_index"></a>在表中创建索引</h2>
<p>以下代码演示了如何使用 <strong>PersonID</strong> 列在 <strong>Person</strong> 表中创建名为 <strong>index1</strong> 的索引。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "CREATE CLUSTERED INDEX index1 " + "ON Person (PersonID)";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_insert_rows"></a>插入行</h2>
<p>以下代码演示了如何将行添加到 <strong>Person</strong> 表。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "SET IDENTITY_INSERT Person ON " + 
            "INSERT INTO Person " + 
            "(PersonID, LastName, FirstName) " + 
            "VALUES(1, 'Abercrombie', 'Kim')," + 
                  "(2, 'Goeschl', 'Gerhard')," + 
                  "(3, 'Grachev', 'Nikolay')," + 
                  "(4, 'Yee', 'Tai')," + 
                  "(5, 'Wilson', 'Jim')";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_retrieve_rows"></a>检索行</h2>
<p>以下代码演示了如何从 <strong>Person</strong> 表中检索行。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = "SELECT TOP 10 * FROM Person";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    resultSet = statement.executeQuery(sqlString);

    // Loop through the results
    while (resultSet.next())
    {
        // Print out the row data
        System.out.println(
            "Person with ID " + 
            resultSet.getString("PersonID") + 
            " has name " +
            resultSet.getString("FirstName") + " " +
            resultSet.getString("LastName"));
        }

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<p>上面的代码从 <strong>Person</strong> 表中选择了前 10 行。如果要返回所有行，请将 SQL 语句修改为以下形式：</p>
<pre class="prettyprint">String sqlString = "SELECT * FROM Person";</pre>
<h2><a id="to_retrieve_rows_using_where"></a>使用 WHERE 子句检索行</h2>
<p>若要使用一个子句检索行，请使用上面所示的代码，只不过要将 SQL 语句更改为包含一个子句。以下 SQL 语句包含一个用于检索其 <strong>FirstName</strong> 值等于 <strong>Jim</strong> 的行的子句。</p>
<pre class="prettyprint">// Define the SQL string.
String sqlString = "SELECT * FROM Person WHERE FirstName='Jim'";</pre>
<p>还可以在检索计数、更新行或删除行时使用 WHERE 子句。</p>
<h2><a id="to_retrieve_row_count"></a>检索行的计数</h2>
<p>以下代码演示了如何从 <strong>Person</strong> 表中检索行的计数。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

// Define the SQL string.
    String sqlString = "SELECT COUNT (PersonID) FROM Person";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    resultSet = statement.executeQuery(sqlString);

    // Print out the returned number of rows.
    while (resultSet.next())
    {
        System.out.println("There were " + 
                         resultSet.getInt(1) +
                         " rows returned.");
    }

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_update_rows"></a>更新行</h2>
<p>以下代码演示了如何更新行。在此示例中，<strong>FirstName</strong> 值为 <strong>Jim</strong> 的所有行的 <strong>LastName</strong> 值将更改为 <strong>Kim</strong>。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "UPDATE Person " + "SET LastName = 'Kim' " + "WHERE FirstName='Jim'";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}// Exception handling and resource closing not shown...</pre>
<h2><a id="to_delete_rows"></a>删除行</h2>
<p>以下代码演示了如何删除行。在此示例中，将删除 <strong>FirstName</strong> 值为 <strong>Jim</strong> 的所有行。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "DELETE from Person " + 
            "WHERE FirstName='Jim'";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_check_table_existence"></a>检查表是否存在</h2>
<p>以下代码演示了如何确定某个表是否存在。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "IF EXISTS (SELECT 1 " +
            "FROM sysobjects " + 
            "WHERE xtype='u' AND name='Person') " +
            "SELECT 'Person table exists.'" +
            "ELSE  " +
            "SELECT 'Person table does not exist.'";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    resultSet = statement.executeQuery(sqlString);

    // Display the result.
    while (resultSet.next())
    {
        System.out.println(resultSet.getString(1));
    }

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_drop_index"></a>删除索引</h2>
<p>以下代码演示了如何在 <strong>Person</strong> 表上删除名为 <strong>index1</strong> 的索引。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +
        "database=gettingstarted" + ";" +
        "user=your_user@your_server" + ";" +
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = 
        "DROP INDEX index1 " + 
            "ON Person";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="to_drop_table"></a>删除表</h2>
<p>以下代码演示了如何删除名为 <strong>Person</strong> 的表。</p>
<pre class="prettyprint">// Connection string for your SQL Database server.
// Change the values assigned to your_server, 
// your_user@your_server,
// and your_password.
String connectionString = 
    "jdbc:sqlserver://your_server.devdatabase.chinacloudapi.cn:1433" + ";" +  
        "database=gettingstarted" + ";" + 
        "user=your_user@your_server" + ";" +  
        "password=your_password";

// The types for the following variables are
// defined in the java.sql library.
Connection connection = null;  // For making the connection
Statement statement = null;    // For the SQL statement
ResultSet resultSet = null;    // For the result set, if applicable

try
{
    // Ensure the SQL Server driver class is available.
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

    // Establish the connection.
    connection = DriverManager.getConnection(connectionString);

    // Define the SQL string.
    String sqlString = "DROP TABLE Person";

    // Use the connection to create the SQL statement.
    statement = connection.createStatement();

    // Execute the statement.
    statement.executeUpdate(sqlString);

    // Provide a message when processing is complete.
    System.out.println("Processing complete.");

}
// Exception handling and resource closing not shown...</pre>
<h2><a id="using_in_azure"></a>在 Windows Azure 部署中通过 Java 使用 SQL Database</h2>
<p>若要在 Windows Azure 部署中通过 Java 使用 SQL Database，除了将 Microsoft JDBC Driver 4.0 for SQL Server 作为类路径中的库（如前面所述）之外，还需要将它与您的部署一起打包。</p>
<p><strong>在使用 Eclipse 的情况下打包 Microsoft JDBC Driver 4.0 SQL Server</strong></p>
<ol>
<li>在 Eclipse 的项目资源管理器中，右键单击您的项目并单击“属性”。</li>
<li>在“属性”对话框的左侧窗格中，单击“部署程序集”，然后单击“添加”。</li>
<li>在“新建程序集指令”对话框中，单击“Java 生成路径项”，然后单击“下一步”。</li>
<li>选择“Microsoft JDBC Driver 4.0 SQL Server”，然后单击“完成”。</li>
<li>单击“确定”以关闭“属性”对话框。</li>
<li>按照<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh690944.aspx">使用 Azure Plugin for Eclipse with Java（由 Microsoft Open Technologies 提供）创建 Hello World 应用程序</a>中所述的步骤，将项目的 WAR 文件导入到 approot 文件夹，然后重新生成 Azure 项目。本主题还介绍了如何在计算仿真程序和 Windows Azure 中运行应用程序。</li>
</ol>
<p><strong>在未使用 Eclipse 的情况下打包 Microsoft JDBC Driver 4.0 SQL Server</strong></p>
<ul>
<li>确保已将 Microsoft JDBC Driver 4.0 SQL Server 库包含在与 Java 应用程序相同的 Azure 角色中，并且已将其添加到您的应用程序的类路径。</li>
</ul>
<h2><a id="nextsteps"></a>后续步骤</h2>
<p>若要了解有关 Microsoft JDBC Driver for SQL Server 的详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/ms378749.aspx">JDBC 驱动程序概述</a>。若要了解有 SQL Database 的详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/ee336241.aspx">SQL Database 概述</a>。</p>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>如何使用 SQL Azure (Java) - Windows Azure 功能指南</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>develop-java-sql-azure</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[了解如何从 Java 代码使用 Windows Azure SQL Database。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>SQL Database</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>