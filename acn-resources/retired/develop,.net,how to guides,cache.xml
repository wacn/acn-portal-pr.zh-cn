<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18813" parentID="18423" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="5" createDate="2013-07-11T10:39:20" updateDate="2014-08-18T11:09:06" nodeName="cache" urlName="cache" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18423,18813" isDoc=""><bodyText><![CDATA[<!--?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>如何使用 Windows Azure Caching</h1>
<p>本指南演示如何开始使用 <strong>Windows Azure Caching</strong>。相关示例用 C# 代码编写且使用 .NET API。涉及的应用场景包括配置缓存群集、配置缓存客户端、在缓存中添加和删除对象、在缓存中存储 ASP.NET 会话状态以及使用缓存启用 ASP.NET 页面输出缓存。有关使用 Windows Azure Caching 的更多信息，请参见<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-is">什么是 Windows Azure Caching？</a></li>
<li><a href="#getting-started-cache-role-instance">Windows Azure Caching 入门</a>
<ul>
<li><a href="#enable-caching">配置缓存群集</a></li>
<li><a href="#NuGet">配置缓存客户端</a></li>
</ul>
</li>
<li><a href="#working-with-caches">使用缓存</a>
<ul>
<li><a href="#create-cache-object">如何：创建 DataCache 对象</a></li>
<li><a href="#add-object">如何：在缓存中添加和检索对象</a></li>
<li><a href="#specify-expiration">如何：在缓存中指定对象的有效期</a></li>
<li><a href="#store-session">如何：在缓存中存储 ASP.NET 会话状态</a></li>
<li><a href="#store-page">如何：在缓存中存储 ASP.NET 页面输出缓存</a></li>
</ul>
</li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<h2><a name="what-is"></a> <span class="short-header">什么是 Windows Azure Caching？ </span></h2>
<p>Windows Azure Caching 为您的 Windows Azure 应用程序提供了缓存层。Caching 通过将来自其他后端源的信息暂时存储在内存中来提高性能，并且可以降低云中与数据库事务相关的成本。Windows Azure Caching 包含以下功能：</p>
<ul>
<li>为会话状态和页面输出缓存预生成 ASP.NET 提供程序，这样无需修改应用程序代码即可启用 Web 应用程序加速。</li>
<li>缓存任何可序列化的托管对象 - 例如：CLR 对象、行、XML、二进制数据。</li>
<li>跨 Windows Azure 和 Windows Server AppFabric 实现一致的开发模型。</li>
</ul>
<p>Windows Azure Caching 通过使用在 Windows Azure 云服务（又称为托管服务）中承载角色实例的虚拟机的一部分内存，引入了执行缓存的新方法。您将可以采用更加灵活的部署方式，缓存的大小会非常大，并且没有特定于缓存的配额限制。</p>
<p>角色实例中的缓存具有以下优势：</p>
<ul>
<li>无需为缓存付费。您只需为承载缓存的计算资源付费。</li>
<li>消除了缓存配额和限制。</li>
<li>提供了更强的控制和隔离措施。</li>
<li>提高了性能。</li>
<li>在向内或向外扩展角色时，会自动调整缓存大小。在添加或删除角色实例时，有效地向上或向下扩展可用于缓存的内存。</li>
<li>提供了完全无损的开发时调试。</li>
<li>支持 memcache 协议。</li>
</ul>
<p>另外，角色实例中的缓存还提供以下可配置选项：</p>
<ul>
<li>为缓存配置专用角色，或使缓存在现有角色中共存。</li>
<li>使缓存可供同一云服务部署中的多个客户端使用。</li>
<li>创建多个具有不同属性的命名缓存。</li>
<li>可以选择在单个缓存上配置高可用性。</li>
<li>使用扩展的缓存功能，例如区域、标记和通知。</li>
</ul>
<p>本指南提供了 Windows Azure Caching 入门概述。有关超出本入门指南范围的那些功能的更多详细信息，请参见 <a href="http://go.microsoft.com/fwlink/?LinkId=254172">Windows Azure Caching 概述</a>。</p>
<h2><a name="getting-started-cache-role-instance"></a> <span class="short-header">Windows Azure Caching 入门 </span></h2>
<p>Windows Azure Caching 提供了一种使用承载角色实例的虚拟机上的内存来进行缓存的方法。承载缓存的角色实例称为<strong>缓存群集</strong>。<strong>专用角色</strong>缓存 - 这些角色实例专用于缓存。</p>
<p>若要在角色实例中使用缓存，您需要配置缓存群集，然后配置缓存客户端以便它们可以访问缓存群集。</p>
<ul>
<li><a href="#enable-caching">配置缓存群集</a></li>
<li><a href="#NuGet">配置缓存客户端</a></li>
</ul>
<h2><a name="enable-caching"></a> <span class="short-header">配置缓存群集 </span></h2>
<p>若要配置<strong>专用角色</strong>缓存群集，请向项目中添加<strong>缓存辅助角色</strong>。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache14.png" alt="RoleCache7"/></p>
<p>在向项目中添加<strong>缓存辅助角色</strong>后，默认配置是<strong>专用角色</strong>缓存。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache15.png" alt="RoleCache8"/></p>
<p>在启用缓存后，可以配置缓存群集存储帐户。Windows Azure Caching 需要 Windows Azure 存储帐户。此存储帐户用于保存从组成缓存群集的所有虚拟机访问的缓存群集的相关配置数据。此存储帐户在缓存群集角色属性页的“缓存”选项卡上的“命名缓存设置”上方指定。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache17.png" alt="RoleCache10"/></p>
<blockquote>
<p>如果没有配置此存储帐户，则角色将无法启动。</p>
</blockquote>
<p>缓存的大小由角色的 VM 大小、角色的实例计数共同决定。</p>
<blockquote>
<p>本节提供了有关配置缓存大小的简单概述。有关缓存大小及其他容量规划注意事项的更多信息，请参见 <a href="http://go.microsoft.com/fwlink/?LinkId=252651">Windows Azure Caching 容量规划注意事项</a>。</p>
</blockquote>
<p>若要配置虚拟机大小和角色实例数，请在“解决方案资源管理器”中右键单击角色属性，然后选择“属性”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache8.png" alt="RoleCache1"/></p>
<p>切换到“配置”选项卡。默认的“实例计数”为 1，默认的“VM 大小”为“小型”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache10.png" alt="RoleCache3"/></p>
<p>VM 大小的总内存如下：</p>
<ul>
<li><strong>小型</strong>：1.75 GB</li>
<li><strong>中型</strong>：3.5 GB</li>
<li><strong>大型</strong>：7 GB</li>
<li><strong>超大型</strong>：14 GB</li>
</ul>
<blockquote>
<p>这些内存大小表示可用于跨 OS、缓存进程、缓存数据和应用程序共享的 VM 的内存总量。有关配置虚拟机大小的更多信息，请参见<a href="http://go.microsoft.com/fwlink/?LinkId=164387">如何配置虚拟机大小</a>。请注意，<strong>特小型</strong> VM 大小不支持缓存。</p>
</blockquote>
<p>在指定<strong>专用角色</strong>缓存后，虚拟机的所有可用内存均用于缓存。如果配置了两个角色实例，将使用虚拟机的组合内存。这构成了缓存群集，其中的可用缓存内存分布在多个角色实例上，但对缓存的客户端显示为单个资源。配置其他角色实例会以相同方式增加缓存大小。若要确定设置所需大小的缓存所需的设置，您可以使用 <a href="http://go.microsoft.com/fwlink/?LinkId=252651">Windows Azure Caching 容量规划注意事项</a>中的容量规划电子表格。</p>
<p>在配置缓存群集后，可以配置缓存客户端以允许访问缓存。</p>
<h2><a name="NuGet"></a> <span class="short-header">配置缓存客户端 </span></h2>
<p>若要访问 Windows Azure Caching 缓存，客户端必须位于同一部署中。如果缓存群集是专用角色缓存群集，则客户端是部署中的其他角色。提供了 NuGet 包，它可用于配置访问缓存的每个客户端角色。若要使用 Caching NuGet 包配置角色以访问缓存群集，请在“解决方案资源管理器”中右键单击角色项目，然后选择“管理 NuGet 包”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache11.png" alt="RoleCache4"/></p>
<p>选择“Windows Azure Caching”，单击“安装”，然后单击“我接受”。</p>
<blockquote>
<p>如果“Windows Azure Caching”没有显示在列表中，请在“联机搜索”文本框中键入 <strong>WindowsAzure.Caching</strong>，然后从结果中选择它。</p>
</blockquote>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache12.png" alt="RoleCache5"/></p>
<p>NuGet 包可执行多项操作：它将所需配置添加到角色的配置文件中，将缓存客户端诊断级别设置添加到 Windows Azure 应用程序的 ServiceConfiguration.cscfg 文件中，并添加所需的程序集引用。</p>
<blockquote>
<p>对于 ASP.NET Web 角色，Caching NuGet 包还将两个注释掉的节添加到 web.config 中。第一个节允许会话状态存储在缓存中，第二个节启用 ASP.NET 页面输出缓存。有关更多信息，请参见<a href="#store-session">如何：在缓存中存储 ASP.NET 会话状态</a>和<a href="#store-page">如何：在缓存中存储 ASP.NET 页面输出缓存</a>。</p>
</blockquote>
<p>NuGet 包将以下配置元素添加到角色的 web.config 或 app.config 中。将 <strong>dataCacheClients</strong> 节和 <strong>cacheDiagnostics</strong> 节添加到 <strong>configSections</strong> 元素之下。如果 <strong>configSections</strong> 元素不存在，则会创建一个作为 <strong>configuration</strong> 元素的子级。</p>
<pre class="prettyprint">&lt;configSections&gt;
  &lt;!-- Existing sections omitted for clarity. --&gt;

  &lt;section name="dataCacheClients" 
           type="Microsoft.ApplicationServer.Caching.DataCacheClientsSection, Microsoft.ApplicationServer.Caching.Core" 
           allowLocation="true" 
           allowDefinition="Everywhere" /&gt;

  &lt;section name="cacheDiagnostics" 
           type="Microsoft.ApplicationServer.Caching.AzureCommon.DiagnosticsConfigurationSection, Microsoft.ApplicationServer.Caching.AzureCommon" 
           allowLocation="true" 
           allowDefinition="Everywhere" /&gt;
&lt;/configSections&gt;</pre>
<p>这些新节包括对 <strong>dataCacheClients</strong> 元素和 <strong>cacheDiagnostics</strong> 元素的引用。这些元素还添加到 <strong>configuration</strong> 元素中。</p>
<pre class="prettyprint">&lt;dataCacheClients&gt;
  &lt;dataCacheClient name="default"&gt;
    &lt;autoDiscover isEnabled="true" identifier="[cache cluster role name]" /&gt;
    &lt;!--&lt;localCache isEnabled="true" sync="TimeoutBased" objectCount="100000" ttlValue="300" /&gt;--&gt;
  &lt;/dataCacheClient&gt;
&lt;/dataCacheClients&gt;
&lt;cacheDiagnostics&gt;
  &lt;crashDump dumpLevel="Off" dumpStorageQuotaInMB="100" /&gt;
&lt;/cacheDiagnostics&gt;</pre>
<p>在添加配置后，将 <strong>[cache cluster role name]</strong> 替换为承载缓存群集的角色的名称。</p>
<blockquote>
<p>如果没有将 <strong>[cache cluster role name]</strong> 替换为承载缓存群集的角色的名称，则在访问缓存时会引发 <strong>TargetInvocationException</strong>，其内部 <strong>DatacacheException</strong> 将显示消息“No such role exists”。</p>
</blockquote>
<p>NuGet 包还将 <strong>ClientDiagnosticLevel</strong> 设置添加到 ServiceConfiguration.cscfg 中的缓存客户端角色的 <strong>ConfigurationSettings</strong> 中。下面的示例是 ServiceConfiguration.cscfg 文件中的 <strong>WebRole1</strong> 节，其 <strong>ClientDiagnosticLevel</strong> 为 1，这是默认的 <strong>ClientDiagnosticLevel</strong>。</p>
<pre class="prettyprint">&lt;Role name="WebRole1"&gt;
  &lt;Instances count="1" /&gt;
  &lt;ConfigurationSettings&gt;
    &lt;!-- Existing settings omitted for clarity. --&gt;
    &lt;Setting name="Microsoft.WindowsAzure.Plugins.Caching.ClientDiagnosticLevel" 
             value="1" /&gt;
  &lt;/ConfigurationSettings&gt;
&lt;/Role&gt;</pre>
<blockquote>
<p>Windows Azure Caching 同时提供了缓存服务器和缓存客户端诊断级别。诊断级别是配置为缓存收集的诊断信息级别的单个设置。有关更多信息，请参见<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh914135.aspx">解决和诊断 Windows Azure Caching 问题</a></p>
</blockquote>
<p>NuGet 包还添加对以下程序集的引用：</p>
<ul>
<li>Microsoft.ApplicationServer.Caching.Client.dll</li>
<li>Microsoft.ApplicationServer.Caching.Core.dll</li>
<li>Microsoft.WindowsFabric.Common.dll</li>
<li>Microsoft.WindowsFabric.Data.Common.dll</li>
<li>Microsoft.ApplicationServer.Caching.AzureCommon.dll</li>
<li>Microsoft.ApplicationServer.Caching.AzureClientHelper.dll</li>
</ul>
<p>如果您的角色是 ASP.NET Web 角色，则还添加以下程序集引用：</p>
<ul>
<li>Microsoft.Web.DistributedCache.dll。</li>
</ul>
<blockquote>
<p>这些程序集位于 C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\2012-10\ref\Caching\ 文件夹中。</p>
</blockquote>
<p>在配置了您的客户端项目的缓存后，您可以使用以下各节中介绍的方法来使用您的缓存。</p>
<h2><a name="working-with-caches"></a> <span class="short-header">使用缓存 </span></h2>
<p>本节中的步骤介绍如何使用缓存执行常见任务。</p>
<ul>
<li><a href="#create-cache-object">如何：创建 DataCache 对象</a></li>
<li><a href="#add-object">如何：在缓存中添加和检索对象</a></li>
<li><a href="#specify-expiration">如何：在缓存中指定对象的有效期</a></li>
<li><a href="#store-session">如何：在缓存中存储 ASP.NET 会话状态</a></li>
<li><a href="#store-page">如何：在缓存中存储 ASP.NET 页面输出缓存</a></li>
</ul>
<h2><a name="create-cache-object"></a>如何：创建 DataCache 对象</h2>
<p>若要以编程方式使用缓存，您需要引用该缓存。将以下代码添加到要从中使用 Windows Azure Caching 的任何文件的顶部：</p>
<pre class="prettyprint">using Microsoft.ApplicationServer.Caching;</pre>
<blockquote>
<p>如果在安装了添加必要引用的 Caching NuGet 包后，Visual Studio 仍不能识别 using 语句中的类型，请确保项目的目标配置文件是 .NET Framework 2.0 或更高版本，并确保选择没有指定<strong>客户端配置文件</strong>的配置文件之一。有关配置缓存客户端的说明，请参见<a href="#NuGet">配置缓存客户端</a>。</p>
</blockquote>
<p>创建 <strong>DataCache</strong> 对象有两种方法。第一种方法是仅创建 <strong>DataCache</strong>，并传入所需缓存的名称。</p>
<pre class="prettyprint">DataCache cache = new DataCache("default");</pre>
<p>在实例化 <strong>DataCache</strong> 后，您可以使用它来与缓存交互，如以下各节中所述。</p>
<p>若要使用第二种方法，请在您的应用程序中使用默认的构造函数创建新的 <strong>DataCacheFactory</strong> 对象。这会导致缓存客户端使用配置文件中的设置。调用新的 <strong>DataCacheFactory</strong> 实例的 <strong>GetDefaultCache</strong> 方法，该方法返回 <strong>DataCache</strong> 对象，或调用 <strong>GetCache</strong> 方法并传入您的缓存的名称。这些方法返回以后可用于以编程方式访问缓存的 <strong>DataCache</strong> 对象。</p>
<pre class="prettyprint">// Cache client configured by settings in application configuration file.
DataCacheFactory cacheFactory = new DataCacheFactory();
DataCache cache = cacheFactory.GetDefaultCache();
// Or DataCache cache = cacheFactory.GetCache("MyCache");
// cache can now be used to add and retrieve items.</pre>
<h2><a name="add-object"></a>如何：在缓存中添加和检索对象</h2>
<p>若要向缓存中添加项，可以使用 <strong>Add</strong> 或 <strong>Put</strong> 方法。<strong>Add</strong> 方法将指定的对象添加到缓存中，并按键参数的值进行键控。</p>
<pre class="prettyprint">// Add the string "value" to the cache, keyed by "item"
cache.Add("item", "value");</pre>
<p>如果缓存中已存在具有相同键的对象，将引发 <strong>DataCacheException</strong> 并显示以下消息：</p>
<blockquote>
<p>ErrorCode:SubStatus:An attempt is being made to create an object with a Key that already exists in the cache.Caching will only accept unique Key values for objects.</p>
</blockquote>
<p>若要检索具有特定键的对象，可以使用 <strong>Get</strong> 方法。如果对象存在，则返回它，如果对象不存在，则返回 null。</p>
<pre class="prettyprint">// Add the string "value" to the cache, keyed by "key"
object result = cache.Get("Item");
if (result == null)
{
    // "Item" not in cache. Obtain it from specified data source
    // and add it.
    string value = GetItemValue(...);
    cache.Add("item", value);
}
else
{
    // "Item" is in cache, cast result to correct type.
}</pre>
<p>如果具有指定键的对象不存在，则 <strong>Put</strong> 方法将该对象添加到缓存中，如果该对象存在，则替换它。</p>
<pre class="prettyprint">// Add the string "value" to the cache, keyed by "item". If it exists,
// replace it.
cache.Put("item", "value");</pre>
<h2><a name="specify-expiration"></a>如何：在缓存中指定对象的有效期</h2>
<p>默认情况下，缓存中的项在放入缓存中 10 分钟后到期。这可在承载缓存群集的角色的角色属性中的“生存时间(分钟)”设置中进行配置。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/cache13.png" alt="RoleCache6"/></p>
<p>有三种类型的“过期类型”：“无”、“绝对”和“可调窗口”。这些类型配置如何使用“生存时间(分钟)”来确定有效期。默认的“过期类型”为“绝对”，这意味着在将项放入缓存中时，记录该项有效期的倒计时器即会启动。在项经过指定的时间后，该项过期。如果指定了“可调窗口”，则在每次访问缓存中的项时，会重置该项的有效期倒计时，并且仅在自上次访问该项后经过指定的一段时间后，该项才会过期。如果指定了“无”，则“生存时间(分钟)”必须设置为“0”，并且项不会过期，只要它们在缓存中就会保持有效。</p>
<p>如果需要比在角色属性中配置的时间更长或更短的超时时间间隔，则可以在缓存中添加或更新项时，使用采用 <strong>TimeSpan</strong> 参数的 <strong>Add</strong> 和 <strong>Put</strong> 的重载来指定特定持续时间。在下面的示例中，将字符串 <strong>value</strong> 添加到缓存中，按 <strong>item</strong> 进行键控，且超时为 30 分钟。</p>
<pre class="prettyprint">// Add the string "value" to the cache, keyed by "item"
cache.Add("item", "value", TimeSpan.FromMinutes(30));</pre>
<p>若要查看缓存中的项的剩余超时时间间隔，可以使用 <strong>GetCacheItem</strong> 方法来检索 <strong>DataCacheItem</strong> 对象，该对象包含有关缓存中项的信息，其中包括剩余超时时间间隔。</p>
<pre class="prettyprint">// Get a DataCacheItem object that contains information about
// "item" in the cache. If there is no object keyed by "item" null
// is returned. 
DataCacheItem item = cache.GetCacheItem("item");
TimeSpan timeRemaining = item.Timeout;</pre>
<h2><a name="store-session"></a>如何：在缓存中存储 ASP.NET 会话状态</h2>
<p>用于 Windows Azure Caching 的会话状态提供程序是用于 ASP.NET 应用程序的进程外存储机制。此提供程序允许您将会话状态存储在 Windows Azure 缓存中而非内存或 SQL Server 数据库中。若要使用 Caching 会话状态提供程序，请首先配置缓存群集，然后使用 Caching NuGet 包配置 ASP.NET 应用程序的缓存，如 <a href="#getting-started-cache-role-instance">Windows Azure Caching 入门</a>中所述。在安装 Caching NuGet 包时，它会在 web.config 中添加一个包含 ASP.NET 应用程序所需配置的注释掉的节，以使用用于 Windows Azure Caching 的会话状态提供程序。</p>
<pre class="prettyprint">&lt;!--Uncomment this section to use Windows Azure Caching for session state caching
&lt;system.web&gt;
  &lt;sessionState mode="Custom" customProvider="AFCacheSessionStateProvider"&gt;
    &lt;providers&gt;
      &lt;add name="AFCacheSessionStateProvider" 
        type="Microsoft.Web.DistributedCache.DistributedCacheSessionStateStoreProvider,
              Microsoft.Web.DistributedCache" 
        cacheName="default" 
        dataCacheClientName="default"/&gt;
    &lt;/providers&gt;
  &lt;/sessionState&gt;
&lt;/system.web&gt;--&gt;</pre>
<blockquote>
<p>如果在安装 Caching NuGet 包后 web.config 没有包含此注释掉的节，请确保从 <a href="http://go.microsoft.com/fwlink/?LinkId=240311">NuGet Package Manager 安装</a>安装了最新的 NuGet Package Manager，然后卸载并重新安装该包。</p>
</blockquote>
<p>若要启用用于 Windows Azure Caching 的会话状态提供程序，请取消注释指定的节。在提供的代码段中指定了默认缓存。若要使用不同的缓存，请在 <strong>cacheName</strong> 属性中指定所需缓存。</p>
<p>有关使用 Caching 服务会话状态提供程序的更多信息，请参见<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg185668.aspx">用于 Windows Azure Caching 的会话状态提供程序</a>。</p>
<h2><a name="store-page"></a>如何：在缓存中存储 ASP.NET 页面输出缓存</h2>
<p>用于 Windows Azure Caching 的输出缓存提供程序是用于输出缓存数据的进程外存储机制。此数据专门用于完整 HTTP 响应（页面输出缓存）。此提供程序插入 ASP.NET 4 中引入的新输出缓存提供程序扩展点。若要使用该输出缓存提供程序，请首先配置缓存群集，然后使用 Caching NuGet 包配置 ASP.NET 应用程序的缓存，如 <a href="#getting-started-cache-role-instance">Windows Azure Caching 入门</a>中所述。在安装 Caching NuGet 包时，它会在 web.config 中添加以下包含 ASP.NET 应用程序所需配置的注释掉的节，以使用用于 Windows Azure Caching 的输出缓存提供程序。</p>
<pre class="prettyprint">&lt;!--Uncomment this section to use Windows Azure Caching for output caching
&lt;caching&gt;
  &lt;outputCache defaultProvider="AFCacheOutputCacheProvider"&gt;
    &lt;providers&gt;
      &lt;add name="AFCacheOutputCacheProvider" 
        type="Microsoft.Web.DistributedCache.DistributedCacheOutputCacheProvider,
              Microsoft.Web.DistributedCache" 
        cacheName="default" 
        dataCacheClientName="default" /&gt;
    &lt;/providers&gt;
  &lt;/outputCache&gt;
&lt;/caching&gt;--&gt;</pre>
<blockquote>
<p>如果在安装 Caching NuGet 包后 web.config 没有包含此注释掉的节，请确保从 <a href="http://go.microsoft.com/fwlink/?LinkId=240311">NuGet Package Manager 安装</a>安装了最新的 NuGet Package Manager，然后卸载并重新安装该包。</p>
</blockquote>
<p>若要启用用于 Windows Azure Caching 的输出缓存提供程序，请取消注释指定的节。在提供的代码段中指定了默认缓存。若要使用不同的缓存，请在 <strong>cacheName</strong> 属性中指定所需缓存。</p>
<p>将 <strong>OutputCache</strong> 指令添加到希望为其缓存输出的每个页面中。</p>
<pre class="prettyprint">&lt;%@ OutputCache Duration="60" VaryByParam="*" %&gt;</pre>
<p>在此示例中，缓存的页面数据将保留在缓存中 60 秒，并且将为每个参数组合缓存不同版本的页面。有关可用选项的更多信息，请参见 <a href="http://go.microsoft.com/fwlink/?LinkId=251979">OutputCache 指令</a>。</p>
<p>有关使用用于 Windows Azure Caching 的输出缓存提供程序的更多信息，请参见<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg185662.aspx">用于 Windows Azure Caching 的输出缓存提供程序</a>。</p>
<h2><a name="next-steps"></a> <span class="short-header">后续步骤 </span></h2>
<p>现在，您已了解 Windows Azure Caching 的基础知识，单击下面的链接可了解如何执行更复杂的缓存任务。</p>
<ul>
<li>查看 MSDN 参考：
<ul>
<li><a href="http://go.microsoft.com/fwlink/?LinkId=252658">Windows Azure Caching</a></li>
</ul>
</li>
<li>访问<a href="http://blogs.msdn.com/b/windowsazure/">团队博客</a></li>
<li>观看有关 <a href="http://go.microsoft.com/fwlink/?LinkId=252658">Windows Azure Caching</a> 的培训视频。</li>
</ul>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>cache</pageTitle><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><linkid>cache</linkid><urlDisplayName>cache</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>