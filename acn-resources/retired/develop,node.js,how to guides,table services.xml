<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18997" parentID="18995" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="2" createDate="2013-07-11T11:15:30" updateDate="2014-08-18T11:17:12" nodeName="Table Services" urlName="table-services" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,18995,18997" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO modalpopup="0" chunkurl="" chunkname="article-left-menu" hide="0" chunkpath="devcenter/node" modaltrigger="" macroAlias="AzureChunkDisplayer" />
<h1>如何从 Node.js 使用表服务</h1>
<p>本指南演示如何使用 Windows Azure 表服务执行常见任务。相关示例是使用 Node.js API 编写的。涉及的任务包括<strong>创建和删除表、在表中插入和查询实体</strong>。有关表的详细信息，请参阅<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-is">什么是表服务？</a></li>
<li><a href="#concepts">概念</a></li>
<li><a href="#create-account">创建 Windows Azure 存储帐户</a></li>
<li><a href="#create-app">创建 Node.js 应用程序</a></li>
<li><a href="#configure-access">配置应用程序以访问存储</a></li>
<li><a href="#setup-connection-string">设置 Windows Azure 存储连接</a></li>
<li><a href="#create-table">如何：创建表</a></li>
<li><a href="#add-entity">如何：向表中添加实体</a></li>
<li><a href="#update-entity">如何：更新实体</a></li>
<li><a href="#change-entities">如何：使用实体组</a></li>
<li><a href="#query-for-entity">如何：查询实体</a></li>
<li><a href="#query-set-entities">如何：查询实体集</a></li>
<li><a href="#query-entity-properties">如何：查询实体属性子集</a></li>
<li><a href="#delete-entity">如何：删除实体</a></li>
<li><a href="#delete-table">如何：删除表</a></li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<h2><a name="what-is"></a>什么是表服务？</h2>
<p>Windows Azure 表服务存储大量结构化数据。该服务接受来自 Windows Azure 云内部和外部经过验证的呼叫。Windows Azure 表最适合存储结构化非关系型数据。表服务的常见用途包括：</p>
<ul>
<li>存储大量自动缩放以满足吞吐量需求的结构化数据（TB 级）</li>
<li>存储无需复杂联接、外键或存储过程，并且可以对其进行非规范化以实现快速访问的数据集</li>
<li>使用聚集索引快速查询数据（如用户配置文件）</li>
</ul>
<p>您可以使用表服务来存储和查询大型结构化、非关系数据集，并且您的表会随着数据量的增加而扩展。</p>
<h2><a name="concepts"></a>概念</h2>
<p>表服务包含以下组件：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/table1.png" alt="表 1"/></p>
<ul>
<li>
<p><strong>URL 格式：</strong> 代码使用此地址格式寻址帐户中的表：<br /> http://storageaccount.table.core.chinacloudapi.cn/table</p>
<p>您可以直接使用此地址和 OData 协议寻址 Azure 表。有关详细信息，请参阅 <a href="http://www.odata.org/">OData.org</a></p>
</li>
<li>
<p><strong>存储帐户：</strong> 对 Windows Azure 存储服务进行的所有访问都要通过存储帐户完成。一个存储帐户中 Blob、表和队列内容的总大小不能超过 100 TB。</p>
</li>
<li>
<p><strong>表</strong>：表是实体的无限集合。表不对实体强制实施架构，这意味着单个表可以包含具有不同属性集的实体。一个帐户可以包含多个表。</p>
</li>
<li>
<p><strong>实体</strong>：与数据库行类似，一个实体就是一组属性。一个实体的大小可达 1 MB。</p>
</li>
<li>
<p><strong>属性</strong>：属性是名称/值对。每个实体最多可包含 252 个用于存储数据的属性。每个实体还具有三个系统属性，分别指定分区键、行键和时间戳。对具有相同分区键的实体的查询速度将更快，并且可以在原子操作中插入/更新这些实体。一个实体的行键是它在一个分区内的唯一标识符。</p>
</li>
</ul>
<h2><a name="create-account"></a>创建 Windows Azure 存储帐户</h2>
<p>若要执行存储操作，您需要一个 Windows Azure 存储帐户。可通过以下步骤创建存储帐户。（也可以<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh264518.aspx">使用 REST API</a> 创建存储帐户。）</p>
<ol>
<li>
<p>登录到 <a href="http://manage.windowsazure.cn">Windows Azure 管理门户</a>。</p>
</li>
<li>
<p>在导航窗格的底部，单击“+新建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/plus-new.png" alt="+新建"/></p>
</li>
<li>
<p>单击“存储帐户”，然后单击“快速创建”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/quick-storage.png" alt="“快速创建”对话框"/></p>
</li>
<li>
<p>在 URL 中，键入要在存储帐户的 URI 中使用的子域名称。输入的名称可包含 3-24 个小写字母和数字。此值将成为用于对订阅的 Blob、队列或表资源进行寻址的 URI 中的主机名。</p>
</li>
<li>
<p>选择要在其中查找存储的区域/地缘组。如果要使用 Windows Azure 应用程序中的存储，请选择要在其中部署该应用程序的区域。</p>
</li>
<li>
<p>单击“创建存储帐户”。</p>
</li>
</ol>
<h2><a name="create-app"></a>创建 Node.js 应用程序</h2>
<p>创建空白 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅<a href="/zh-cn/develop/nodejs/tutorials/create-a-website-(mac)/">创建 Node.js 应用程序并将其部署到 Windows Azure 网站</a>、<a href="{localLink:2221}" title="使用 Express 构建 Web 应用程序">Node.js 云服务</a>（使用 Windows PowerShell）或<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-webmatrix/">使用 WebMatrix 构建网站</a>。</p>
<h2><a name="configure-access"></a>配置应用程序以访问存储</h2>
<p>要使用 Windows Azure 存储，您需要下载和使用 Node.js azure 包，其中包括一组便于与存储 REST 服务进行通信的库。</p>
<h3>使用 Node 包管理器 (NPM) 可获取该程序包</h3>
<ol>
<li>
<p>使用 <strong>PowerShell</strong> (Windows)、<strong>Terminal</strong> (Mac) 或 <strong>Bash</strong> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。</p>
</li>
<li>
<p>在命令窗口中键入 <strong>npm install azure</strong>，这应该产生以下输出：</p>
<pre class="prettyprint">azure@0.6.0 ./node_modules/azure
├── easy-table@0.0.1
├── dateformat@1.0.2-1.2.3
├── xmlbuilder@0.3.1
├── eyes@0.1.7
├── colors@0.6.0-1
├── mime@1.2.5
├── log@1.3.0
├── commander@0.6.1
├── node-uuid@1.2.0
├── xml2js@0.1.14
├── async@0.1.22
├── tunnel@0.0.1
├── underscore@1.3.3
├── qs@0.5.0
├── underscore.string@2.2.0rc
├── sax@0.4.0
├── streamline@0.2.4
└── winston@0.6.1 (cycle@1.0.0, stack-trace@0.0.6, pkginfo@0.2.3, request@2.9.202)</pre>
</li>
<li>
<p>可以手动运行 <strong>ls</strong> 命令来验证是否创建了 <strong>node_modules</strong> 文件夹。在该文件夹中，您将找到 <strong>azure</strong> 包，其中包含访问存储所需的库。</p>
</li>
</ol>
<h3>导入包</h3>
<p>使用记事本或其他文本编辑器将以下内容添加到您要在其中使用存储的应用程序的 <strong>server.js</strong> 文件的顶部：</p>
<pre class="prettyprint">var azure = require('azure');</pre>
<h2><a name="setup-connection-string"></a>设置 Windows Azure 存储连接</h2>
<p>azure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 以获取连接到您的 Windows Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 <strong>TableService</strong> 时必须指定帐户信息。</p>
<p>有关在 Windows Azure 云服务的配置文件中设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-app-with-storage/">使用存储构建 Node.js 云服务</a>。</p>
<p>有关在管理门户中为 Windows Azure 网站设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-storage/">使用存储构建 Node.js Web 应用程序</a></p>
<h2><a name="create-table"></a>如何创建表</h2>
<p>以下代码将创建 <strong>TableService</strong> 对象并使用它创建新表。将以下内容添加到 <strong>server.js</strong> 顶部附近。</p>
<pre class="prettyprint">var tableService = azure.createTableService();</pre>
<p>如果指定的表存在，则调用 <strong>createTableIfNotExists</strong> 将返回指定的表，如果不存在，则使用指定的名称创建一个新表。下面的示例创建一个名为“mytable”的新表（如果该表尚不存在）：</p>
<pre class="prettyprint">tableService.createTableIfNotExists('mytable', function(error){
    if(!error){
        // Table exists or created
    }
});</pre>
<h2><a name="add-entity"></a>如何将实体添加到表</h2>
<p>要添加实体，应先创建一个定义实体属性及其数据类型的对象。请注意，对于每个实体，必须指定 <strong>PartitionKey</strong> 和 <strong>RowKey</strong>。这些值是实体的唯一标识符，并且查询它们比查询其他属性快很多。系统使用 <strong>PartitionKey</strong> 自动将表的实体分发到多个存储节点上。具有相同 <strong>PartitionKey</strong> 的实体存储在同一个节点上。<strong>RowKey</strong> 是实体在其所属分区内的唯一 ID。要将实体添加到表中，应将实体对象传递给 <strong>insertEntity</strong> 方法。</p>
<pre class="prettyprint">var task = {
    PartitionKey : 'hometasks'
    , RowKey : '1'
    , Description : 'Take out the trash'
    , DueDate: new Date(2012, 6, 20)
};
tableService.insertEntity('mytable', task, function(error){
    if(!error){
        // Entity inserted
    }
});</pre>
<h2><a name="update-entity"></a>如何更新实体</h2>
<p>可使用多种方法来更新现有实体：</p>
<ul>
<li>
<p><strong>updateEntity</strong> - 通过替换现有实体来更新现有实体。</p>
</li>
<li>
<p><strong>mergeEntity</strong> - 通过将新属性值合并到现有实体来更新现有实体。</p>
</li>
<li>
<p><strong>insertOrReplaceEntity</strong> - 通过替换现有实体来更新现有实体。如果不存在实体，将插入一个新实体。</p>
</li>
<li>
<p><strong>insertOrMergeEntity</strong> - 通过将新属性值合并到现有实体来更新现有实体。如果不存在实体，将插入一个新实体。</p>
</li>
</ul>
<p>以下示例演示使用 <strong>updateEntity</strong> 更新实体：</p>
<pre class="prettyprint">var task = {
    PartitionKey : 'hometasks'
    , RowKey : '1'
    , Description : 'Wash Dishes'
}
tableService.updateEntity('mytable', task, function(error){
    if(!error){
        // Entity has been updated
    }
});</pre>
<p>对于 <strong>updateEntity</strong> 和 <strong>mergeEntity</strong>，如果待更新的实体不存在，则更新操作失败。因此，如果您希望存储某个实体而不考虑它是否已存在，则应改用 <strong>insertOrReplaceEntity</strong> 或 <strong>insertOrMergeEntity</strong>。</p>
<h2><a name="change-entities"></a>如何使用实体组</h2>
<p>有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。要完成此操作，可以对 <strong>TableService</strong> 使用 <strong>beginBatch</strong> 方法，然后像通常一样调用操作系列。不同之处在于，这些运算符的回调函数将表明该操作已经过批处理，而不提交到服务器。在您确实要按批提交时，则应调用 <strong>commitBatch</strong>。提供给该方法的回调将指示整个批次是否成功提交。下面的示例演示在一个批次中提交两个实体：</p>
<pre class="prettyprint">var tasks=[
    {
        PartitionKey : 'hometasks'
        , RowKey : '1'
        , Description : 'Take out the trash.'
        , DueDate : new Date(2012, 6, 20)
    }
    , {
        PartitionKey : 'hometasks'
        , RowKey : '2'
        , Description : 'Wash the dishes.'
        , DueDate : new Date(2012, 6, 20)
    }
]
tableService.beginBatch();
var async=require('async');

async.forEach(tasks
    , function taskIterator(task, callback){
        tableService.insertEntity('mytable', task, function(error){
            if(!error){
                // Entity inserted
                callback(null);
            } else {
                callback(error);
            }
        });
    }
    , function(error){
        if(!error){
            // All inserts completed
            tableService.commitBatch(function(error){
                if(!error){
                    // Batch successfully commited
                }
            });
        }
    });</pre>
<div class="dev-callout"><strong>注意</strong>
<p>上面的示例使用“异步”模块以确保实体全都在调用**commitBatch**之前成功提交。</p>
</div>
<h2><a name="query-for-entity"></a>如何查询实体</h2>
<p>要查询表中的实体，应使用 <strong>queryEntity</strong> 方法并传递 <strong>PartitionKey</strong> 和 <strong>RowKey</strong>。</p>
<pre class="prettyprint">tableService.queryEntity('mytable'
    , 'hometasks'
    , '1'
    , function(error, entity){
        if(!error){
            // entity contains the returned entity
        }
    });</pre>
<h2><a name="query-set-entities"></a>如何查询实体集</h2>
<p>要查询表，可使用 <strong>TableQuery</strong> 对象通过一些子句构建查询表达式，这些子句有 <strong>select</strong>、<strong>from</strong>、<strong>where</strong>（包括 <strong>wherePartitionKey</strong>、<strong>whereRowKey</strong>、<strong>whereNextPartitionKey</strong> 和 <strong>whereNextRowKey</strong> 等便利子句）、<strong>and</strong>、<strong>or</strong>、<strong>orderBy</strong> 及 <strong>top</strong>。然后将查询表达式传递给 <strong>queryEntities</strong> 方法。您可以在回调内的 <strong>for</strong> 循环中使用结果。</p>
<p>以下示例基于 <strong>PartitionKey</strong> 查找 Seattle 中的所有任务。</p>
<pre class="prettyprint">var query = azure.TableQuery
    .select()
    .from('mytable')
    .where('PartitionKey eq ?', 'hometasks');
tableService.queryEntities(query, function(error, entities){
    if(!error){
        //entities contains an array of entities
    }
});</pre>
<h2><a name="query-entity-properties"></a>如何查询实体属性子集</h2>
<p>对表的查询可以只检索实体中的少数几个属性。此方法称为<em>投影</em>，可减少带宽需求和提高查询性能，尤其适用于大型实体。使用 <strong>select</strong> 子句并传递您希望显示给客户端的属性的名称。</p>
<p>以下代码中的查询只返回表中实体的“说明”，请注意，在程序输出中，<strong>DueDate</strong> 将显示为 <strong>undefined</strong>，因为它不是由服务器发送的。</p>
<div class="dev-callout"><strong>注意</strong>
<p>请注意，下面的代码段只对云存储服务有效，存储仿真程序不支持 select 关键字。</p>
</div>
<pre class="prettyprint">var query = azure.TableQuery
    .select('Description')
    .from('mytable')
    .where('PartitionKey eq ?', 'hometasks');
tableService.queryEntities(query, function(error, entities){
    if(!error){
        //entities contains an array of entities
    }
});</pre>
<h2><a name="delete-entity"></a>如何删除实体</h2>
<p>可以使用实体的分区键和行键删除实体。在本例中，<strong>task1</strong> 对象包含要删除的实体的 <strong>RowKey</strong> 和 <strong>PartitionKey</strong> 值。然后，该对象被传递给 <strong>deleteEntity</strong> 方法。</p>
<pre class="prettyprint">tableService.deleteEntity('mytable'
    , {
        PartitionKey : 'hometasks'
        , RowKey : '1'
    }
    , function(error){
        if(!error){
            // Entity deleted
        }
    });</pre>
<h2><a name="delete-table"></a>如何删除表</h2>
<p>以下代码从存储帐户中删除一个表。</p>
<pre class="prettyprint">tableService.deleteTable('mytable', function(error){
    if(!error){
        // Table deleted
    }
});</pre>
<h2><a name="next-steps"></a>后续步骤</h2>
<p>现在，您已了解表存储的基础知识，单击下面的链接可了解如何执行更复杂的存储任务。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433040.aspx">在 Windows Azure 中存储和访问数据</a>。</li>
<li><a href="http://blogs.msdn.com/b/windowsazurestorage/">访问 Windows Azure 存储团队博客</a>。</li>
<li>访问 GitHub 上的 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Azure SDK for Node</a> 存储库。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>如何使用表存储 (Node.js) - Windows Azure 功能指南</pageTitle><metaKeywords>Windows Azure 表存储服务, Azure 表服务 Node.js, 表存储 Node.js</metaKeywords><metaDescription><![CDATA[了解如何在 Windows Azure 中使用表存储服务。代码示例使用 Node.js API 编写。]]></metaDescription><linkid>dev-nodejs-how-to-table-services</linkid><urlDisplayName>表服务</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>