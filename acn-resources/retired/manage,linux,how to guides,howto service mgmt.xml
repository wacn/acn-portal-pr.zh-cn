<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19198" parentID="19185" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="13" createDate="2013-07-11T11:59:48" updateDate="2014-08-18T11:26:00" nodeName="Howto service mgmt" urlName="howto-service-mgmt" writerName="uRest" creatorName="xunfan" path="-1,11978,12083,19174,19185,19198" isDoc=""><bodyText><![CDATA[<div>
<h1>如何使用服务管理 API</h1>
<h2>初始化</h2>
<?UMBRACO_MACRO hide="0" chunkpath="shared" macroAlias="AzureChunkDisplayer" chunkname="disclaimer" />
<p>若要从 NodeJS 调用 Windows Azure IaaS 服务管理 API，可使用 iaasclient.js 模块。</p>
<pre class="prettyprint">var iaasCient = require('iaasclient');</pre>
<p>首先，创建 IaasClient 的实例。对该 API 的所有调用都将使用此对象。此时会创建订阅 ID、凭据和其他连接选项。若要管理多个订阅，请创建多个 IaasClient。</p>
<pre class="prettyprint">var iaasClient = new IaasClient(subscriptionid, auth, options);</pre>
<ul>
<li>Subscriptionid 是必需字符串。它应是将访问的帐户的订阅 ID。</li>
<li>
<p>Auth 是一个可选对象，该对象指定要与该帐户一起使用的私钥和公用证书。</p>
<ul>
<li>keyfile - 具有私钥的 .pem 文件的文件路径。在指定 keyvalue 时将被忽略。</li>
<li>keyvalue - 存储在 .pem 文件中的私钥的实际值。</li>
<li>certfile - 具有公用证书的 .pem 文件的文件路径。在指定 cervalue 时将被忽略。</li>
<li>certvalue - 存储在 .pem 文件中的公用证书的实际值。</li>
<li>如果未指定上述值，则将读取并使用进程环境变量值 <code>CLIENT_AUTH_KEYFILE</code> 和 <code>CLIENT_AUTH_CERTFILE</code>。如果未设置这些值，则会尝试文件的默认值：priv.pem 和 pub.pem。</li>
<li>如果无法加载私钥和公用证书，则将引发错误。</li>
</ul>
</li>
<li>
<p>Options 是一个可选对象，该对象可用于控制客户端所使用的属性。</p>
<ul>
<li>host - Azure 管理服务器的主机名。如果未指定此属性，则使用默认主机。</li>
<li>apiversion - 用于 HTTP 标头的版本字符串。如果未指定此属性，则使用默认版本。</li>
<li>serializetype - 可以为 XML 或 JSON。如果未指定此属性，则使用默认序列化。</li>
</ul>
</li>
</ul>
<p>（可选）可使用隧道代理以使 HTTPS 请求能够通过代理。创建 IaasClient 后，它将处理环境变量 <code>HTTPS_PROXY</code>。如果将其设置为有效 URL，则可从 URL 解析主机名和端口，并且可在后续请求中使用它们来标识代理。</p>
<pre class="prettyprint">iaasClient.SetProxyUrl(proxyurl)</pre>
<p>可调用 SetProxyUrl 来显式设置代理主机和端口。这与设置 <code>HTTPS_PROXY</code> 环境变量的效果相同，并且将重写环境设置。</p>
<h2>回调</h2>
<p>所有 API 都具有一个必需的回调参数。通过调用已传入回调中的函数来发出请求已完成的信号。</p>
<pre class="prettyprint">callback(rsp)</pre>
<ul>
<li>回调具有一个作为响应对象的参数。</li>
<li>isSuccessful - true 或 false</li>
<li>statusCode - 响应中的 HTTP 状态代码</li>
<li>response - 解析为 javascript 对象的响应。如果 isSuccessful 为 true，则设置此参数。</li>
<li>error - 一个包含错误信息的 javascript 对象。如果 isSuccessful 为 false，则设置此参数。</li>
<li>body - 字符串形式的响应的实际主体</li>
<li>headers - 响应的实际 HTTP 标头</li>
<li>reqopts - 用于发出请求的节点 HTTP 请求选项。</li>
</ul>
<p>请注意，在某些情况下，完成只能指示已接受请求。在此情况下，可使用 <strong>GetOperationStatus</strong> 获取最终状态。</p>
<h2>API</h2>
<p><strong>iaasClient.GetOperationStatus(requested, callback)</strong></p>
<ul>
<li>许多管理调用会在操作完成之前返回。这些调用将返回值“202 已接受”，并在 ms-request-id HTPP 标头中放置请求的值。若要轮询请求的完成情况，请使用此 API 并传入请求的值。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.GetOSImage(imagename, callback)</strong></p>
<ul>
<li>imagename 是映像的必需的字符串名称。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含已命名映像的属性。</li>
</ul>
<p><strong>iaasClient.ListOSImages(callback)</strong></p>
<ul>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含映像对象的数组。</li>
</ul>
<p><strong>iaasClient.CreateOSImage(imageName, mediaLink, imageOptions, callback)</strong></p>
<ul>
<li>imageName 是映像的必需的字符串名称。</li>
<li>mediaLink 是要使用的 mediaLink 的必需的字符串名称。</li>
<li>
<p>imageOptions 是一个可选对象。它可包含下列属性</p>
<ul>
<li>类别</li>
<li>Label - 如果未设置，则默认为 imageName。</li>
<li>位置</li>
<li>RoleSize</li>
</ul>
</li>
<li>
<p>callback 是必需的。（如果未设置 imageOptions，则可能为第三个参数。）</p>
</li>
<li>如果操作成功，则响应对象将包含已创建映像的属性。</li>
</ul>
<p><strong>iaasClient.ListHostedServices(callback)</strong></p>
<ul>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含托管服务对象的数组。</li>
</ul>
<p><strong>iaasClient.GetHostedService(serviceName, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含托管服务的属性。</li>
</ul>
<p><strong>iaasClient.CreateHostedService(serviceName, serviceOptions, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>serviceOptions 是一个可选对象。它可包含下列属性
<ul>
<li>Description - 默认为“Service host”</li>
<li>Label - 如果未设置，则默认为 serviceName。</li>
<li>Location - 默认为“Windows Azure Preview” - 发布后需要更改。</li>
</ul>
</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.GetStorageAccountKeys(serviceName, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含存储访问密钥。</li>
</ul>
<p><strong>iaasClient.GetDeployment(serviceName, deploymentName, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含已命名部署的属性。</li>
</ul>
<p><strong>iaasClient.GetDeploymentBySlot(serviceName, deploymentSlot, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentSlot 是槽的必需的字符串名称（过渡或生产）。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含槽中部署的属性。</li>
</ul>
<p><strong>iaasClient.CreateDeployment(serviceName, deploymentName, VMRole, deployOptions, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>VMRole 是必需的对象，该对象具有要为部署创建的角色的属性。</li>
<li>deployOptions 是一个可选对象。它可包含下列属性
<ul>
<li>DeploymentSlot - 默认为“Production”</li>
<li>Label - 如果未设置，则默认为 deploymentName。</li>
<li>UpgradeDomainCount - 无默认值</li>
</ul>
</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.GetRole(serviceName, deploymentName, roleName, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>callback 是必需的。</li>
<li>如果操作成功，则响应对象将包含已命名角色的属性。</li>
</ul>
<p><strong>iaasClient.AddRole(serviceName, deploymentName, VMRole, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>VMRole 是必需的对象，该对象具有要添加到部署的角色的属性。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.ModifyRole(serviceName, deploymentName, roleName, VMRole, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>VMRole 是必需的对象，该对象具有要在角色中修改的属性。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.DeleteRole(serviceName, deploymentName, roleName, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.AddDataDisk(serviceName, deploymentName, roleName, datadisk, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>Datadisk 是必需的对象，该对象用于指定将创建数据磁盘的方式。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.ModifyDataDisk(serviceName, deploymentName, roleName, LUN, datadisk, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>LUN 是标识数据磁盘的数字</li>
<li>Datadisk 是必需的对象，该对象用于指定将修改数据磁盘的方式。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.RemoveDataDisk(serviceName, deploymentName, roleName, LUN, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleName 是角色的必需的字符串名称。</li>
<li>LUN 是标识数据磁盘的数字</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.ShutdownRoleInstance(serviceName, deploymentName, roleInstance, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleInstance 是角色实例的必需的字符串名称。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.RestartRoleInstance(serviceName, deploymentName, roleInstance, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleInstance 是角色实例的必需的字符串名称。</li>
<li>callback 是必需的。</li>
</ul>
<p><strong>iaasClient.CaptureRoleInstance(serviceName, deploymentName, roleInstance, captOptions, callback)</strong></p>
<ul>
<li>serviceName 是托管服务的必需的字符串名称。</li>
<li>deploymentName 是部署的必需的字符串名称。</li>
<li>roleInstance 是角色实例的必需的字符串名称。</li>
<li>captOptions 是必需的对象，该对象定义捕获操作
<ul>
<li>PostCaptureActions</li>
<li>ProvisioningConfiguration</li>
<li>SupportsStatelessDeployment</li>
<li>TargetImageLabel</li>
<li>TargetImageName</li>
</ul>
</li>
<li>callback 是必需的。</li>
</ul>
<h2>数据对象</h2>
<p>在创建或修改部署、角色或磁盘时，API 会将对象作为输入。其他 API 将返回有关 Get 或 List 操作的类似对象。此部分概述了对象属性。部署</p>
<ul>
<li>Name - 字符串</li>
<li>DeploymentSlot -“过渡”或“生产”</li>
<li>Status - 字符串 - 仅输出</li>
<li>PrivateID - 字符串 - 仅输出</li>
<li>Label - 字符串</li>
<li>UpgradeDomainCount - 数字</li>
<li>SdkVersion - 字符串</li>
<li>Locked - true 或 false</li>
<li>RollbackAllowed - true 或 false</li>
<li>RoleInstance - 对象 - 仅输出</li>
<li>Role - VMRole 对象</li>
<li>InputEndpointList - InputEndpoint 数组</li>
</ul>
<p><strong>VMRole</strong></p>
<ul>
<li>RoleName - 字符串。创建时必需的。</li>
<li>RoleSize - 字符串。创建时可选的。</li>
<li>RoleType - 字符串。如果未在创建中指定，则默认为“PersistentVMRole”。</li>
<li>OSDisk - 对象。创建时必需的</li>
<li>DataDisks - 对象的数组。创建时可选的。</li>
<li>ConfigurationSets - 配置对象的数组。</li>
</ul>
<p><strong>RoleInstance</strong></p>
<ul>
<li>RoleName - 字符串</li>
<li>InstanceName - 字符串</li>
<li>InstanceStatus - 字符串</li>
<li>InstanceUpgradeDomain - 数字</li>
<li>InstanceFaultDomain - 数字</li>
<li>InstanceSize - 字符串</li>
<li>IpAddress - 字符串</li>
</ul>
<p><strong>OSDisk</strong></p>
<ul>
<li>SourceImageName - 字符串。创建时必需的</li>
<li>DisableWriteCache - true 或 false</li>
<li>DiskName - 字符串。</li>
<li>MediaLink - 字符串</li>
</ul>
<p><strong>DataDisk</strong></p>
<ul>
<li>DisableReadCache - true 或 false</li>
<li>EnableWriteCache - true 或 false</li>
<li>DiskName - 字符串</li>
<li>MediaLink - 字符串</li>
<li>LUN - 数字 (0-15)</li>
<li>LogicalDiskSizeInGB - 数字</li>
<li>SourceMediaLink - 字符串</li>
<li>在创建过程中，可通过 3 种方法指定磁盘 - 按名称、按介质或按大小。指定的选项将确定其工作方式。有关详细信息，请参阅 RDFE API 文档。</li>
</ul>
<p><strong>ProvisioningConfiguration</strong></p>
<ul>
<li>ConfigurationSetType -“ProvisioningConfiguration”</li>
<li>AdminPassword - 字符串</li>
<li>MachineName - 字符串</li>
<li>ResetPasswordOnFirstLogon - true 或 false</li>
</ul>
<p><strong>NetworkConfiguration</strong></p>
<ul>
<li>ConfigurationSetType -“NetworkConfiguration”</li>
<li>InputEndpoints - ExternalEndpoints 的数组</li>
</ul>
<p><strong>InputEndpoint</strong></p>
<ul>
<li>RoleName</li>
<li>Vip</li>
<li>Port</li>
</ul>
<p><strong>ExternalEndpoint</strong></p>
<ul>
<li>LocalPort</li>
<li>名称</li>
<li>Port</li>
<li>协议</li>
</ul>
<h2>代码示例</h2>
<p>以下是一个示例 javascript 代码，此代码创建托管服务和部署，然后轮询部署的完成状态。</p>
<pre class="prettyprint">var IaasClient = require('../lib/iaasclient');  // specify where certificate files are located var auth = {   keyfile : '../certs/priv.pem',   certfile : '../certs/pub.pem' }  // names and ids for subscription, service, deployment var subscriptionId = '167a0c69-cb6f-4522-ba3e-d3bdc9c504e1'; var serviceName = 'sampleService2'; var deploymentName = 'sampleDeployment';  // poll for completion every 10 seconds var pollPeriod = 10000;  // data used to define deployment and role  var deploymentOptions = {   DeploymentSlot: 'Staging',   Label: 'Deployment Label' }  var osDisk = {   SourceImageName : 'Win2K8SP1.110809-2000.201108-01.en.us.30GB.vhd', };  var dataDisk1 = {   LogicalDiskSizeInGB : 10,   LUN : 0 };  var provisioningConfigurationSet = {   ConfigurationSetType: 'ProvisioningConfiguration',   AdminPassword: 'myAdminPwd1',   MachineName: 'sampleMach1',   ResetPasswordOnFirstLogon: false };  var externalEndpoint1 = {   Name: 'endpname1',   Protocol: 'tcp',   Port: '59919',   LocalPort: '3395' };  var networkConfigurationSet = {   ConfigurationSetType: 'NetworkConfiguration',   InputEndpoints: [externalEndpoint1] };  var VMRole = {   RoleName: 'sampleRole',   RoleSize: 'Small',   OSDisk: osDisk,   DataDisks: [dataDisk1],   ConfigurationSets: [provisioningConfigurationSet, networkConfigurationSet] }   // function to show error messages if failed function showErrorResponse(rsp) {   console.log('There was an error response from the service');   console.log('status code=' + rsp.statusCode);   console.log('Error Code=' + rsp.error.Code);   console.log('Error Message=' + rsp.error.Message); }  // polling for completion function PollComplete(reqid) {   iaasCli.GetOperationStatus(reqid, function(rspobj) {     if (rspobj.isSuccessful &amp;&amp; rspobj.response) {       var rsp = rspobj.response;       if (rsp.Status == 'InProgress') {         setTimeout(PollComplete(reqid), pollPeriod);         process.stdout.write('.');       } else {         console.log(rsp.Status);         if (rsp.HttpStatusCode) console.log('HTTP Status: ' + rsp.HttpStatusCode);         if (rsp.Error) {                 console.log('Error code: ' + rsp.Error.Code);           console.log('Error Message: ' + rsp.Error.Message);         }       }     } else {       showErrorResponse(rspobj);     }   }); }   // create the client object var iaasCli = new IaasClient(subscriptionId, auth);  // create a hosted service. // if successful, create deployment // if accepted, poll for completion iaasCli.CreateHostedService(serviceName, function(rspobj) {   if (rspobj.isSuccessful) {     iaasCli.CreateDeployment(serviceName,                               deploymentName,                              VMRole, deploymentOptions,                               function(rspobj) {       if (rspobj.isSuccessful) {       // get request id, and start polling for completion         var reqid = rspobj.headers['x-ms-request-id'];         process.stdout.write('Polling');         setTimeout(PollComplete(reqid), pollPeriod);       } else {         showErrorResponse(rspobj);       }     });   } else {     showErrorResponse(rspobj);   } });</pre>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>如何为 VM 使用服务管理 API - Windows Azure</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>manage-linux-howto-service-management-api</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[了解如何为 Linux 虚拟机使用 Windows Azure 服务管理 API。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>服务管理 API</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>