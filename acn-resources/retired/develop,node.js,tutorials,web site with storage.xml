<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19022" parentID="19011" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="11" createDate="2013-07-11T11:17:22" updateDate="2014-08-18T11:17:41" nodeName="Web Site with Storage" urlName="web-site-with-storage" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,19011,19022" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/node" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>使用 Windows Azure 表服务的 Node.js Web 应用程序</h1>
<p>本教程向您演示如何使用 Windows Azure 数据管理提供的表服务在 Windows Azure 上托管的 <a href="http://nodejs.org">Node</a> 应用程序中存储和访问数据。本教程假定您之前使用过 Node 和 <a href="http://git-scm.com">Git</a>。</p>
<p>您将了解到以下内容：</p>
<ul>
<li>
<p>如何使用 npm（Node 包管理器）安装 Node 模块</p>
</li>
<li>
<p>如何使用 Windows Azure 表服务</p>
</li>
<li>
<p>如何使用适用于 Mac 和 Linux 的 Windows Azure 命令行工具创建 Windows Azure 网站</p>
</li>
</ul>
<p>通过按照本教程中的说明操作，您将构建一个简单的基于 Web 的任务管理应用程序，该应用程序可用于创建、检索和完成任务。这些任务存储在表服务中。</p>
<p>本教程中的项目文件将存储在名为 <strong>tasklist</strong> 的目录中，已完成的应用程序将与下图类似：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/table_todo_empty.png" alt="显示空白 tasklist 的网页"/></p>
<div class="dev-callout"><strong>注意</strong>
<p>本教程引用 <strong>tasklist</strong> 文件夹。将省略此文件夹的完整路径，因为路径语义在操作系统之间并不相同。您应在本地文件系统中易于访问的位置创建此文件夹（例如 <strong>~/node/tasklist</strong> 或 <strong>c:\node\tasklist</strong>）</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>下面提到的许多步骤都将使用命令行。对于这些步骤，请使用适用于您的操作系统的命令行，例如 <strong>cmd.exe</strong> (Windows) 或 <strong>Bash</strong> (Unix Shell)。在 OS X 系统上，可以通过 Terminal 应用程序访问命令行。</p>
</div>
<h2>必备组件</h2>
<p>在按照本文中的说明操作之前，您应确保已安装下列项：</p>
<ul>
<li>
<p><a href="http://nodejs.org">Node</a> 0.6.14 或更高版本</p>
</li>
<li>
<p><a href="http://git-scm.com">Git</a></p>
</li>
<li>
<p>文本编辑器</p>
</li>
<li>
<p>Web 浏览器</p>
</li>
</ul>
<h2>创建存储帐户</h2>
<p>执行下列步骤可创建存储帐户。本教程中的后续说明将使用此帐户。</p>
<ol>
<li>
<p>打开您的 Web 浏览器并转到 <a href="https://manage.windowsazure.cn">Windows Azure 门户</a>。如果出现提示，请使用您的 Windows Azure 订阅信息登录。</p>
</li>
<li>
<p>在门户底部，单击“+新建”，然后选择“存储帐户”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/plus-new.png" alt="+新建"/></p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/new-storage.png" alt="存储帐户"/></p>
</li>
<li>
<p>选择“快速创建”，然后为此存储帐户输入 URL 和区域/地缘组。由于这是一个教程，不需要全球复制，因此请取消选中“启用地域复制”。最后，单击“创建存储帐户”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/quick-storage.png" alt="快速创建"/></p>
<p>请记下您输入的 URL，因为后续步骤将引用此 URL 作为帐户名称。</p>
</li>
<li>
<p>在创建存储帐户后，单击页面底部的“管理密钥”。这将显示此存储帐户的主访问密钥和辅助访问密钥。复制并保存主访问密钥，然后单击复选标记。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/manage-access-keys.png" alt="访问密钥"/></p>
</li>
</ol>
<h2>安装模块并生成基架</h2>
<p>在本节中，您将创建新的 Node 应用程序并使用 npm 添加模块包。对于任务列表应用程序，您将使用 <a href="http://expressjs.com">Express</a> 和 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Azure</a> 模块。Express 模块为 Node 提供模型视图控制器框架，而 Azure 模块提供与表服务的连接。</p>
<h3>安装 Express 并生成基架</h3>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。如果 <strong>tasklist</strong> 目录不存在，请创建该目录。</p>
</li>
<li>
<p>输入以下命令来安装 Express。</p>
<pre class="prettyprint">npm install express -g</pre>
<div class="dev-callout"><strong>注意</strong>
<p>在某些操作系统上使用“-g”参数时，您可能会收到一条错误 <strong>Error:EPERM, chmod '/usr/local/bin/express'</strong> 和一个尝试以管理员身份运行帐户的请求。如果发生这种情况，请使用 <strong>sudo</strong> 命令以更高的权限级别运行 npm。</p>
</div>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">express@2.5.9 /usr/local/lib/node_modules/express
â”œâ”€â”€ mime@1.2.4
â”œâ”€â”€ mkdirp@0.3.0
â”œâ”€â”€ qs@0.4.2
â””â”€â”€ connect@1.8.7</pre>
<div class="dev-callout"><strong>注意</strong>
<p>在安装 Express 模块时使用“-g”参数将全局安装该模块。这样我们就可以访问 <strong>express</strong> 命令以生成网站基架，而无需键入其他路径信息。</p>
</div>
</li>
<li>
<p>若要创建将用于此应用程序的基架，请使用 <strong>express</strong> 命令：</p>
<pre class="prettyprint">express</pre>
</li>
</ol>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">create : .
    create : ./package.json
    create : ./app.js
    create : ./public
    create : ./public/javascripts
    create : ./public/images
    create : ./public/stylesheets
    create : ./public/stylesheets/style.css
    create : ./routes
    create : ./routes/index.js
    create : ./views
    create : ./views/layout.jade
    create : ./views/index.jade

    dont forget to install dependencies:
    $ cd . &amp;&amp; npm install

After this command completes, you should have several new directories and files in the **tasklist** directory.</pre>
<h3>安装其他模块</h3>
<p><strong>package.json</strong> 文件是 <strong>express</strong> 命令创建的文件之一。此文件包含 Express 应用程序所需的其他模块的列表。稍后，在您将此应用程序部署到 Windows Azure 网站时，将使用此文件确定需要在 Windows Azure 上安装哪些模块以支持您的应用程序。</p>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 文件夹，然后输入以下命令安装 <strong>package.json</strong> 文件中描述的模块：</p>
<pre class="prettyprint">npm install</pre>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">express@2.5.8 ./node_modules/express
â”œâ”€â”€ mime@1.2.4
â”œâ”€â”€ qs@0.4.2
â”œâ”€â”€ mkdirp@0.3.0
â””â”€â”€ connect@1.8.7
jade@0.26.0 ./node_modules/jade
â”œâ”€â”€ commander@0.5.2
â””â”€â”€ mkdirp@0.3.0</pre>
<p>这将安装 Express 需要的所有默认模块。</p>
</li>
<li>
<p>接下来，输入以下命令在本地安装 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">azure</a>、<a href="https://github.com/broofa/node-uuid">node-uuid</a>、<a href="https://github.com/flatiron/nconf">nconf</a> 和 <a href="https://github.com/caolan/async">async</a> 模块，并将它们的一个条目保存到 <strong>package.json</strong> 文件：</p>
<pre class="prettyprint">npm install azure node-uuid async nconf --save</pre>
<p>此命令的输出看上去应如下所示：</p>
<pre class="prettyprint">async@0.1.22 ./node_modules/async
node-uuid@1.3.3 ./node_modules/node-uuid
nconf@0.6.0 ./node_modules/nconf
â”œâ”€â”€ ini@1.0.2
â”œâ”€â”€ pkginfo@0.2.3
â””â”€â”€ optimist@0.3.4 (wordwrap@0.0.2)
azure@0.5.3 ./node_modules/azure
â”œâ”€â”€ dateformat@1.0.2-1.2.3
â”œâ”€â”€ xmlbuilder@0.3.1
â”œâ”€â”€ node-uuid@1.2.0
â”œâ”€â”€ log@1.3.0
â”œâ”€â”€ mime@1.2.5
â”œâ”€â”€ xml2js@0.1.14
â”œâ”€â”€ underscore@1.3.3
â”œâ”€â”€ qs@0.5.0
â”œâ”€â”€ sax@0.4.0
â””â”€â”€ underscore.string@2.2.0rc</pre>
</li>
</ol>
<h2>在 Node 应用程序中使用表服务</h2>
<p>在本节中，您将通过添加一个包含您的任务模型的 <strong>task.js</strong> 文件来扩展 <strong>express</strong> 命令创建的基本应用程序。您还将修改现有 <strong>app.js</strong> 并创建使用该模型的新 <strong>tasklist.js</strong> 文件。</p>
<h3>创建模型</h3>
<ol>
<li>
<p>在 <strong>tasklist</strong> 目录中，创建一个名为 <strong>models</strong> 的新目录。</p>
</li>
<li>
<p>在 <strong>models</strong> 目录中，创建一个名为 <strong>task.js</strong> 的新文件。此文件将包含您的应用程序创建的任务的模型。</p>
</li>
<li>
<p>在 <strong>task.js</strong> 文件的开头，添加以下代码来引用所需的库：</p>
<pre class="prettyprint">var azure = require('azure')
  , uuid = require('node-uuid');</pre>
</li>
<li>
<p>接下来，您将添加代码以定义和导出 Task 对象。此对象负责与表连接。</p>
<p>module.exports = Task;</p>
<pre class="prettyprint">function Task(storageClient, tableName, partitionKey) {
  this.storageClient = storageClient;
  this.tableName = tableName;
  this.partitionKey = partitionKey;


  this.storageClient.createTableIfNotExists(tableName, 
    function tableCreated(err) {
      if(err) {
        throw error;
      }
    });
};</pre>
</li>
<li>
<p>接下来，添加以下代码来定义 Task 对象的其他方法，这些方法允许与表中存储的数据交互：</p>
<pre class="prettyprint">Task.prototype = {
  find: function(query, callback) {
    self = this;
    self.storageClient.queryEntities(query, 
      function entitiesQueried(err, entities){
        if(err) {
          callback(err);
        } else {
          callback(null, entities);
        }
      });
  },


  addItem: function(item, callback) {
    self = this;
    item.RowKey = uuid();
    item.PartitionKey = self.partitionKey;
    item.completed = false;
    self.storageClient.insertEntity(self.tableName, item, 
      function entityInserted(error) {
        if(error){  
          callback(err);
        }
        callback(null);
      });
  },


  updateItem: function(item, callback) {
    self = this;
    self.storageClient.queryEntity(self.tableName, self.partitionKey, item,
      function entityQueried(err, entity) {
       if(err) {
          callback(err);
        }
        entity.completed = true;
        self.storageClient.updateEntity(self.tableName, entity,
          function entityUpdated(err) {
            if(err) {
              callback(err);
            }
            callback(null);
          });
      });
  }
}</pre>
</li>
<li>
<p>保存并关闭 <strong>task.js</strong> 文件。</p>
</li>
</ol>
<h3>创建控制器</h3>
<ol>
<li>
<p>在 <strong>tasklist/routes</strong> 目录中，创建名为 <strong>tasklist.js</strong> 的新文件并在文本编辑器中打开它。</p>
</li>
<li>
<p>将以下代码添加到 <strong>tasklist.js</strong>。这将加载 <strong>tasklist.js</strong> 使用的 azure 和 async 模块。这还将定义 <strong>TaskList</strong> 函数，会向该函数传递我们之前定义的 <strong>Task</strong> 对象的一个实例：</p>
<pre class="prettyprint">var azure = require('azure')
  , async = require('async');


module.exports = TaskList;


function TaskList(task) {
  this.task = task;
}</pre>
</li>
<li>
<p>继续向 <strong>tasklist.js</strong> 文件添加用于 <strong>showTasks</strong>、<strong>addTask</strong> 和 <strong>completeTasks</strong> 的方法：</p>
<pre class="prettyprint">TaskList.prototype = {
  showTasks: function(req, res) {
    self = this;
    var query = azure.TableQuery
      .select()
      .from(self.task.tableName)
      .where('completed eq ?', 'false');
    self.task.find(query, function itemsFound(err, items) {
      res.render('index',{title: 'My ToDo List ', tasks: items});
    });
  },


  addTask: function(req,res) {
    var self = this      
    var item = req.body.item;
    self.task.addItem(item, function itemAdded(err) {
      if(err) {
        throw err;
      }
      res.redirect('/');
    });
  },


  completeTask: function(req,res) {
    var self = this;
    var completedTasks = Object.keys(req.body);
    async.forEach(completedTasks, function taskIterator(completedTask, callback){
      self.task.updateItem(completedTask, function itemsUpdated(err){
        if(err){
          callback(err);
        } else {
          callback(null);
        }
      })
    }, function(err){
      if(err) {
        throw err;
      } else {
       res.redirect('/');
      }
    });
  }
}</pre>
</li>
<li>
<p>保存 <strong>tasklist.js</strong> 文件。</p>
</li>
</ol>
<h3>修改 app.js</h3>
<ol>
<li>
<p>在 <strong>tasklist</strong> 目录中，用文本编辑器打开 <strong>app.js</strong> 文件。此文件之前是通过运行 <strong>express</strong> 命令创建的。</p>
</li>
<li>
<p>在文件开头，添加以下代码来加载 azure 模块，设置表名称、partitionKey，并设置此示例使用的存储凭据：</p>
<pre class="prettyprint">var azure = require('azure')
  , nconf = require('nconf');
nconf.env()
     .file({ file: 'config.json'});
var tableName = nconf.get("TABLE_NAME")
  , partitionKey = nconf.get("PARTITION_KEY")
  , accountName = nconf.get("STORAGE_NAME")
  , accountKey = nconf.get("STORAGE_KEY");</pre>
<div class="dev-callout"><strong>注意</strong>
<p>nconf 将从环境变量或我们稍后将创建的 **config.json** 文件中加载配置值。</p>
</div>
</li>
<li>
<p>在 app.js 文件中，向下滚动到以下行：</p>
<pre class="prettyprint">app.get('/', routes.index);</pre>
</li>
</ol>
<p>将上面的行替换为下面显示的代码。这将通过与您的存储帐户的连接初始化 <strong>Task</strong> 的实例。这是 <strong>TaskList</strong> 的密码，TaskList 将使用该密码与表服务通信：</p>
<pre class="prettyprint">var TaskList = require('./routes/tasklist');
    var Task = require('./models/task');
    var task = new Task(
            azure.createTableService(accountName, accountKey)
        , tableName
        , partitionKey);
    var taskList = new TaskList(task);

    app.get('/', taskList.showTasks.bind(taskList));
    app.post('/addtask', taskList.addTask.bind(taskList));
    app.post('/completetask', taskList.completeTask.bind(taskList));</pre>
<ol>
<li>保存 <strong>app.js</strong> 文件。</li>
</ol>
<h3>修改索引视图</h3>
<ol>
<li>
<p>将目录更改为 <strong>views</strong> 目录并在文本编辑器中打开 <strong>index.jade</strong> 文件。</p>
</li>
<li>
<p>将 <strong>index.jade</strong> 文件的内容替换为以下代码。这将定义用于显示现有任务的视图，以及用于添加新任务和将现有任务标记为已完成的表单。</p>
<pre class="prettyprint">extends layout


block content
  h1= title
  br


  form(action="/completetask", method="post")
    table(class="table table-striped table-bordered")
      tr
        td Name
        td Category
        td Date
        td Complete
      each task in tasks
        tr
          td #{task.name}
          td #{task.category}
          - var day   = task.Timestamp.getDate();
          - var month = task.Timestamp.getMonth() + 1;
          - var year  = task.Timestamp.getFullYear();
          td #{month + "/" + day + "/" + year}
          td
            input(type="checkbox", name="#{task.RowKey}", value="#{!task.itemCompleted}", checked=task.itemCompleted)
    button(type="submit", class="btn") Update tasks
  hr
  form(action="/addtask", method="post", class="well")
    label Item Name: 
    input(name="item[name]", type="textbox")
    label Item Category: 
    input(name="item[category]", type="textbox")
    br
    button(type="submit", class="btn") Add item</pre>
</li>
<li>
<p>保存并关闭 <strong>index.jade</strong> 文件。</p>
</li>
</ol>
<h3>修改全局布局</h3>
<p><strong>views</strong> 目录中的 <strong>layout.jade</strong> 文件用作其他 <strong>.jade</strong> 文件的全局模板。在此步骤中，您将对其进行修改以使用 <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>（一个可以轻松设计美观网站的工具包）。</p>
<ol>
<li>
<p>下载并提取 <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> 的文件。将 <strong>bootstrap.min.css</strong> 文件从 <strong>bootstrap\css</strong> 文件夹复制到您的 tasklist 应用程序的 <strong>public\stylesheets</strong> 目录。</p>
</li>
<li>
<p>从 <strong>views</strong> 文件夹中，用文本编辑器打开 <strong>layout.jade</strong> 并将其中内容替换为以下代码：</p>
<pre class="prettyprint">doctype 5
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')
    link(rel='stylesheet', href='/stylesheets/style.css')
  body(class='app')
    div(class='navbar navbar-fixed-top')
      .navbar-inner
        .container
          a(class='brand', href='/') My Tasks
    block content</pre>
</li>
<li>
<p>保存 <strong>layout.jade</strong> 文件。</p>
</li>
</ol>
<h3>创建配置文件</h3>
<p><strong>config.json</strong> 文件包含用于连接到 SQL Database 的连接字符串，运行时应用程序将读取该文件。若要创建此文件，请执行以下步骤：</p>
<ol>
<li>
<p>在 <strong>tasklist</strong> 目录中，创建一个名为 <strong>config.json</strong> 的新文件并在文本编辑器中打开它。</p>
</li>
<li>
<p>该 <strong>config.json</strong> 文件的内容看上去应如下所示：</p>
<pre class="prettyprint">{
    "STORAGE_NAME": "storage account name",
    "STORAGE_KEY": "storage access key",
    "PARTITION_KEY": "mytasks",
    "TABLE_NAME": "tasks"
}</pre>
<p>将 <strong>storage account name</strong> 替换为您之前创建的存储帐户的名称。将 <strong>storage access key</strong> 替换为您的存储帐户的主访问密钥。</p>
</li>
<li>
<p>保存文件。</p>
</li>
</ol>
<h2>在本地运行应用程序</h2>
<p>若要在您的本地计算机中测试应用程序，请执行以下步骤：</p>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。</p>
</li>
<li>
<p>使用以下命令在本地启动应用程序：</p>
<pre class="prettyprint">node app.js</pre>
</li>
<li>
<p>打开 Web 浏览器并导航到 http://127.0.0.1:3000。这应该会显示类似于下图的网页：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/table_todo_empty.png" alt="显示空白 tasklist 的网页"/></p>
</li>
<li>
<p>使用提供的 <strong>Item Name</strong>（项名称）和 <strong>Item Category</strong>（项类别）字段输入信息，然后单击 <strong>Add item</strong>（添加项）。</p>
</li>
<li>
<p>页面应更新为在 ToDo List 表中显示该项。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/table_todo_list.png" alt="任务列表中新项的图像"/></p>
</li>
<li>
<p>若要完成任务，只需选中“Complete”（完成）列中的复选框，然后单击 <strong>Update task</strong>（更新任务）。</p>
</li>
<li>
<p>若要结束 Node 进程，请转到命令行并按 <strong>Ctrl</strong> 和 <strong>C</strong> 键。</p>
</li>
</ol>
<h2>将您的应用程序部署到 Windows Azure</h2>
<p>本节中的步骤使用 Windows Azure 命令行工具创建新的 Windows Azure 网站，然后使用 Git 部署您的应用程序。若要执行这些步骤，您必须具有 Windows Azure 订阅。</p>
<div class="dev-callout"><strong>注意</strong>
<p>这些步骤还可以通过使用 Windows Azure 门户执行。有关使用 Windows Azure 门户部署 Node.js 应用程序的步骤，请参阅<a href="/zh-cn/develop/nodejs/tutorials/create-a-website-(mac)/">创建 Node.js 应用程序并将其部署到 Windows Azure 网站</a>。</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>如果这是您创建的第一个 Windows Azure 网站，则必须使用 Windows Azure 门户部署此应用程序。</p>
</div>
<h3>安装适用于 Mac 和 Linux 的 Windows Azure 命令行工具</h3>
<p>若要安装命令行工具，请使用以下命令：</p>
<pre class="prettyprint">npm install azure-cli -g</pre>
<div class="dev-callout"><strong>注意</strong>
<p>如果您已从 <a href="/zh-cn/develop/nodejs/">Windows Azure 开发人员中心</a>安装 **Windows Azure SDK for Node.js**，则应该已安装命令行工具。有关详细信息，请参阅<a href="/zh-cn/develop/nodejs/how-to-guides/command-line-tools/">适用于 Mac 和 Linux 的 Windows Azure 命令行工具</a>。</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>虽然命令行工具主要针对 Mac 和 Linux 用户而创建，但它们基于 Node.js，应该可在能够运行 Node 的任何系统上使用。</p>
</div>
<h3>导入发布设置</h3>
<p>在将命令行工具与 Windows Azure 一起使用之前，您必须首先下载包含有关您的订阅的信息的文件。执行以下步骤可下载和导入此文件。</p>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。</p>
</li>
<li>
<p>输入以下命令以启动浏览器并导航到下载页面。如果出现提示，请使用与您的订阅关联的帐户登录。</p>
<pre class="prettyprint">azure account download</pre>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/azure-account-download.png" alt="下载页面"/></p>
<p>文件下载应该会自动开始；如果没有自动开始，您可以单击该页面开头的链接手动下载文件。</p>
</li>
<li>
<p>文件下载完成后，请使用以下命令导入设置：</p>
<pre class="prettyprint">azure account import &lt;path-to-file&gt;</pre>
<p>指定您在上一步中下载的发布设置文件的路径和文件名。命令完成后，您应该会看到与下面类似的输出：</p>
<pre class="prettyprint">info:   Executing command account import
info:   Setting service endpoint to: management.core.chinacloudapi.cn
info:   Setting service port to: 443
info:   Found subscription: YourSubscription
info:   Setting default subscription to: YourSubscription
warn:   The 'C:\users\username\downloads\YourSubscription-6-7-2012-credentials.publishsettings' file contains sensitive information.
warn:   Remember to delete it now that it has been imported.
info:   Account publish settings imported successfully
info:   account import command OK</pre>
</li>
<li>
<p>完成导入后，您应删除发布设置文件，因为不再需要该文件并且它包含有关您的 Windows Azure 订阅的敏感信息。</p>
</li>
</ol>
<h3>创建 Windows Azure 网站</h3>
<ol>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录。</p>
</li>
<li>
<p>使用以下命令创建新的 Windows Azure 网站</p>
<pre class="prettyprint">azure site create --git</pre>
<p>系统将提示您输入网站名称以及该网站将位于的数据中心。提供一个唯一名称并选择在地理上接近您的位置的数据中心。</p>
<p><code>--git</code> 参数将在 Windows Azure 中为此网站创建一个 Git 存储库。它还将在当前目录中初始化一个 Git 存储库（如果不存在任何 Git 存储库）。它还将创建一个名为“azure”的 <a href="http://git-scm.com/docs/git-remote">Git remote</a>，以用于将应用程序发布到 Windows Azure。最后，它将创建一个 <strong>web.config</strong> 文件，其中包含 Windows Azure 用于托管 Node 应用程序的设置。</p>
<div class="dev-callout"><strong>注意</strong>
<p>如果此命令从已包含 Git 存储库的目录运行，它将不会重新初始化该目录。</p>
</div>
<div class="dev-callout"><strong>注意</strong>
<p>如果省略“--git”参数，但该目录包含 Git 存储库，则仍将创建“azure”remote。</p>
</div>
<p>此命令完成后，您将看到与下面类似的输出。请注意，以 <strong>Web site created at</strong> 开头的行包含网站的 URL。</p>
<pre class="prettyprint">info:   Executing command site create
help:   Need a site name
Name: TableTasklist
info:   Using location southcentraluswebspace
info:   Executing `git init`
info:   Creating default .gitignore file
info:   Creating a new web site
info:   Created web site at  tabletasklist.chinacloudsites.cn
info:   Initializing repository
info:   Repository initialized
info:   Executing `git remote add azure https://username@tabletasklist.chinacloudsites.cn/TableTasklist.git`
info:   site create command OK</pre>
<div class="dev-callout"><strong>注意</strong>
<p>如果这是您的订阅的第一个 Windows Azure 网站，系统会指示您使用门户创建该网站。有关详细信息，请参阅<a href="/zh-cn/develop/nodejs/tutorials/create-a-website-(mac)/">创建 Node.js 应用程序并将其部署到 Windows Azure 网站</a>。</p>
</div>
</li>
</ol>
<h3>发布应用程序</h3>
<ol>
<li>
<p>在 Terminal 窗口中，将目录更改为 <strong>tasklist</strong> 目录（如果您尚未在此目录中）。</p>
</li>
<li>
<p>使用以下命令将文件添加然后提交到本地 Git 存储库：</p>
<pre class="prettyprint">git add .
git commit -m "adding files"</pre>
</li>
<li>
<p>在将最新 Git 存储库更改推送到 Windows Azure 网站时，您必须指定目标分支为 <strong>master</strong>，因为这将用于网站内容。</p>
<pre class="prettyprint">git push azure master</pre>
<p>在部署结束时，您将看到如下语句：</p>
<pre class="prettyprint">To https://username@tabletasklist.chinacloudsites.cn/TableTasklist.git
 * [new branch]      master -&gt; master</pre>
</li>
<li>
<p>推送操作完成后，请浏览到 <code>azure create site</code> 命令之前返回的网站 URL 以查看您的应用程序。</p>
</li>
</ol>
<h3>切换到环境变量</h3>
<p>前面我们实现了在 <strong>SQL_CONN</strong> 环境变量中查找连接字符串或从 <strong>config.json</strong> 文件加载该值的代码。在接下来的步骤中，您将在网站配置中创建应用程序通过环境变量实际访问的键/值对。</p>
<ol>
<li>
<p>从管理门户中，单击“网站”，然后选择您的网站。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/go_to_dashboard.png" alt="打开网站仪表板"/></p>
</li>
<li>
<p>单击“配置”，然后找到页面的“应用设置”部分。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/sql-task-configure.png" alt="配置链接"/></p>
</li>
<li>
<p>在“应用设置”部分，在 <strong>KEY</strong> 字段中输入 <strong>STORAGE_NAME</strong>，并在 <strong>VALUE</strong> 字段中输入您的存储帐户的名称。单击复选标记以移到下一个字段。为以下密钥和值重复此过程：</p>
<ul>
<li>
<p><strong>STORAGE_KEY</strong> - 您的存储帐户的访问密钥</p>
</li>
<li>
<p><strong>PARTITION_KEY</strong> - “mytasks”</p>
</li>
<li>
<p><strong>TABLE_NAME</strong> - “tasks”</p>
</li>
</ul>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/storage-tasks-appsettings.png" alt="应用程序设置"/></p>
</li>
<li>
<p>最后，单击页面底部的“保存”图标，将此更改提交到运行时环境。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/savebutton.png" alt="保存应用程序设置"/></p>
</li>
<li>
<p>从命令行中，将目录更改为 <strong>tasklist</strong> 目录，然后输入以下命令以删除 <strong>config.json</strong> 文件：</p>
<pre class="prettyprint">git rm config.json
git commit -m "Removing config file"</pre>
</li>
<li>
<p>执行以下命令将更改部署到 Windows Azure：</p>
<pre class="prettyprint">git push azure master</pre>
</li>
</ol>
<p>在将更改部署到 Windows Azure 后，您的 Web 应用程序应当继续工作，因为它现在正在从“应用设置”条目读取连接字符串。若要验证此情况，请在“应用设置”中将 <strong>STORAGE_KEY</strong> 条目的值更改为一个无效值。保存该值后，网站应该会因存储访问密钥设置无效而失败。</p>
<h2>后续步骤</h2>
<p>虽然本文中的步骤介绍使用表服务存储信息，但您也可以使用 MongoDB。有关详细信息，请参阅<a href="/zh-cn/develop/nodejs/tutorials/website-with-mongodb-(Mac)/">使用 MongoDB 的 Node.js Web 应用程序</a>。</p>
<h2>其他资源</h2>
<p><a href="/zh-cn/develop/nodejs/how-to-guides/command-line-tools/">适用于 Mac 和 Linux 的 Windows Azure 命令行工具</a></p>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>使用表存储构建 Node.js 网站 - Windows Azure 教程</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>dev-nodejs-tutorials-web-site-with-storage</linkid><metaKeywords>Azure 表存储 Node.js, Azure Node.js 应用程序, Azure Node.js 教程, Azure Node.js 示例</metaKeywords><metaDescription><![CDATA[本教程演示如何使用 Windows Azure 表服务在 Windows Azure 网站上托管的 Node 应用程序中存储数据。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>使用存储创建网站</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>