<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="18999" parentID="18995" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="4" createDate="2013-07-11T11:15:30" updateDate="2014-08-18T11:17:05" nodeName="Service Bus Queues" urlName="service-bus-queues" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,18995,18999" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO modalpopup="0" chunkurl="" chunkname="article-left-menu" hide="0" chunkpath="devcenter/node" modaltrigger="" macroAlias="AzureChunkDisplayer" />
<h1>如何使用 Service Bus 队列</h1>
<p>本指南演示如何使用 Service Bus 队列。示例用 JavaScript 编写并使用 Node.js Azure 模块。涉及的应用场景包括<strong>创建队列、发送和接收消息</strong>以及<strong>删除队列</strong>。有关队列的详细信息，请参阅<a href="#next-steps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-are-service-bus-queues">什么是 Service Bus 队列？</a></li>
<li><a href="#create-a-service-namespace">创建服务命名空间</a></li>
<li><a href="#obtain-default-credentials">获取命名空间的默认管理凭据</a></li>
<li><a href="#create-app">创建 Node.js 应用程序</a></li>
<li><a href="#configure-app">配置应用程序以使用 Service Bus</a></li>
<li><a href="#create-queue">如何：创建队列</a></li>
<li><a href="#send-messages">如何：向队列发送消息</a></li>
<li><a href="#receive-messages">如何：从队列接收消息</a></li>
<li><a href="#handle-crashes">如何：处理应用程序崩溃和不可读消息</a></li>
<li><a href="#next-steps">后续步骤</a></li>
</ul>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/shared" chunkname="howto-service-bus-queues" macroAlias="AzureChunkDisplayer" />
<h2><a name="create-app"></a>创建 Node.js 应用程序</h2>
<p>创建空白 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅<a href="/zh-cn/develop/nodejs/tutorials/create-a-website-(mac)/">创建 Node.js 应用程序并将其部署到 Windows Azure 网站</a>、<a href="http://www.windowsazure.cn/zh-cn/develop/nodejs/tutorials/getting-started/">Node.js 云服务</a>（使用 Windows PowerShell）或<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-webmatrix/">使用 WebMatrix 构建网站</a>。</p>
<h2><a name="configure-app"></a>配置应用程序以使用 Service Bus</h2>
<p>要使用 Windows Azure Service Bus，需要下载和使用 Node.js azure 程序包。其中包括一组便于与 Service Bus REST 服务进行通信的库。</p>
<h3>使用 Node 包管理器 (NPM) 可获取该程序包</h3>
<ol>
<li>
<p>使用 <strong>Windows PowerShell for Node.js</strong> 命令窗口导航到您在其中创建了示例应用程序的 <strong>c:\node\sbqueues\WebRole1</strong> 文件夹。</p>
</li>
<li>
<p>在命令窗口中键入 <strong>npm install azure</strong>，这应该产生类似如下的输出：</p>
<pre class="prettyprint">azure@0.6.0 ./node_modules/azure
├── easy-table@0.0.1
├── dateformat@1.0.2-1.2.3
├── xmlbuilder@0.3.1
├── eyes@0.1.7
├── colors@0.6.0-1
├── mime@1.2.5
├── log@1.3.0
├── commander@0.6.1
├── node-uuid@1.2.0
├── xml2js@0.1.14
├── async@0.1.22
├── tunnel@0.0.1
├── underscore@1.3.3
├── qs@0.5.0
├── underscore.string@2.2.0rc
├── sax@0.4.0
├── streamline@0.2.4
└── winston@0.6.1 (cycle@1.0.0, stack-trace@0.0.6, pkginfo@0.2.3, request@2.9.202)</pre>
</li>
<li>
<p>可以手动运行 <strong>ls</strong> 命令来验证是否创建了 <strong>node_modules</strong> 文件夹。在该文件夹中，找到 <strong>azure</strong> 程序包，其中包含访问 Service Bus 队列所需的库。</p>
</li>
</ol>
<h3>导入模块</h3>
<p>使用记事本或其他文本编辑器将以下内容添加到应用程序的 <strong>server.js</strong> 文件的顶部：</p>
<pre class="prettyprint">var azure = require('azure');</pre>
<h3>设置 Windows Azure 存储连接</h3>
<p>azure 模块将读取环境变量 AZURE_SERVICEBUS_NAMESPACE 和 AZURE_SERVICEBUS_ACCESS_KEY 以获取连接 Windows Azure Service Bus 所需的信息。如果未设置这些环境变量，则必须在调用 <strong>createServiceBusService</strong> 时指定帐户信息。</p>
<p>有关在 Windows Azure 云服务的配置文件中设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-app-with-storage/">使用存储构建 Node.js 云服务</a>。</p>
<p>有关在管理门户中为 Windows Azure 网站设置环境变量的示例，请参阅<a href="/zh-cn/develop/nodejs/tutorials/web-site-with-storage/">使用存储构建 Node.js Web 应用程序</a></p>
<h2><a name="create-queue"></a>如何创建队列</h2>
<p>可通过 <strong>ServiceBusService</strong> 对象处理队列。以下代码将创建 <strong>ServiceBusService</strong> 对象。将它添加到靠近 <strong>server.js</strong> 文件顶部、用于导入 azure 模块的语句之后的位置：</p>
<pre class="prettyprint">var serviceBusService = azure.createServiceBusService();</pre>
<p>通过对 <strong>ServiceBusService</strong> 对象调用 <strong>createQueueIfNotExists</strong>，将返回指定的队列（如果存在），否则将使用指定的名称创建一个新队列。以下代码使用 <strong>createQueueIfNotExists</strong> 创建或连接到名为“myqueue”的队列：</p>
<pre class="prettyprint">serviceBusService.createQueueIfNotExists('myqueue', function(error){
    if(!error){
        // Queue exists
    }
});</pre>
<p><strong>createServiceBusService</strong> 也支持其他选项，这些选项允许您重写默认队列设置，如消息生存时间或最大队列大小。下面的示例演示如何将最大队列大小设置为 5 GB，将生存时间设置为 1 分钟：</p>
<pre class="prettyprint">var queueOptions = {
      MaxSizeInMegabytes: '5120',
      DefaultMessageTimeToLive: 'PT1M'
    };

serviceBusService.createQueueIfNotExists('myqueue', queueOptions, function(error){
    if(!error){
        // Queue exists
    }
});</pre>
<h2><a name="send-messages"></a>如何向队列发送消息</h2>
<p>若要向 Service Bus 队列发送消息，您的应用程序需对 <strong>ServiceBusService</strong> 对象调用 <strong>sendQueueMessage</strong> 方法。发往 Service Bus 队列的消息以及从 Service Bus 队列接收的消息是 <strong>BrokeredMessage</strong> 对象，它们具有一组标准属性（如 <strong>Label</strong> 和 <strong>TimeToLive</strong>）、一个用来保存自定义应用程序特定属性的字典和一段任意应用程序数据正文。</p>
应用程序可以通过将字符串值作为消息传递来设置消息正文，任何必需的标准属性将用默认值填充。
<p>下面的示例演示如何使用 <strong>sendQueueMessage</strong> 向名为“myqueue”的队列发送一条测试消息：</p>
<pre class="prettyprint">var message = {
    body: 'Test message',
    customProperties: {
        testproperty: 'TestValue'
    };
serviceBusService.sendQueueMessage('myqueue', message, function(error){
    if(!error){
        // message sent
    }
});</pre>
<p>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列中包含的消息数量不受限制，但消息的总大小受限制。此队列大小是在创建时定义的，上限为 5 GB。</p>
<h2><a name="receive-messages"></a>如何从队列接收消息</h2>
<p>对 <strong>ServiceBusService</strong> 对象使用 <strong>receiveQueueMessage</strong> 方法可从队列接收消息。默认情况下，消息被读取后即从队列删除；但是您可以读取（查看）并锁定消息而不将其从队列删除，只要将可选参数 <strong>isPeekLock</strong> 设置为 <strong>true</strong> 即可。</p>
<p>在接收过程中读取并删除消息的默认行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。因为 Service Bus 会将消息标记为已使用，所以在应用程序重新启动并开始再次使用消息时，它会遗漏在崩溃之前使用过的消息。</p>
<p>如果将 <strong>isPeekLock</strong> 参数设置为<strong>true</strong>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序处理完该消息（或将它可靠地存储起来留待将来处理）后，通过调用 <strong>deleteMessage</strong> 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。<strong>deleteMessage</strong> 方法将此消息标记为“已使用”并将其从队列中删除。</p>
<p>下面的示例演示了如何使用 <strong>receiveQueueMessage</strong> 接收和处理消息。该示例先接收并删除一条消息，然后将 <strong>isPeekLock</strong> 设置为 true 后再接收一条消息，最后使用 <strong>deleteMessage</strong> 删除该消息：</p>
<pre class="prettyprint">serviceBusService.receiveQueueMessage('taskqueue', function(error, receivedMessage){
    if(!error){
        // Message received and deleted
    }
});
serviceBusService.receiveQueueMessage(queueName, { isPeekLock: true }, function(error, lockedMessage){
    if(!error){
        // Message received and locked
        serviceBusService.deleteMessage(lockedMessage, function (deleteError){
            if(!deleteError){
                // Message deleted
            }
        }
    }
});</pre>
<h2><a name="handle-crashes"></a>如何处理应用程序崩溃和不可读消息</h2>
<p>Service Bus 提供了相关功能来帮助您轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <strong>ServiceBusService</strong> 对象调用 <strong>unlockMessage</strong> 方法。这会导致 Service Bus 在队列中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</p>
<p>这里还存在与队列中的锁定消息关联的超时，如果应用程序未能在锁定超时到期前处理消息（例如，如果应用程序崩溃），则 Service Bus 将会自动解锁消息并使之重新可供接收。</p>
<p>如果应用程序在处理消息之后，但在调用 <strong>deleteMessage</strong> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。这通常称为“至少处理一次”，即，将对每条消息至少处理一次，但在某些情况下，可能会重新传送同一消息。如果某个场景不允许重复处理，则应用程序开发人员应在其应用程序中添加额外逻辑来处理重复消息传送。这通常可以通过使用消息的 <strong>MessageId</strong> 属性来实现，该属性在多次传送尝试中保持不变。</p>
<h2><a name="next-steps"></a>后续步骤</h2>
<p>现在，您已了解 Service Bus 队列的基础知识，单击下面的链接可了解更多信息。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/hh367516.aspx">队列、主题和订阅。</a></li>
<li>访问 GitHub 上的 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Azure SDK for Node</a> 存储库。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>如何使用 Service Bus 队列 (Node.js) - Windows Azure</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>dev-nodejs-how-to-service-bus-queues</linkid><metaKeywords>Azure Service Bus 队列, Azure 队列, Azure 消息传递, Azure 队列 Node.js </metaKeywords><metaDescription><![CDATA[了解如何在 Windows Azure 中使用 Service Bus 队列。代码示例用 Node.js 编写。]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>Service Bus 队列</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>