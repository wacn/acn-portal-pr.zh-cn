<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18872" parentID="18433" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="20" createDate="2013-07-11T10:54:40" updateDate="2014-08-18T11:10:43" nodeName="Website with MongoDB VM" urlName="website-with-mongodb-vm" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18433,18872" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>创建连接到在 Windows Azure 中虚拟机上运行的 MongoDB 的 Windows Azure 网站</h1>
<p>可使用 Git 将 ASP.NET 应用程序部署到 Windows Azure 网站。在本教程中，您将生成一个简单的前端 ASP.NET MVC 任务列表应用程序，它连接到在 Windows Azure 中虚拟机上运行的 MongoDB 数据库。<a href="http://www.mongodb.org">MongoDB</a> 是一个受欢迎的开源、高性能 NoSQL 数据库。在开发计算机上运行并测试该 ASP.NET 应用程序后，您将使用 Git 将该应用程序上载到 Windows Azure 网站。</p>
<p>您将生成的 ASP.NET 应用程序将类似于此：<img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/tasklistappfull.png" alt="My Task List Application"/></p>
<?UMBRACO_MACRO chunkpath="devcenter/shared (2)" hide="0" chunkname="create-account-and-websites-and-vms-note" macroAlias="AzureChunkDisplayer" />
<h2><span class="short-header">概述</span>概述</h2>
<p>在本教程中您将：</p>
<ul>
<li><a href="#virtualmachine">创建虚拟机和安装 MongoDB</a></li>
<li><a href="#createapp">在开发计算机上创建并运行 My Task List ASP.NET 应用程序</a></li>
<li><a href="#createwebsite">创建 Windows Azure 网站</a></li>
<li><a href="#deployapp">使用 Git 将该 ASP.NET 应用程序部署到网站</a></li>
</ul>
<h2><span class="short-header">背景知识</span>背景知识</h2>
<p>了解以下各项对本教程有帮助，但并非必需：</p>
<ul>
<li>MongoDB 的 C# 驱动程序。有关用 MongoDB 开发 C# 应用程序的详细信息，请参阅 <a href="http://www.mongodb.org/display/DOCS/CSharp+Language+Center">CSharp Language Center</a>。</li>
<li>ASP .NET Web 应用程序框架。可在 <a href="http://www.asp.net">ASP.net 网站</a>上了解其方方面面。</li>
<li>ASP .NET MVC 3.0 Web 应用程序框架。可在 <a href="http://www.asp.net/mvc">ASP.NET MVC 3 网站</a>上了解其方方面面。</li>
<li>Windows Azure。可在 <a href="http://www.windowsazure.cn">Windows Azure</a> 上开始阅读。</li>
</ul>
<h2><span class="short-header">准备工作</span>准备工作</h2>
<p>在本节中，您将学习如何在 Windows Azure 中创建虚拟机、安装 MongoDB 以及设置开发环境。</p>
<h3><a id="virtualmachine"></a>创建虚拟机和安装 MongoDB</h3>
<p>本教程假定您已在 Windows Azure 中创建一个虚拟机。创建虚拟机后，您需要在该虚拟机上安装 MongoDB：</p>
<ul>
<li>若要创建 Windows 虚拟机并安装 MongoDB，请参阅<a href="/zh-cn/manage/windows/common-tasks/install-mongodb/">在 Windows Azure 中运行 Windows Server 2008 R2 的虚拟机上安装 MongoDB</a>。</li>
<li>或者，若要创建 Linux 虚拟机并安装 MongoDB，请参阅<a href="/zh-cn/manage/linux/common-tasks/mongodb-on-a-linux-vm/">在 Windows Azure 中运行 CentOS Linux 的虚拟机上安装 MongoDB</a>。</li>
</ul>
<p>在 Windows Azure 中创建虚拟机并安装 MongoDB 后，请务必记住该虚拟机的 DNS 名称（例如“testlinuxvm.chinacloudapp.cn”）以及您在端点中指定的 MongoDB 的外部端口。本教程后面的步骤中将会用到此信息。</p>
<h3>设置开发环境</h3>
<p>本教程使用 Microsoft Visual Studio 2010。也可使用 Microsoft Visual Web Developer 2010 Express Service Pack 1，这是 Microsoft Visual Studio 的免费版本。开始之前，请确保已在本地开发计算机上安装了以下必备软件。可通过单击以下链接安装所有这些软件：<a href="http://www.microsoft.com/web/gallery/install.aspx?appid=VWD2010SP1Pack">Web 平台安装程序</a>。或者，可使用以下链接单独安装各个必备软件：</p>
<ul>
<li><a href="http://www.microsoft.com/web/gallery/install.aspx?appsxml=&amp;appid=VS2010SP1Pack">Visual Studio 2010 必备软件</a></li>
<li><a href="http://www.microsoft.com/web/gallery/install.aspx?appsxml=&amp;appid=MVC3">ASP.NET MVC 3 工具更新</a></li>
</ul>
<p>如果使用 Visual Web Developer 2010 而非 Visual Studio 2010，请通过单击以下链接，安装必备软件：<a href="http://www.microsoft.com/web/gallery/install.aspx?appid=VWD2010SP1Pack">Visual Studio Web Developer Express SP1 必备软件</a></p>
<h2><a id="createapp"></a><span class="short-header">在本地创建并运行应用程序</span>在开发计算机上创建并运行 My Task List ASP.NET 应用程序</h2>
<p>在本节中，您将使用 Visual Studio 创建 My Task List ASP.NET 应用程序。还将针对在 Windows Azure 上托管的虚拟机中创建的 MongoDB 实例在本地运行该应用程序。</p>
<h3>创建应用程序</h3>
<p>首先运行 Visual Studio，然后从“起始页”<strong></strong>中选择“新建项目”<strong></strong>。</p>
<p>在左侧选择“Visual C#”<strong></strong>，然后选择“Web”<strong></strong>，再从模板列表中选择“ASP.NET MVC 3 Web 应用程序”<strong></strong>。将该项目命名为“MyTaskListApp”，然后单击“确定”<strong></strong>。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/newproject.png" alt="“新建项目”屏幕"/></p>
<p>在“新 ASP.NET MVC 3 项目”<strong></strong>对话框中，选择“Internet 应用程序”<strong></strong>。选中“使用 HTML5 标记”<strong></strong>，并保留“Razor”<strong></strong>作为默认的视图引擎。</p>
<p>单击“确定”<strong></strong>。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/newproject2.png" alt="新建 Internet 应用程序"/></p>
<h3>安装 MongoDB C# 驱动程序</h3>
<p>MongoDB 通过一个驱动程序在客户端支持 C# 应用程序，在本地开发计算机上需要安装该驱动程序。可通过 NuGet 获得 C# 驱动程序。</p>
<p>若要安装 MongoDB C# 驱动程序，请执行以下操作：</p>
<ol>
<li>
<p>在“解决方案资源管理器”<strong></strong>中，右键单击 <strong>MyTaskListApplication</strong> 项目的“引用”，然后选择“添加库程序包引用...”<strong></strong>。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/addreference.png" alt="添加库程序包引用"/></p>
</li>
<li>
<p>在“添加库程序包引用”<strong></strong>窗口中，单击“联机”<strong></strong>，然后搜索“mongocsharpdriver”。单击“安装”<strong></strong>以安装该驱动程序。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/addreference2.png" alt="搜索 MongoDB C# 驱动程序"/></p>
</li>
<li>
<p>单击“我接受”<strong></strong>以接受 10gen, Inc. 许可条款。</p>
</li>
<li>
<p>安装该驱动程序后，单击“关闭”<strong></strong>。<img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/addreference3.png" alt="MongoDB C# 驱动程序已安装"/></p>
</li>
</ol>
<p>现已安装 MongoDB C# 驱动程序。已向项目添加了对 <strong>MongoDB.Driver.dll</strong> 和 <strong>MongoDB.Bson.dll</strong> 库的引用。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/addreference4.png" alt="MongoDB C# 驱动程序引用"/></p>
<h3>添加模型</h3>
<p>在“解决方案资源管理器”<strong></strong>中，右键单击 <em>Models</em> 文件夹，然后“添加”<strong></strong>一个新“类”<strong></strong><em>TaskModel.cs</em>。在 <em>TaskModel.cs</em> 中，将现有代码替换为以下代码：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using MongoDB.Bson.Serialization.Attributes; using MongoDB.Bson.Serialization.IdGenerators; using MongoDB.Bson;  namespace MyTaskListApp.Models {     public class Task     {         [BsonId(IdGenerator = typeof(CombGuidGenerator))]         public Guid Id { get; set; }          [BsonElement("Name")]         public string Name { get; set; }          [BsonElement("Category")]         public string Category { get; set; }          [BsonElement("Date")]         public DateTime Date { get; set; }          [BsonElement("CreatedDate")]         public DateTime CreatedDate { get; set; }      } }</pre>
<h3>添加数据访问层</h3>
<p>在“解决方案资源管理器”<strong></strong>中，右键单击 <em>MyTaskListApp</em> 项目，然后“添加”<strong></strong>一个“新建文件夹”<strong></strong>，名为 <em>DAL</em>。右键单击 <em>DAL</em> 文件夹，然后“添加”<strong></strong>一个新类文件，名为 <em>Dal.cs</em>。在 <em>Dal.cs</em> 中，将现有代码替换为以下代码：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using MyTaskListApp.Models; using MongoDB.Driver; using System.Configuration;  namespace MyTaskListApp {     public class Dal : IDisposable     {         private MongoServer mongoServer = null;         private bool disposed = false;          // To do: update the connection string with the DNS name         // or IP address of your server.          //For example, "mongodb://testlinux.chinacloudapp.cn"         private string connectionString = "mongodb://&lt;vm-dns-name&gt;";          // This sample uses a database named "Tasks" and a          //collection named "TasksList".  The database and collection          //will be automatically created if they don't already exist.         private string dbName = "Tasks";         private string collectionName = "TasksList";          // Default constructor.                 public Dal()         {         }                  // Gets all Task items from the MongoDB server.                 public List&lt;Task&gt; GetAllTasks()         {             try             {                 MongoCollection&lt;Task&gt; collection = GetTasksCollection();                 return collection.FindAll().ToList&lt;Task&gt;();             }             catch (MongoConnectionException)             {                 return new List&lt;Task&gt;();             }         }          // Creates a Task and inserts it into the collection in MongoDB.         public void CreateTask(Task task)         {             MongoCollection&lt;Task&gt; collection = GetTasksCollectionForEdit();             try             {                 collection.Insert(task, SafeMode.True);             }             catch (MongoCommandException ex)             {                 string msg = ex.Message;             }         }          private MongoCollection&lt;Task&gt; GetTasksCollection()         {             MongoServer server = MongoServer.Create(connectionString);             MongoDatabase database = server[dbName];             MongoCollection&lt;Task&gt; todoTaskCollection = database.GetCollection&lt;Task&gt;(collectionName);             return todoTaskCollection;         }          private MongoCollection&lt;Task&gt; GetTasksCollectionForEdit()         {             MongoServer server = MongoServer.Create(connectionString);             MongoDatabase database = server[dbName];             MongoCollection&lt;Task&gt; todoTaskCollection = database.GetCollection&lt;Task&gt;(collectionName);             return todoTaskCollection;         }          # region IDisposable          public void Dispose()         {             this.Dispose(true);             GC.SuppressFinalize(this);         }          protected virtual void Dispose(bool disposing)         {             if (!this.disposed)             {                 if (disposing)                 {                     if (mongoServer != null)                     {                         this.mongoServer.Disconnect();                     }                 }             }              this.disposed = true;         }          # endregion     } }</pre>
<h3>添加控制器</h3>
<p>在“解决方案资源管理器”<strong></strong>中，打开 <em>Controllers\HomeController.cs</em> 文件，然后将现有代码替换为以下代码：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using MyTaskListApp.Models; using System.Configuration;  namespace MyTaskListApp.Controllers {     public class HomeController : Controller, IDisposable     {         private Dal dal = new Dal();         private bool disposed = false;         //         // GET: /Task/          public ActionResult Index()         {             return View(dal.GetAllTasks());         }          //         // GET: /Task/Create          public ActionResult Create()         {             return View();         }          //         // POST: /Task/Create          [HttpPost]         public ActionResult Create(Task task)         {             try             {                 dal.CreateTask(task);                 return RedirectToAction("Index");             }             catch             {                 return View();             }         }          public ActionResult About()         {             return View();         }          # region IDisposable          new protected void Dispose()         {             this.Dispose(true);             GC.SuppressFinalize(this);         }          new protected virtual void Dispose(bool disposing)         {             if (!this.disposed)             {                 if (disposing)                 {                     this.dal.Dispose();                 }             }              this.disposed = true;         }          # endregion      } }</pre>
<h3>设置网站样式</h3>
<p>若要更改页面顶部的标题，请在“解决方案资源管理器”<strong></strong>中打开 <em>Views\Shared\_Layout.cshtml</em> 文件，然后将现有的 <strong>h1</strong> 标题文本替换为以下内容：</p>
<pre class="prettyprint">&lt;h1&gt;My Task List Application&lt;/h1&gt;</pre>
<p>若要设置任务列表菜单，请打开 <em>\Views\Home\Index.cshtml</em> 文件，然后将现有代码替换为以下代码：</p>
<pre class="prettyprint">@model IEnumerable&lt;MyTaskListApp.Models.Task&gt;  @{     ViewBag.Title = "My Task List"; }  &lt;h2&gt;My Task List&lt;/h2&gt;  &lt;table border="1"&gt;     &lt;tr&gt;         &lt;th&gt;Task&lt;/th&gt;         &lt;th&gt;Category&lt;/th&gt;         &lt;th&gt;Date&lt;/th&gt;      &lt;/tr&gt;  @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Category)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Date)         &lt;/td&gt;      &lt;/tr&gt; }  &lt;/table&gt; &lt;div&gt;  @Html.Partial("Create", new MyTaskListApp.Models.Task())&lt;/div&gt;</pre>
<p>若要添加创建新任务的功能，请右键单击 <em>Views\Home\</em> 文件夹，然后“添加”<strong></strong>一个“视图”<strong></strong>。将该视图命名为 <em>Create</em>。将其代码替换为以下代码：</p>
<pre class="prettyprint">@model MyTaskListApp.Models.Task  &lt;script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"&gt;&lt;/script&gt;  @using (Html.BeginForm("Create", "Home")) {     @Html.ValidationSummary(true)     &lt;fieldset&gt;         &lt;legend&gt;New Task&lt;/legend&gt;          &lt;div class="editor-label"&gt;             @Html.LabelFor(model =&gt; model.Name)         &lt;/div&gt;         &lt;div class="editor-field"&gt;             @Html.EditorFor(model =&gt; model.Name)             @Html.ValidationMessageFor(model =&gt; model.Name)         &lt;/div&gt;          &lt;div class="editor-label"&gt;             @Html.LabelFor(model =&gt; model.Category)         &lt;/div&gt;         &lt;div class="editor-field"&gt;             @Html.EditorFor(model =&gt; model.Category)             @Html.ValidationMessageFor(model =&gt; model.Category)         &lt;/div&gt;          &lt;div class="editor-label"&gt;             @Html.LabelFor(model =&gt; model.Date)         &lt;/div&gt;         &lt;div class="editor-field"&gt;             @Html.EditorFor(model =&gt; model.Date)             @Html.ValidationMessageFor(model =&gt; model.Date)         &lt;/div&gt;          &lt;p&gt;             &lt;input type="submit" value="Create" /&gt;         &lt;/p&gt;     &lt;/fieldset&gt; }</pre>
<p><strong>解决方案资源管理器</strong>应类似于此：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/solnexplorer.png" alt="解决方案资源管理器"/></p>
<h3>设置 MongoDB 连接字符串</h3>
<p>在“解决方案资源管理器”<strong></strong>中，打开 <em>DAL/Dal.cs</em> 文件。找到下面这行代码：</p>
<pre class="prettyprint">private string connectionString = "mongodb://&lt;vm-dns-name&gt;";</pre>
<p>将 <code>&lt;vm-dns-name&gt;</code> 替换为您在本教程<a href="#virtualmachine">创建虚拟机和安装 MongoDB</a> 步骤中创建的运行 MongoDB 的虚拟机的 DNS 名称。若要查找虚拟机的 DNS 名称，请转到 Windows Azure 管理门户，选择“虚拟机”<strong></strong>，然后查找“DNS 名称”<strong></strong>。</p>
<p>如果虚拟机的 DNS 名称为“testlinuxvm.chinacloudapp.cn”，并且 MongoDB 侦听默认端口 27017，则连接字符串代码行将类似于此：</p>
<pre class="prettyprint">private string connectionString = "mongodb://testlinuxvm.chinacloudapp.cn";</pre>
<p>如果虚拟机终结点指定其他外部端口用于 MongoDB，则可在连接字符串中指定该端口：</p>
<pre class="prettyprint">private string connectionString = "mongodb://testlinuxvm.chinacloudapp.cn:12345";</pre>
<p>有关 MongoDB 连接字符串的详细信息，请参阅<a href="http://www.mongodb.org/display/DOCS/Connections">连接</a>。</p>
<h3>测试本地部署</h3>
<p>若要在开发计算机上运行应用程序，请从“调试”<strong></strong>菜单中选择“启动调试”<strong></strong>，或按 <strong>F5</strong>。随后启动开发 Web 服务器并打开浏览器，其中启动应用程序的主页。可添加新任务，而该任务将被添加到在 Windows Azure 中的虚拟机上运行的 MongoDB 数据库。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/tasklistappblank.png" alt="My Task List Application"/></p>
<h2><span class="short-header">将应用程序部署到 Windows Azure 网站</span>将 ASP.NET 应用程序部署到 Windows Azure 网站</h2>
<p>在本节中，您将创建一个网站，然后使用 Git 部署 My Task List ASP.NET 应用程序。</p>
<h3><a id="createwebsite"></a>创建 Windows Azure 网站</h3>
<p>在本节中，您将创建一个 Windows Azure 网站。</p>
<ol>
<li>打开 Web 浏览器，然后浏览到 <a href="http://manage.windowsazure.cn">Windows Azure管理门户</a>。用您的 Windows Azure 帐户进行登录。</li>
<li>在页面底部，依次单击“+新建”<strong></strong>、“网站”<strong></strong>、“快速创建”<strong></strong>。</li>
<li>输入应用程序 URL 的唯一前缀。</li>
<li>选择区域。</li>
<li>单击“创建网站”<strong></strong>。<img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/newwebsite.png" alt="创建新网站"/></li>
<li>随后将迅速创建您的网站，并将在“网站”<strong></strong>中列出该网站。<img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/dashboard.png" alt="仪表板"/></li>
</ol>
<h3><a id="deployapp"></a>使用 Git 将该 ASP.NET 应用程序部署到网站</h3>
<p>在本节中，您将使用 Git 部署 My Task List 应用程序。</p>
<ol>
<li>在“网站”<strong></strong>中单击您的网站名称，然后单击“仪表板”<strong></strong>。在 <strong>mytasklistapp</strong> 网站的“仪表板”<strong></strong>页底部，单击“设置 Git 发布”<strong></strong>。</li>
<li>在“新用户名和密码”<strong></strong>页中输入用户名和密码，然后单击复选标记。记下所得页上的说明，因为将在下一节中用到这些说明。</li>
<li>
<p>随后应迅速创建 Git 存储库。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/repoready.png" alt="Git 存储库准备就绪"/></p>
</li>
<li>
<p>选择“将我的本地文件推送到 Windows Azure”<strong></strong>以显示有关将代码推送到 Windows Azure 的说明。这些说明将类似于以下内容：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/gitinstructions.png" alt="将本地文件推送到 Windows Azure"/></p>
</li>
<li>如果还未安装 Git，则使用第 1 步中的“此处获取”<strong></strong>链接安装它。</li>
<li>按照第 2 步中的说明提交本地文件。</li>
<li>按第 3 步中的说明添加远程 Windows Azure 存储库并将您的文件推送到 Windows Azure 网站。</li>
<li>部署完毕后，您将看到以下确认：<img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/gitdeploymentcomplete.png" alt="部署完毕"/></li>
<li>您的 Windows Azure 网站现已可用。在“仪表板”<strong></strong>页中检查该网站，并检查“网站 URL”<strong></strong>字段以查找网站的 URL。按照本教程中的过程，可在此 URL 上访问您的网站：<a href="http://mytasklistapp.chinacloudsites.cn">http://mytasklistapp.chinacloudsites.cn</a>。</li>
</ol>
<h2><span class="short-header">摘要</span>摘要</h2>
<p>现在已将 ASP.NET 应用程序成功部署到 Windows Azure 网站。若要查看该网站，请单击“仪表板”<strong></strong>页的“网站 URL”<strong></strong>字段中的链接。有关用 MongoDB 开发 C# 应用程序的详细信息，请参阅 <a href="http://www.mongodb.org/display/DOCS/CSharp+Language+Center">CSharp Language Center</a>。</p>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>在虚拟机上使用 MongoDB 的 .NET 网站 - Windows Azure</pageTitle><metaKeywords>Azure Git ASP.NET MongoDB, Git .NET, Git MongoDB, ASP.NET MongoDB, Azure MongoDB, Azure ASP.NET, Azure 教程</metaKeywords><metaDescription><![CDATA[本教程向您传授如何使用 Git 将 ASP.NET 应用程序部署到虚拟机上连接到 MongoDB 的 Windows Azure 网站。]]></metaDescription><linkid>develop-dotnet-website-with-mongodb-vm</linkid><urlDisplayName>使用 MongoDB VM 创建网站</urlDisplayName><headerExpose></headerExpose><footerExpose>Windows Azure 开发：构建云应用程序入门</footerExpose><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate><localize>1</localize><localizePartial>0</localizePartial><sitemapHide></sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>