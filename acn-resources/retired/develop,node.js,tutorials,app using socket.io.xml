<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19021" parentID="19011" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="10" createDate="2013-07-11T11:17:22" updateDate="2014-08-18T11:17:22" nodeName="App Using Socket.IO" urlName="app-using-socketio" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17380,19011,19021" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO modalpopup="0" chunkurl="" chunkname="article-left-menu" hide="0" chunkpath="devcenter/node" modaltrigger="" macroAlias="AzureChunkDisplayer" />
<h1>在 Windows Azure 云服务中使用 Socket.IO 构建 Node.js 聊天应用程序</h1>
<p>Socket.IO 在 node.js 服务器和客户端之间提供实时通信。本教程指导您如何在 Windows Azure 上托管一个基于 socket.IO 的聊天应用程序。有关 Socket.IO 的详细信息，请参阅 <a href="http://socket.io/">http://socket.io/</a>。</p>
<p>以下是已完成应用程序的屏幕快照：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-10.png" alt="显示托管在 Windows Azure 上的服务的浏览器窗口"/></p>
<h2>创建云服务项目</h2>
<p>以下步骤创建将托管 Socket.IO 应用程序的云服务项目。</p>
<ol>
<li>
<p>从<strong>“开始”菜单</strong>或<strong>“开始”屏幕</strong>，搜索“Windows Azure PowerShell”。最后，右键单击“Windows Azure PowerShell”并选择“以管理员身份运行”。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/azure-powershell-start.png" alt="Windows Azure PowerShell 图标"/></p>
<?UMBRACO_MACRO hide="0" chunkpath="devcenter/node" chunkname="install-dev-tools" macroAlias="AzureChunkDisplayer" />
</li>
<li>
<p>将目录更改为 <strong>c:\node</strong> 目录，然后输入以下命令创建一个名为 <strong>chatapp</strong> 的新解决方案和一个名为 <strong>WorkerRole1</strong> 的辅助角色：</p>
<pre class="prettyprint">PS C:\node&gt; New-AzureServiceProject chatapp
PS C:\Node&gt; Add-AzureNodeWorkerRole</pre>
<p>您将看到以下响应：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-1.png" alt="new-azureservice 和 add-azurenodeworkerrole cmdlet 的输出"/></p>
</li>
</ol>
<h2>下载聊天示例</h2>
<p>对于此项目，我们将使用 <a href="https://github.com/LearnBoost/socket.io">Socket.IO GitHub 存储库</a>中的聊天示例。执行以下步骤下载该示例并将其添加到您先前创建的项目中。</p>
<ol>
<li>
<p>使用“克隆”按钮创建存储库的本地副本。您还可以使用“ZIP”按钮下载项目。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-2.png" alt="显示 https://github.com/LearnBoost/socket.io/tree/master/examples/chat 的浏览器窗口，其中 ZIP 下载图标突出显示"/></p>
</li>
<li>
<p>浏览本地存储库的目录结构，找到 <strong>examples\chat</strong> 目录。将该目录的内容复制到早先创建的 <strong>C:\node\chatapp\WorkerRole1</strong> 目录。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-5.png" alt="资源管理器，显示从存档中解压缩的 examples\chat 目录的内容"/></p>
<p>上面的屏幕截图中突出显示的项目是从 <strong>examples\chat</strong> 目录复制的文件</p>
</li>
<li>
<p>在 <strong>C:\node\chatapp\WorkerRole1</strong> 目录中，删除 <strong>server.js</strong> 文件，然后将 <strong>app.js</strong> 文件重命名为 <strong>server.js</strong>。这将移除先前由 <strong>Add-AzureNodeWorkerRole</strong> cmdlet 创建的默认 <strong>server.js</strong> 文件并用聊天示例中的应用程序文件取代。</p>
</li>
</ol>
<h3>修改 Server.js 并安装模块</h3>
<p>在 Windows Azure 仿真程序中测试应用程序之前，必须进行一些小改动。对 server.js 文件执行以下步骤：</p>
<ol>
<li>
<p>在记事本或其他文本编辑器中打开 server.js 文件。</p>
</li>
<li>
<p>在 server.js 的开头处查找 <strong>Module dependencies</strong> 部分，将包含 <strong>sio = require('..//..//lib//socket.io')</strong> 的行改为 <strong>sio = require('socket.io')</strong>，如下所示：</p>
<pre class="prettyprint">var express = require('express')
, stylus = require('stylus')
, nib = require('nib')
//, sio = require('..//..//lib//socket.io'); //Original
, sio = require('socket.io');                //Updated</pre>
</li>
<li>
<p>为了确保应用程序侦听正确端口，请在记事本或您喜爱的编辑器中打开 server.js，然后通过将 <strong>3000</strong> 替换为 <strong>process.env.port</strong> 来更改以下行，如下所示：</p>
<pre class="prettyprint">//app.listen(3000, function () {            //Original
app.listen(process.env.port, function () {  //Updated
  var addr = app.address();
  console.log('   app listening on http://' + addr.address + ':' + addr.port);
});</pre>
</li>
</ol>
<p>保存对 server.js 所做更改后，使用以下步骤安装所需的模块，然后在 Windows Azure 仿真程序中测试应用程序：</p>
<ol>
<li>
<p>使用 <strong>Windows Azure PowerShell</strong>，将目录更改为 <strong>C:\node\chatapp\WorkerRole1</strong> 目录，然后使用下面的命令安装此应用程序所需的模块：</p>
<pre class="prettyprint">PS C:\node\chatapp\WorkerRole1&gt; npm install</pre>
<p>这将安装 package.json 文件中所列的模块。命令完成后，您应该看到类似下面的输出：</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-7.png" alt="npm install 命令的输出"/></p>
</li>
<li>
<p>因为此示例最初是 Socket.IO GitHub 存储库的一部分，并通过相对路径直接引用了 Socket.IO 库，而 package.json 文件中未引用 Socket.IO，所以我们必须通过发出以下命令来安装它：</p>
<pre class="prettyprint">PS C:\node\chatapp\WorkerRole1&gt; npm install socket.io -save</pre>
</li>
</ol>
<h3>测试和部署</h3>
<ol>
<li>
<p>通过发出以下命令启动仿真程序：</p>
<pre class="prettyprint">PS C:\node\chatapp\WorkerRole1&gt; Start-AzureEmulator -Launch</pre>
</li>
<li>
<p>当浏览器窗口打开时，输入一个昵称，然后按 Enter。这样，您就可以以特定昵称发布消息。要测试多用户功能，请使用同一 URL 打开另外的浏览器窗口但输入不同的昵称。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-8.png" alt="显示来自用户 1 和用户 2 的聊天消息的两个浏览器窗口"/></p>
</li>
<li>
<p>测试应用程序之后，发出以下命令停止仿真程序：</p>
<pre class="prettyprint">PS C:\node\chatapp\WorkerRole1&gt; Stop-AzureEmulator</pre>
</li>
<li>
<p>要将应用程序部署到 Windows Azure，请使用 <strong>Publish-AzureServiceProject</strong> cmdlet。例如：</p>
<pre class="prettyprint">PS C:\node\chatapp\WorkerRole1&gt; Publish-AzureServiceProject -ServiceName mychatapp -Location "East US" -Launch</pre>
<div class="dev-callout"><strong>注意</strong>
<p>确保使用唯一名称，否则发布过程会失败。部署完成后，浏览器将打开并导航到已部署的服务。</p>
<p>如果您收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则您必须先为您的订阅下载和导入发布配置文件，然后再部署到 Windows Azure。请参阅<a href="/zh-cn/develop/nodejs/tutorials/getting-started/">构建 Node.js 应用程序并部署到 Windows Azure 云服务</a>的“将应用程序部署到 Windows Azure”一节。</p>
</div>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/node/socketio-10.png" alt="显示托管在 Windows Azure 上的服务的浏览器窗口"/></p>
<div class="dev-callout"><strong>注意</strong>
<p>如果您收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则您必须先为您的订阅下载和导入发布配置文件，然后再部署到 Windows Azure。请参阅<a href="/zh-cn/develop/nodejs/tutorials/getting-started/">构建 Node.js 应用程序并部署到 Windows Azure 云服务</a>的“将应用程序部署到 Windows Azure”一节</p>
</div>
</li>
</ol>
<p>现在您的应用程序在 Windows Azure 上运行，它可以使用 Socket.IO 在不同客户端之间中继聊天消息。</p>
<div class="dev-callout"><strong>注意</strong>
<p>为简单起见，此示例仅限于连接到同一实例的用户之间的聊天。这意味着如果云服务创建两个辅助角色实例，用户将只能够与连接到同一辅助角色实例的其他用户聊天。要缩放应用程序以使用多个角色实例，您可以使用像 Service Bus 这样的技术在实例之间共享 Socket.IO 存储状态。要获取相关示例，请参阅 <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Windows Azure SDK for Node.js GitHub 存储库</a>中的 Service Bus 队列和主题使用示例。</p>
</div>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>使用 Socket.io 构建 Node.js 应用程序 - Windows Azure 教程</pageTitle><localize>1</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>dev-nodejs-worker-app-with-socketio</linkid><metaKeywords>Azure Node.js socket.io 教程, Azure Node.js socket.io, Azure Node.js 教程</metaKeywords><metaDescription><![CDATA[本教程演示如何在托管在 Windows Azure 上的 node.js 应用程序中使用 socket.io]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>使用 Socket.IO 的应用程序</urlDisplayName><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate></TextpageLeftNav></localize>