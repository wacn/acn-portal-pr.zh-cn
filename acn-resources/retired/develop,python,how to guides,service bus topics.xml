<?xml version="1.0" encoding="UTF-8"?>
<localize><TextpageLeftNav id="19135" parentID="19130" level="5" writerID="52" creatorID="94" nodeType="1137" template="1052" sortOrder="5" createDate="2013-07-11T11:45:24" updateDate="2014-08-18T11:21:53" nodeName="Service Bus Topics" urlName="service-bus-topics" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18397,19130,19135" isDoc=""><bodyText><![CDATA[<div>
<h1>如何使用 Service Bus 主题/订阅</h1>
<p>本指南将演示如何从 Python 应用程序使用 Service Bus 主题和订阅。涉及的应用场景包括<strong>创建主题和订阅、创建订阅筛选器、将消息发送到主题</strong>、<strong>从订阅接收消息</strong>以及<strong>删除主题和订阅</strong>。有关主题和订阅的详细信息，请参阅<a href="#nextsteps">后续步骤</a>一节。</p>
<h2>目录</h2>
<ul>
<li><a href="#what-are-service-bus-topics">什么是 Service Bus 主题和订阅？</a></li>
<li><a href="#create-a-service-namespace">创建服务命名空间</a></li>
<li><a href="#obtain-default-credentials">获取命名空间的默认管理凭据</a></li>
<li><a href="#How_to_Create_a_Topic">如何：创建主题</a></li>
<li><a href="#How_to_Create_Subscriptions">如何：创建订阅</a></li>
<li><a href="#How_to_Send_Messages_to_a_Topic">如何：将消息发送到主题</a></li>
<li><a href="#How_to_Receive_Messages_from_a_Subscription">如何：从订阅接收消息</a></li>
<li><a href="#How_to_Handle_Application_Crashes_and_Unreadable_Messages">如何：处理应用程序崩溃和不可读消息</a></li>
<li><a href="#How_to_Delete_Topics_and_Subscriptions">如何：删除主题和订阅</a></li>
<li><a href="#Next_Steps">后续步骤</a></li>
</ul>
<!--?UMBRACO_MACRO chunkpath="devcenter/shared (1)" hide="0" chunkname="howto-service-bus-topics" macroAlias="AzureChunkDisplayer" ?-->
<p><strong>注意：</strong>如果您需要安装 Python 或客户端库，请参阅 <a href="/zh-cn/develop/python/common-tasks/install-python">Python 安装指南</a>。</p>
<h2>如何创建主题</h2>
<p>可以通过 <strong>ServiceBusService</strong> 对象处理主题。将以下代码添加到任何 Python 文件的顶部附近，您希望在其中以编程方式访问 Windows Azure Service Bus：</p>
<pre class="prettyprint">from azure.servicebus import *</pre>
<p>以下代码创建 <strong>ServiceBusService</strong> 对象。使用实际命名空间、密钥和颁发者替换“mynamespace”、“mykey”和“myissuer”。</p>
<pre class="prettyprint">bus_service = ServiceBusService(service_namespace='mynamespace', account_key='mykey', issuer='myissuer')

bus_service.create_topic('mytopic')</pre>
<p><strong>create_topic</strong> 还支持其他选项，以允许您重写默认主题设置，例如消息生存时间或最大主题大小。下面的示例演示如何将最大主题大小设置为 5 GB，将生存时间设置为 1 分钟：</p>
<pre class="prettyprint">topic_options = Topic()
topic_options.max_size_in_megabytes = '5120'
topic_options.default_message_time_to_live = 'PT1M'

bus_service.create_topic('mytopic', topic_options)</pre>
<h2>如何创建订阅</h2>
<p>主题订阅也是使用 <strong>ServiceBusService</strong> 对象创建的。为订阅命名，并且订阅可以具有可选筛选器，以限制传送到订阅的虚拟队列的消息集。</p>
<p><strong>注意</strong>：订阅是永久性的，并且除非删除它或删除与之相关的主题，否则订阅将一直存在。</p>
<h3>创建具有默认 (MatchAll) 筛选器的订阅</h3>
<p><strong>MatchAll</strong> 筛选器是默认筛选器，在创建新订阅时，如果未指定任何筛选器，将使用它。当使用 <strong>MatchAll</strong> 筛选器时，会将发布到主题的所有消息都置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 <strong>MatchAll</strong> 筛选器。</p>
<pre class="prettyprint">bus_service.create_subscription('mytopic', 'AllMessages')</pre>
<h3>创建具有筛选器的订阅</h3>
<p>还可以设置筛选器，以确定发送到主题的哪些消息应该在特定主题订阅中显示。</p>
<p>订阅支持的最灵活的筛选器类型是 <strong>SqlFilter</strong>，它实现了部分 SQL92。SQL 筛选器对发布到主题的消息的属性起作用。有关可与 SQL 筛选器结合使用的表达式的更多详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx">SqlFilter.SqlExpression</a> 语法。</p>
<p>可以使用 <strong>ServiceBusService</strong> 对象的 <strong>create_rule</strong> 方法向订阅中添加筛选器。此方法允许您向现有订阅中添加新筛选器。</p>
<p><strong>注意</strong>：由于默认筛选器会自动应用到所有新订阅，因此，您必须首先删除默认筛选器，否则 <strong>MatchAll</strong> 会替代您可能指定的任何其他筛选器。可以使用 <strong>ServiceBusService</strong> 对象的 <strong>delete_rule</strong> 方法删除默认规则。</p>
<p>下面的示例创建一个名为“HighMessages”的订阅，其 <strong>SqlFilter</strong> 只选择自定义 <strong>messagenumber</strong> 属性大于 3 的消息：</p>
<pre class="prettyprint">bus_service.create_subscription('mytopic', 'HighMessages')

rule = Rule()
rule.filter_type = 'SqlFilter'
rule.filter_expression = 'messagenumber &gt; 3'

bus_service.create_rule('mytopic', 'HighMessages', 'HighMessageFilter', rule)
bus_service.delete_rule('mytopic', 'HighMessages', DEFAULT_RULE_NAME)</pre>
<p>类似地，下面的示例创建一个名为“LowMessages”的订阅，其 <strong>SqlFilter</strong> 只选择 <strong>messagenumber</strong> 属性小于或等于 3 的消息：</p>
<pre class="prettyprint">bus_service.create_subscription('mytopic', 'LowMessages')

rule = Rule()
rule.filter_type = 'SqlFilter'
rule.filter_expression = 'messagenumber &lt;= 3'

bus_service.create_rule('mytopic', 'LowMessages', 'LowMessageFilter', rule)
bus_service.delete_rule('mytopic', 'LowMessages', DEFAULT_RULE_NAME)</pre>
<p>现在，在将消息发送到“mytopic”时，始终会将它传送到订阅了“AllMessages”主题订阅的接收者，并选择性地传送到订阅了“HighMessages”和“LowMessages”主题订阅的接收者（具体取决于消息内容）。</p>
<h2>如何将消息发送到主题</h2>
<p>若要将消息发送到 Service Bus 主题，您的应用程序必须使用 <strong>ServiceBusService</strong> 对象的 <strong>send_topic_message</strong> 方法。</p>
<p>下面的示例演示如何向“mytopic”发送五条测试消息。请注意，每条消息的 <strong>messagenumber</strong> 属性值因循环迭代而异（这将确定哪些订阅接收它）：</p>
<pre class="prettyprint">for i in range(5):
    msg = Message('Msg ' + str(i), custom_properties={'messagenumber':i})
    bus_service.send_topic_message('mytopic', msg)</pre>
<p>Service Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。</p>
<h2>如何从订阅接收消息</h2>
<p>对 <strong>ServiceBusService</strong> 对象使用 <strong>receive_subscription_message</strong> 方法可从订阅接收消息：</p>
<pre class="prettyprint">msg = bus_service.receive_subscription_message('mytopic', 'LowMessages')
print(msg.body)</pre>
<p>在读取消息后将从订阅中删除它们；不过，通过将可选参数 <strong>peek_lock</strong> 设置为 <strong>True</strong>，您可以读取（扫视）并锁定消息，以避免将其从订阅中删除。</p>
<p>在接收过程中读取并删除消息的默认行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。因为 Service Bus 会将消息标记为已使用，所以在应用程序重新启动并开始再次使用消息时，它会遗漏在崩溃之前使用过的消息。</p>
<p>如果将 <strong>peek_lock</strong> 参数设置为 <strong>True</strong>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 <strong>Message</strong> 对象调用 <strong>delete</strong> 方法来完成接收过程的第二个阶段。<strong>delete</strong> 方法会将消息标记为已使用，并从订阅中删除它。</p>
<pre class="prettyprint">msg = bus_service.receive_subscription_message('mytopic', 'LowMessages', peek_lock=True)
print(msg.body)

msg.delete()</pre>
<h2>如何处理应用程序崩溃和不可读消息</h2>
<p>Service Bus 提供了相关功能来帮助您轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <strong>Message</strong> 对象调用 <strong>unlock</strong> 方法。这会导致 Service Bus 在订阅中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</p>
<p>还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使之重新可供接收。</p>
<p>如果应用程序在处理消息之后，但在调用 <strong>delete</strong> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。这通常称为“至少处理一次”，即，将对每条消息至少处理一次，但在某些情况下，可能会重新传送同一消息。如果某个场景不允许重复处理，则应用程序开发人员应在其应用程序中添加额外逻辑来处理重复消息传送。这通常可以通过使用消息的 <strong>MessageId</strong> 属性来实现，该属性在多次传送尝试中保持不变。</p>
<h2>如何删除主题和订阅</h2>
<p>主题和订阅具有持久性，必须通过 Windows Azure 管理门户或以编程方式显式删除。下面的示例演示如何删除名为“mytopic”的主题：</p>
<pre class="prettyprint">bus_service.delete_topic('mytopic')</pre>
<p>删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。下面的代码演示如何从“mytopic”主题中删除名为“HighMessages”的订阅：</p>
<pre class="prettyprint">bus_service.delete_subscription('mytopic', 'HighMessages')</pre>
<h2>后续步骤</h2>
<p>现在，您已了解有关 Service Bus 主题的基础知识，单击下面的链接可了解更多信息。</p>
<ul>
<li>查看 MSDN 参考：<a href="http://msdn.microsoft.com/zh-cn/library/hh367516.aspx">队列、主题和订阅</a>。</li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.aspx">SqlFilter</a> 的 API 参考。</li>
</ul>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>service bus topics</pageTitle><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><linkid>service bus topics</linkid><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><headerExpose></headerExpose><footerExpose></footerExpose><urlDisplayName>service bus topics</urlDisplayName><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate></TextpageLeftNav></localize>