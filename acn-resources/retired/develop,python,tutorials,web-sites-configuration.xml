<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="19157" parentID="19145" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="11" createDate="2013-07-11T11:50:01" updateDate="2014-08-18T11:22:23" nodeName="web-sites-configuration" urlName="web-sites-configuration" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,18397,19145,19157" isDoc=""><bodyText><![CDATA[<div><!--?UMBRACO_MACRO chunkpath="devcenter/python" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" ?-->
<h1>使用 Windows Azure 网站配置 Python</h1>
<p>本教程介绍用于在 Windows Azure 网站上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的各种方法。Windows Azure 网站的使用很简单，并且您的 Python 应用程序将有缩放和扩展到其他 Windows Azure 服务的空间。Windows Azure 网站平台包括 Python 2.7 和 Python 的常规 wfastcgi.py FastCGI 处理程序。您只需将网站配置为使用 Python 处理程序。</p>
<p>有关在 Windows Azure 网站上配置 Django 框架的更复杂示例，请参阅以下教程：<a href="http://www.windowsazure.cn/zh-cn/develop/python/tutorials/web-sites-with-django">http://www.windowsazure.cn/zh-cn/develop/python/tutorials/web-sites-with-django</a>。</p>
<h2>WSGI 支持</h2>
<p>WSGI 是 <a href="http://www.python.org/dev/peps/pep-3333/">PEP 3333</a> 描述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。它提供了用于使用 Python 编写各种 Web 应用程序和框架的标准化接口。当今常用的 Python Web 框架都使用 WSGI。Windows Azure 网站支持任何此类框架；另外，高级用户甚至可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范指南即可。</p>
<h2>网站创建</h2>
<p>本教程使用现有 Windows Azure 订阅以及对 Windows Azure 管理门户的访问权限。<a href="http://www.windowsazure.cn/zh-cn/manage/services/web-sites/how-to-create-websites">http://www.windowsazure.cn/zh-cn/manage/services/web-sites/how-to-create-websites</a> 上提供了有关创建网站的详细指南。</p>
<p>简言之，如果您没有现成的网站，则可以从 Windows Azure 管理门户创建一个。选择“网站”功能并使用“快速创建”选项，然后为您的网站指定 URL。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/python/configure-python-create-website.png"/></p>
<h2>Git 发布</h2>
<p>使用您新创建的网站的“快速启动”或“仪表板”选项卡来配置 Git 发布。本教程使用 Git 来创建和管理我们的 Python 网站并将其发布到 Windows Azure 网站。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/python/configure-python-git.png"/></p>
<p>在设置 Git 发布之后，将创建 Git 存储库并使其与您的网站相关联。将显示该存储库的 URL，并且之后可将其用于将数据从本地开发环境推送到云。若要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并使用提供的说明将您的网站内容推送到 Windows Azure 网站。</p>
<h2>网站内容</h2>
<p>例如，我们使用基本 Python 应用程序，其中的基本 WSGI 处理程序指明利用 Windows Azure 网站中的 Python 支持所需的最少工作量。此框架性 Python 应用程序稍后可用于开始创作各种解决方案，其复杂性范围从以下示例一直到完备的 Web 框架。</p>
<p>下面是基本 WSGI 处理程序的代码。它类似于 <a href="http://www.python.org/dev/peps/pep-3333/">PEP 3333</a> 规范建议作为符合 WSGI 的应用程序的起点的代码。我们将此内容保存到了在网站根下的 ConfigurePython 文件夹中创建的名为 ConfigurePython.py 的文件中：</p>
<pre class="prettyprint">def application(environ, start_response):
    status = '200 OK'
    response_headers = [('Content-type', 'text/plain')]
    start_response(status, response_headers)
    yield 'Hello from Windows Azure Websites\n'</pre>
<p><em>application</em> 是可调用的 Python，它将充当符合 WSGI 的服务器调用的入口点。此可调用对象接受 2 个位置参数：</p>
<ul>
<li><em>environ</em>：具有各种环境变量的字典</li>
<li><em>start_response</em>：Web 服务器提供的用于传送 HTTP 状态和响应标头的可调用参数</li>
</ul>
<p>此处理程序将为对它发出的每个请求返回纯文本“Hello from Windows Azure Websites”。</p>
<h2>配置选项</h2>
<p>有 2 种用于使用 Windows Azure 网站配置您的 Python 应用程序的不同方法。</p>
<p><strong>方法 1：门户</strong></p>
<p>1.1. 通过门户中的“配置”选项卡注册 FastCGI 处理程序。对于此示例，我们使用 Windows Azure 网站包括的 Python 的 FastCGI 处理程序。若要执行相同操作，请对您的脚本处理器和 FastCGI 处理程序参数使用以下路径：</p>
<ul>
<li>Python 脚本处理器路径：D:\python27\python.exe</li>
<li>Python FastCGI 处理程序路径：D:\python27\scripts\wfastcgi.py</li>
</ul>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/python/configure-python-handler-mapping.png"/></p>
<p>1.2. 通过门户中的同一“配置”选项卡配置应用程序设置。应用程序设置将转换为环境变量。这是可用于 Python 应用程序所需的配置值的机制。对于此基本示例应用程序，我们配置了以下值：</p>
<ul>
<li>PYTHONPATH 通知 Python 要在其中搜索模块的目录。Windows Azure 网站提供 D:\home\site\wwwroot 作为指向您的网站的根的语法糖。</li>
<li>WSGI_HANDLER 记录模块或包名称以及要使用的属性。</li>
</ul>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/python/configure-python-app-settings.png"/></p>
<p><strong>方法 2：web.config</strong> <br />该配置替代方法是使用网站根下的 web.config 文件执行操作，如下所述。使用 web.config 方法为 Web 应用程序提供了更好的潜在可移植性。有 2 种方法可用于将请求路由到 Web 应用程序：设置处理 * 路径的处理程序，以指示 IIS 通过 Python 路由每个传入请求；或设置 Python 将处理的特定路径，以便稍后使用 URL 重写将各种 URL 重定向到我们所选的路径。事实上，建议采用后一种方法 – 使用网站根下的空处理程序文件来充当请求目标（在我们的示例中为 handler.fcgi）– 以提高性能。在前一个方案中，包括对静态内容（例如，图像文件和样式表）的请求的所有请求将必须通过 Python，从而影响 Web 服务器为访问静态文件提供的优化功能。使用后一种方法允许高效提供静态内容并只在必要时调用 Python。</p>
<p>2.1. 指定 PYTHONPATH 变量。</p>
<blockquote>
<p>这会通知 Python 在哪里查找应用程序代码。在这里，也使用 D:\home\site\wwwroot 作为网站的绝对路径。</p>
</blockquote>
<p>2.2. 设置 WSGI_HANDLER 变量。</p>
<blockquote>
<p>Windows Azure 网站使用此值来指示 Python 调用我们的 WSGI 处理程序。此变量的值是一个 Python 表达式，在执行时，应返回表示 WSGI 处理程序的可调用值。</p>
</blockquote>
<p>2.3. 添加 Python 的处理程序。</p>
<blockquote>
<p>这会通知 Windows Azure 网站 Python 应处理对路径 handler.fcgi 发出的请求。处理程序语法与以下示例中的 &lt;handlers&gt; 标记内的内容完全相同很重要，除非您具有自己的 FastCGI 处理程序或 Python 开发堆栈。</p>
</blockquote>
<p>2.4. 重写到 handler.fcgi 的 URL。</p>
<blockquote>
<p>一直请求 handler.fcgi 可能不是最好的主意。为选择要由 Python 处理程序处理的文件的路径，我们使用了 URL 重写，以便所有 URL 都将由我们的 Python 处理程序进行处理。</p>
</blockquote>
<pre class="prettyprint">&lt;configuration&gt;
    &lt;appSettings&gt;
        &lt;add key="pythonpath" value="D:\home\site\wwwroot\ConfigurePython" /&gt;
        &lt;add key="WSGI_HANDLER" value="ConfigurePython.application" /&gt;
    &lt;/appSettings&gt;
    &lt;system.webServer&gt;
        &lt;handlers&gt;
            &lt;add name="PythonHandler" 
            verb="*" path="handler.fcgi" 
            modules="FastCgiModule" 
            scriptProcessor="D:\Python27\Python.exe|D:\Python27\Scripts\wfastcgi.py" 
            resourceType="Either" /&gt;
        &lt;/handlers&gt;
        &lt;rewrite&gt;
            &lt;rules&gt;
                &lt;rule name="Configure Python" stopProcessing="true"&gt;
                    &lt;match url="(.*)" ignoreCase="false" /&gt;
                    &lt;conditions&gt;
                        &lt;add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" /&gt;
                    &lt;/conditions&gt;
                    &lt;action type="Rewrite" url="handler.fcgi/{R:1}" appendQueryString="false" /&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
        &lt;/rewrite&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;</pre>
<p>网站根下的示例文件夹结构如下（Python 文件夹和文件名称的大小写很重要并反映在 web.config 中）：</p>
<ul>
<li>ConfigurePython\ConfigurePython.py</li>
<li>web.config</li>
<li>handler.fcgi</li>
</ul>
<p>因为我们重写到 handler.fcgi 的所有 URL 并通过 FastCGI 将该路径传递给 Python，所以我们需要创建同名的占位符文件，以便 IIS 不会返回 HTTP 404 错误。这是由于 IIS FastCGI 模块的内部行为，它强制要请求的文件必须先存在，然后才能将该文件传递给指定的脚本处理器应用程序。</p>
<p>浏览到您的网站来测试配置是否正确。对于此示例，在访问时将显示“Hello from Windows Azure Websites”消息。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/python/configure-python-result.png"/></p>
</div>]]></bodyText><umbracoNaviHide>0</umbracoNaviHide><pageTitle>web-sites-configuration</pageTitle><metaKeywords></metaKeywords><metaDescription><![CDATA[]]></metaDescription><linkid>web-sites-configuration</linkid><urlDisplayName>web-sites-configuration</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>0</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate></pageTemplate><localize>0</localize><localizePartial>0</localizePartial><sitemapHide>0</sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>