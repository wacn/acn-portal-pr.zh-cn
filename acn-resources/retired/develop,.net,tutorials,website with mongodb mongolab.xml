<?xml version="1.0" encoding="UTF-8"?>
<localize><umbTextpage id="18873" parentID="18433" level="5" writerID="52" creatorID="94" nodeType="1059" template="1052" sortOrder="21" createDate="2013-07-11T10:54:52" updateDate="2014-08-18T11:10:42" nodeName="Website with MongoDB MongoLab" urlName="website-with-mongodb-mongolab" writerName="uRest" creatorName="xunfan" path="-1,11978,13431,17371,18433,18873" isDoc=""><bodyText><![CDATA[<div>
<?UMBRACO_MACRO chunkpath="devcenter/dotnet" hide="0" chunkname="article-left-menu" macroAlias="AzureChunkDisplayer" />
<h1>使用 MongoLab 外接程序通过 MongoDB 在 Windows Azure 上创建 C# ASP.NET 应用程序</h1>
<p><em>作者：Eric Sedor，MongoLab</em></p>
<p>各位冒险家，大家好！欢迎使用 MongoDB 即服务。在本教程中您将：</p>
<ol>
<li><a href="#provision">配置数据库</a> - Windows Azure 应用商店 <a href="http://mongolab.com">MongoLab</a> 外接程序将为您提供一个托管在 Windows Azure 云中并由 MongoLab 的云数据库平台管理的 MongoDB 数据库。</li>
<li><a href="#create">创建应用程序</a> - 它将是一个用于做笔记的简单 C# ASP.NET MVC 应用程序。</li>
<li><a href="#deploy">部署应用程序</a> - 通过将一些配置联系在一起，我们将使推送代码易如反掌。</li>
<li><a href="#manage">管理数据库</a> - 最后，我们将向您演示 MongoLab 基于 Web 的数据库管理门户，在此您可轻松搜索、显示和修改数据。</li>
</ol>
<p>在本教程的任意时间，如有任何问题，请随时发送电子邮件至 <a href="mailto:support@mongolab.com">support@mongolab.com</a>。</p>
<h2>快速入门</h2>
<p>如果已有要使用的 Windows Azure 应用程序和网站，或比较熟悉 Windows Azure 应用商店，则可快速浏览本节。否则，接下来请执行下面的<a href="#provision">配置数据库</a>。</p>
<ol>
<li>打开 Windows Azure 应用商店。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/button-store.png" alt="应用商店"/></li>
<li>购买 MongoLab 外接程序。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/entry-mongolab.png" alt="MongoLab"/></li>
<li>单击“外接程序”列表中您的 MongoLab 外接程序，然后单击“连接信息”<strong></strong>。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/button-connectioninfo.png" alt="连接信息按钮"/></li>
<li>将 MONGOLAB_URI 复制到剪贴板。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/shared/dialog-mongolab_connectioninfo.png" alt="连接信息屏幕"/><br /><strong>此 URI 包含您的数据库用户名和密码。将其视为敏感信息而不要共享它。</strong></li>
<li>将该值添加到您的 Windows Azure Web 应用程序的“配置”菜单中的“连接字符串”列表：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/focus-mongolab-websiteconnectionstring.png" alt="网站连接字符串"/></li>
<li>对于“名称”<strong></strong>，请输入 MONGOLAB_URI。</li>
<li>对于“值”<strong></strong>，请粘贴我们在上一节中获得的连接字符串。</li>
<li>在“类型”下拉列表中选择“自定义”<strong></strong>（而不是默认的“SQLAzure”<strong></strong>）。</li>
<li>在 Visual Studio 中，通过选择“工具”&gt;“库程序包管理器”&gt;“程序包管理器控制台”<strong></strong>，安装 Mongo C# 驱动程序。在程序包管理器控制台上，键入 <strong>Install-Package mongocsharpdriver</strong>，然后按 <strong>Enter</strong>。</li>
<li>
<p>在代码中设置挂钩以从环境变量获得 MongoLab 连接 URI：</p>
<pre class="prettyprint">using MongoDB.Driver;   ... private string connectionString = System.Environment.GetEnvironmentVariable("CUSTOMCONNSTR_MONGOLAB_URI"); ... MongoServer server = MongoServer.Create(connectionString);</pre>
<p>注意：Windows Azure 会向最初声明的连接字符串添加 <strong>CUSTOMCONNSTR_</strong> 前缀，这正是代码引用 <strong>CUSTOMCONNSTR_MONGOLAB_URI</strong> 而不是 <strong>MONGOLAB_URI</strong> 的原因。</p>
</li>
</ol>
<p>现在，开始完整教程...</p>
<h2><a name="provision"></a>设置数据库</h2>
<?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-provision-mongolab" macroAlias="AzureChunkDisplayer" />
<h2><a name="create"></a>创建应用程序</h2>
<p>在本节中，您将完成创建 C# ASP.NET Visual Studio 项目的整个过程，并演练使用 C# MongoDB 驱动程序创建一个简单的笔记应用程序。您希望能够访问您的网站、撰写笔记以及查看留下的所有笔记。</p>
<p>您将在 Visual Studio Express 2012 for Web 中进行此项开发。</p>
<h3>创建项目</h3>
<p>您的简单应用程序将以 Visual Studio 模板开始。务必使用 .NET Framework 4.0。</p>
<ol>
<li>选择“文件”&gt;“新建项目”<strong></strong>。随后显示“新建项目”对话框：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/dialog-mongolab-csharp-newproject.png" alt="新建项目"/></li>
<li>选择“已安装的模板”&gt;“Visual C#”&gt;“Web”<strong></strong>。</li>
<li>
<p>从 .NET 版本下拉菜单中选择“.NET Framework 4”<strong></strong>（<em>注意：此时 Framework 4.5 无效</em>）。</p>
<p><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/focus-dotnet-framework4-mongolab.png" alt="项目 Framework"/></p>
</li>
<li>选择“ASP.NET MVC 4 Web 应用程序”<strong></strong>。</li>
<li>输入 <em>mongoNotes</em> 作为“项目名称”<strong></strong>。如果选择其他名称，则需要在整个教程中修改所提供的代码。</li>
<li>单击“确定”<strong></strong>。随后显示“项目模板”对话框：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/dialog-mongolab-csharp-projecttemplate.png" alt="项目模板"/></li>
<li>选择“Internet 应用程序”<strong></strong>，然后单击“确定”<strong></strong>。此时即生成项目。</li>
<li>
<p>选择“工具”&gt;“库程序包管理器”&gt;“程序包管理器控制台”<strong></strong>。在程序包管理器控制台上，键入 <strong>Install-Package mongocsharpdriver</strong>，然后按 <strong>Enter</strong>。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/focus-mongolab-csharp-pmconsole.png" alt="程序包管理器控制台"/>MongoDB C# 驱动程序与项目集成，自动将下行添加到 <em>packages.config</em> 文件：</p>
<pre class="prettyprint">&lt; package id="mongocsharpdriver" version="1.6" targetFramework="net40" / &gt;</pre>
</li>
</ol>
<h3>添加笔记模型</h3>
<p>首先，建立一个 Notes 模型，其中只有简单的日期和文本内容。</p>
<ol>
<li>在“解决方案资源管理器”中，右键单击 <strong>Models</strong>，然后选择“添加”&gt;“类”<strong></strong>。将这个新类命名为 <em>Note.cs</em>。</li>
<li>
<p>将为此类自动生成的代码替换为以下内容：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using MongoDB.Bson.Serialization.Attributes; using MongoDB.Bson.Serialization.IdGenerators; using MongoDB.Bson;   namespace mongoNotes.Models {     public class Note     {         public Note()         {             Date = DateTime.UtcNow;         }       private DateTime date;       [BsonId(IdGenerator = typeof(CombGuidGenerator))]     public Guid Id { get; set; }       [BsonElement("Note")]     public string Text { get; set; }       [BsonElement("Date")]     public DateTime Date {         get { return date.ToLocalTime(); }         set { date = value;}     } }   }</pre>
</li>
</ol>
<h3>添加数据访问层</h3>
<p>您要确立一种访问 MongoDB 的方法以检索和保存笔记，这一点很重要。您的数据访问层将使用 Note 模型，以后还将绑定到您的 HomeController 中。</p>
<ol>
<li>在“解决方案资源管理器”中，右键单击 <strong>mongoNotes</strong> 项目，然后选择“添加”&gt;“新建文件夹”<strong></strong>。将该文件夹命名为 <strong>DAL</strong>。</li>
<li>在“解决方案资源管理器”中，右键单击 <strong>DAL</strong>，然后选择“添加”&gt;“类”<strong></strong>。将这个新类命名为 <em>Dal.cs</em>。</li>
<li>
<p>将为此类自动生成的代码替换为以下内容：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using mongoNotes.Models; using MongoDB.Driver; using System.Configuration;   namespace mongoNotes {     public class Dal : IDisposable     {         private MongoServer mongoServer = null;         private bool disposed = false;       private string connectionString = System.Environment.GetEnvironmentVariable("CUSTOMCONNSTR_MONGOLAB_URI");       private string dbName = "myMongoApp";     private string collectionName = "Notes";       // Default constructor.             public Dal()     {     }       public List&amp;lt;Note&amp;gt; GetAllNotes()     {         try         {             MongoCollection&amp;lt;Note&amp;gt; collection = GetNotesCollection();             return collection.FindAll().ToList&amp;lt;Note&amp;gt;();         }         catch (MongoConnectionException)         {             return new List&amp;lt;Note&amp;gt;();         }     }       // Creates a Note and inserts it into the collection in MongoDB.     public void CreateNote(Note note)     {         MongoCollection&amp;lt;Note&amp;gt; collection = getNotesCollectionForEdit();         try         {             collection.Insert(note, SafeMode.True);         }         catch (MongoCommandException ex)         {             string msg = ex.Message;         }     }       private MongoCollection&amp;lt;Note&amp;gt; GetNotesCollection()     {         MongoServer server = MongoServer.Create(connectionString);         MongoDatabase database = server[dbName];         MongoCollection&amp;lt;Note&amp;gt; noteCollection = database.GetCollection&amp;lt;Note&amp;gt;(collectionName);         return noteCollection;     }       private MongoCollection&amp;lt;Note&amp;gt; getNotesCollectionForEdit()     {         MongoServer server = MongoServer.Create(connectionString);         MongoDatabase database = server[dbName];         MongoCollection&amp;lt;Note&amp;gt; notesCollection = database.GetCollection&amp;lt;Note&amp;gt;(collectionName);         return notesCollection;     }       # region IDisposable       public void Dispose()     {         this.Dispose(true);         GC.SuppressFinalize(this);     }       protected virtual void Dispose(bool disposing)     {         if (!this.disposed)         {             if (disposing)             {                 if (mongoServer != null)                 {                     this.mongoServer.Disconnect();                 }             }         }           this.disposed = true;     }       # endregion }   }</pre>
</li>
<li>
<p>注意上面的以下代码：</p>
<pre class="prettyprint">private string connectionString = System.Environment.GetEnvironmentVariable("CUSTOMCONNSTR_MONGOLAB_URI"); private string dbName = "myMongoApp";</pre>
<p>在此，您会访问一个您稍后将配置的环境变量。如果您出于开发用途正在运行一个本地 mongo 实例，则可能要暂时将此值设置为“localhost”。</p>
<p>还设置了您的数据库名称。具体而言，将 <strong>dbName</strong> 值设置为在配置 MongoLab 外接程序时输入的名称。</p>
</li>
<li>
<p>最后，检查 <strong>GetNotesCollection()</strong> 中的以下代码：</p>
<pre class="prettyprint">MongoServer server = MongoServer.Create(connectionString); MongoDatabase database = server[dbName]; MongoCollection&lt;Note&gt; notesCollection = database.GetCollection&lt;Note&gt;</pre>
<p>此处无需做任何更改；只是要了解，这正是让 MongoCollection 对象执行插入、更新和查询的方式，如 <strong>GetAllNotes()</strong> 中的以下代码：</p>
<pre class="prettyprint">collection.FindAll().ToList&lt;Note&gt;();</pre>
</li>
</ol>
<p>有关利用 MongoDB C# 驱动程序的详细信息，请参阅 mongodb.org 上的 <a href="http://www.mongodb.org/display/DOCS/CSharp+Driver+Quickstart" title="CSharp 驱动程序快速入门">CSharp 驱动程序快速入门</a>。</p>
<h3>添加创建视图</h3>
<p>现在，您将添加一个视图用于创建新笔记。</p>
<ol>
<li>在“解决方案资源管理器”中，右键单击 <strong>Views &gt; Home</strong> 条目，然后选择“添加”&gt;“视图”<strong></strong>。将这个新视图命名为 <strong>Create</strong>，然后单击“添加”<strong></strong>。</li>
<li>
<p>将为此视图 (<strong>Create.cshtml</strong>) 自动生成的代码替换为以下内容：</p>
<pre class="prettyprint">@model mongoNotes.Models.Note   &lt;script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"&gt;&lt;/script&gt;   @using (Html.BeginForm("Create", "Home")) {     @Html.ValidationSummary(true)     &lt;fieldset&gt;         &lt;legend&gt;New Note&lt;/legend&gt;         &lt;h3&gt;New Note&lt;/h3&gt;                &lt;div class="editor-label"&gt;             @Html.LabelFor(model =&gt; model.Text)         &lt;/div&gt;         &lt;div class="editor-field"&gt;             @Html.EditorFor(model =&gt; model.Text)         &lt;/div&gt;        &lt;p&gt;             &lt;input type="submit" value="Create" /&gt;        &lt;/p&gt;    &lt;/fieldset&gt; }</pre>
</li>
</ol>
<h3>修改 index.cshtml</h3>
<p>接下来，在您的网站上放置一个用于查看和创建笔记的简单布局。</p>
<ol>
<li>
<p>在 <strong>Views &gt; Home</strong> 下打开 <strong>Index.cshtml</strong>，然后将其内容替换为以下内容：</p>
<pre class="prettyprint">@model IEnumerable&lt;mongoNotes.Models.Note&gt;   @{     ViewBag.Title = "Notes"; }   &lt;h2&gt;My Notes&lt;/h2&gt;   &lt;table border="1"&gt;     &lt;tr&gt;         &lt;th&gt;Date&lt;/th&gt;         &lt;th&gt;Note Text&lt;/th&gt;           &lt;/tr&gt;   @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Date)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Text)         &lt;/td&gt;            &lt;/tr&gt; }   &lt;/table&gt; &lt;div&gt;  @Html.Partial("Create", new mongoNotes.Models.Note())&lt;/div&gt;</pre>
</li>
</ol>
<h3>修改 HomeController.cs</h3>
<p>最后，HomeController 需要将您的数据访问层实例化，然后将其应用于您的视图。</p>
<ol>
<li>
<p>在“解决方案资源管理器”中，打开 <strong>Controllers</strong> 下的 <strong>HomeController.cs</strong>，然后其内容替换为以下内容：</p>
<pre class="prettyprint">using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using mongoNotes.Models; using System.Configuration;   namespace mongoNotes.Controllers {     public class HomeController : Controller, IDisposable     {         private Dal dal = new Dal();         private bool disposed = false;         //         // GET: /Task/       public ActionResult Index()     {         return View(dal.GetAllNotes());     }       //     // GET: /Task/Create       public ActionResult Create()     {         return View();     }       //     // POST: /Task/Create       [HttpPost]     public ActionResult Create(Note note)     {         try         {             dal.CreateNote(note);             return RedirectToAction("Index");         }         catch         {             return View();         }     }       public ActionResult About()     {         return View();     }       # region IDisposable       new protected void Dispose()     {         this.Dispose(true);         GC.SuppressFinalize(this);     }       new protected virtual void Dispose(bool disposing)     {         if (!this.disposed)         {             if (disposing)             {                 this.dal.Dispose();             }         }           this.disposed = true;     }       # endregion   }   }</pre>
</li>
</ol>
<h2><a name="deploy"></a>部署应用程序</h2>
<p>现在，应用程序已开发完毕，是时候创建一个用于承载该应用程序的 Windows Azure 网站，配置该网站，并部署代码了。本节的关键是使用 MongoDB 连接字符串 (URI)。您将使用此 URI 在您的网站中配置环境变量以便将该 URI 与您的代码分开。您应将该 URI 视为敏感信息，因为它包含用于连接到您的数据库的凭据。</p>
<h3>创建新网站并获取发布设置文件</h3>
<p>在 Windows Azure 中创建网站非常简便，尤其是 Windows Azure 为 Visual Studio 自动生成发布配置文件时。</p>
<ol>
<li>在 Windows Azure 门户中，单击“新建”<strong></strong>。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/button-new.png" alt="新建"/></li>
<li>选择“计算”&gt;“网站”&gt;“快速创建”<strong></strong>。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/screen-mongolab-newwebsite.png" alt="创建网站"/></li>
<li>输入 URL 前缀。选择所需的名称，但要注意，该名称必须独一无二（可能无法使用“mongoNotes”）。</li>
<li>单击“创建网站”<strong></strong>。</li>
<li>网站创建完成时，单击网站列表中的网站名称。将显示网站仪表板。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/screen-mongolab-websitedashboard.png" alt="网站仪表板"/></li>
<li>在“速览”<strong></strong>下单击“下载发布配置文件”<strong></strong>，然后将 .PublishSettings 文件保存到所选的目录。<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/button-website-downloadpublishprofile.png" alt="下载发布配置文件"/></li>
</ol>
<h3>获取 MongoLab 连接字符串</h3>
<?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-get-connectioninfo-mongolab" macroAlias="AzureChunkDisplayer" />
<h3>将该连接字符串添加到网站的环境变量中</h3>
<?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-save-connectioninfo-mongolab" macroAlias="AzureChunkDisplayer" />
<h3>发布网站</h3>
<ol>
<li>在 Visual Studio 的“解决方案资源管理器”中，右键单击 <strong>mongoNotes</strong> 项目，然后选择“发布”<strong></strong>。随后显示“发布”对话框：<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/dialog-mongolab-vspublish.png" alt="发布"/></li>
<li>单击“导入”<strong></strong>，然后从所选的下载目录中选择该 .PublishSettings 文件。此文件自动填充“发布”对话框中的值。</li>
<li>单击“验证连接”<strong></strong>以测试此文件。</li>
<li>验证成功后，单击“发布”<strong></strong>。发布完毕后，将打开一个新的浏览器选项卡，其中显示该网站。</li>
<li>输入一些笔记文本，单击 <strong>Create</strong>，然后查看结果！<br /><img src="http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/media/devcenter/dotnet/screen-mongolab-sampleapp.png" alt="HelloMongoAzure"/></li>
</ol>
<h2><a name="manage"></a>管理数据库</h2>
<?UMBRACO_MACRO chunkpath="devcenter/shared" hide="0" chunkname="howto-access-mongolab-ui" macroAlias="AzureChunkDisplayer" />
<p>祝贺您！您刚刚启动了由 MongoLab 托管的 MongoDB 数据库提供支持的 C# ASP.NET 应用程序！现在，您已拥有 MongoLab 数据库，关于数据库如有任何问题或疑虑，或者要获得 MongoDB 或 C# 驱动程序本身的帮助，可联系 <a href="mailto:support@mongolab.com">support@mongolab.com</a>。祝您好运！</p>
</div>]]></bodyText><umbracoNaviHide>1</umbracoNaviHide><pageTitle>在 MongoLab 上创建使用 MongoDB 的网站 (.NET)</pageTitle><metaKeywords></metaKeywords><metaDescription><![CDATA[了解如何创建将数据存储在由 MongoLab 托管的 MongoDB 中的 Windows Azure 网站。]]></metaDescription><linkid>develop-net-tutorials-website-with-mongodb-mongolab</linkid><urlDisplayName>MongoLab 上含有 MongoDB 的网站</urlDisplayName><headerExpose></headerExpose><footerExpose></footerExpose><disqusComments>1</disqusComments><metaCanonical></metaCanonical><isHeader>0</isHeader><pageTemplate>dynamic-leftnav</pageTemplate><localize>1</localize><localizePartial>0</localizePartial><sitemapHide></sitemapHide><headerText><![CDATA[]]></headerText></umbTextpage></localize>